/home/s22100141/Capston2/libpng/contrib/tools/pngfix.c:
    1|       |/* pngfix.c
    2|       | *
    3|       | * Copyright (c) 2014-2017,2024 John Cunningham Bowler
    4|       | *
    5|       | * This code is released under the libpng license.
    6|       | * For conditions of distribution and use, see the disclaimer
    7|       | * and license in png.h
    8|       | *
    9|       | * Tool to check and fix the zlib inflate 'too far back' problem.
   10|       | * See the usage message for more information.
   11|       | */
   12|       |
   13|       |#include <stdlib.h>
   14|       |#include <stdio.h>
   15|       |#include <string.h>
   16|       |#include <ctype.h>
   17|       |#include <limits.h>
   18|       |#include <errno.h>
   19|       |#include <assert.h>
   20|       |
   21|       |#define implies(x,y) assert(!(x) || (y))
   22|       |
   23|       |#define PROGRAM_NAME "pngfix"
   24|       |
   25|       |/* Define the following to use this program against your installed libpng,
   26|       | * rather than the one being built here:
   27|       | */
   28|       |#ifdef PNG_FREESTANDING_TESTS
   29|       |#  include <png.h>
   30|       |#else
   31|       |#  include "../../png.h"
   32|       |#endif
   33|       |
   34|       |#if PNG_LIBPNG_VER < 10603 /* 1.6.3 */
   35|       |#  error "pngfix will not work with libpng prior to 1.6.3"
   36|       |#endif
   37|       |
   38|       |#ifdef PNG_SETJMP_SUPPORTED
   39|       |#include <setjmp.h>
   40|       |
   41|       |#if defined(PNG_READ_SUPPORTED) && defined(PNG_EASY_ACCESS_SUPPORTED) &&\
   42|       |   (defined(PNG_READ_DEINTERLACE_SUPPORTED) ||\
   43|       |    defined(PNG_READ_INTERLACING_SUPPORTED))
   44|       |
   45|       |/* zlib.h defines the structure z_stream, an instance of which is included
   46|       | * in this structure and is required for decompressing the LZ compressed
   47|       | * data in PNG files.
   48|       | */
   49|       |#ifndef ZLIB_CONST
   50|       |   /* We must ensure that zlib uses 'const' in declarations. */
   51|       |#  define ZLIB_CONST
   52|       |#endif
   53|       |#include <zlib.h>
   54|       |#ifdef const
   55|       |   /* zlib.h sometimes #defines const to nothing, undo this. */
   56|       |#  undef const
   57|       |#endif
   58|       |
   59|       |/* zlib.h has mediocre z_const use before 1.2.6, this stuff is for compatibility
   60|       | * with older builds.
   61|       | */
   62|       |#if ZLIB_VERNUM < 0x1260
   63|       |#  define PNGZ_MSG_CAST(s) constcast(char*,s)
   64|       |#  define PNGZ_INPUT_CAST(b) constcast(png_bytep,b)
   65|       |#else
   66|     35|#  define PNGZ_MSG_CAST(s) (s)
   67|       |#  define PNGZ_INPUT_CAST(b) (b)
   68|       |#endif
   69|       |
   70|       |#ifndef PNG_MAXIMUM_INFLATE_WINDOW
   71|       |#  error "pngfix not supported in this libpng version"
   72|       |#endif
   73|       |
   74|       |#if ZLIB_VERNUM >= 0x1240
   75|       |
   76|       |/* Copied from pngpriv.h */
   77|       |#ifdef __cplusplus
   78|       |#  define voidcast(type, value) static_cast<type>(value)
   79|       |#  define constcast(type, value) const_cast<type>(value)
   80|       |#  define aligncast(type, value) \
   81|       |   static_cast<type>(static_cast<void*>(value))
   82|       |#  define aligncastconst(type, value) \
   83|       |   static_cast<type>(static_cast<const void*>(value))
   84|       |#else
   85|  18.5k|#  define voidcast(type, value) (value)
   86|       |#  define constcast(type, value) ((type)(value))
   87|       |#  define aligncast(type, value) ((void*)(value))
   88|       |#  define aligncastconst(type, value) ((const void*)(value))
   89|       |#endif /* __cplusplus */
   90|       |
   91|       |#if PNG_LIBPNG_VER < 10700
   92|       |/* Chunk tags (copied from pngpriv.h) */
   93|  77.1k|#define PNG_32b(b,s) ((png_uint_32)(b) << (s))
   94|       |#define PNG_U32(b1,b2,b3,b4) \
   95|  19.7k|   (PNG_32b(b1,24) | PNG_32b(b2,16) | PNG_32b(b3,8) | PNG_32b(b4,0))
   96|       |
   97|       |/* Constants for known chunk types. */
   98|  2.79k|#define png_IDAT PNG_U32( 73,  68,  65,  84)
   99|  2.07k|#define png_IEND PNG_U32( 73,  69,  78,  68)
  100|    738|#define png_IHDR PNG_U32( 73,  72,  68,  82)
  101|       |#define png_PLTE PNG_U32( 80,  76,  84,  69)
  102|      0|#define png_bKGD PNG_U32( 98,  75,  71,  68)
  103|     48|#define png_cHRM PNG_U32( 99,  72,  82,  77)
  104|      0|#define png_fRAc PNG_U32(102,  82,  65,  99) /* registered, not defined */
  105|     37|#define png_gAMA PNG_U32(103,  65,  77,  65)
  106|      0|#define png_gIFg PNG_U32(103,  73,  70, 103)
  107|      0|#define png_gIFt PNG_U32(103,  73,  70, 116) /* deprecated */
  108|      0|#define png_gIFx PNG_U32(103,  73,  70, 120)
  109|      0|#define png_hIST PNG_U32(104,  73,  83,  84)
  110|     48|#define png_iCCP PNG_U32(105,  67,  67,  80)
  111|    716|#define png_iTXt PNG_U32(105,  84,  88, 116)
  112|    358|#define png_oFFs PNG_U32(111,  70,  70, 115)
  113|    358|#define png_pCAL PNG_U32(112,  67,  65,  76)
  114|    358|#define png_pHYs PNG_U32(112,  72,  89, 115)
  115|     89|#define png_sBIT PNG_U32(115,  66,  73,  84)
  116|    358|#define png_sCAL PNG_U32(115,  67,  65,  76)
  117|    358|#define png_sPLT PNG_U32(115,  80,  76,  84)
  118|    189|#define png_sRGB PNG_U32(115,  82,  71,  66)
  119|    358|#define png_sTER PNG_U32(115,  84,  69,  82)
  120|    707|#define png_tEXt PNG_U32(116,  69,  88, 116)
  121|    707|#define png_tIME PNG_U32(116,  73,  77,  69)
  122|     89|#define png_tRNS PNG_U32(116,  82,  78,  83)
  123|    707|#define png_zTXt PNG_U32(122,  84,  88, 116)
  124|       |#endif
  125|       |
  126|       |/* The 8-byte signature as a pair of 32-bit quantities */
  127|    374|#define sig1 PNG_U32(137,  80,  78,  71)
  128|    374|#define sig2 PNG_U32( 13,  10,  26,  10)
  129|       |
  130|       |/* Is the chunk critical? */
  131|  2.04k|#define CRITICAL(chunk) (((chunk) & PNG_U32(32,0,0,0)) == 0)
  132|       |
  133|       |/* Is it safe to copy? */
  134|      9|#define SAFE_TO_COPY(chunk) (((chunk) & PNG_U32(0,0,0,32)) != 0)
  135|       |
  136|       |/********************************* UTILITIES **********************************/
  137|       |/* UNREACHED is a value to cause an assert to fail. Because of the way the
  138|       | * assert macro is written the string "UNREACHED" is produced in the error
  139|       | * message.
  140|       | */
  141|       |#define UNREACHED 0
  142|       |
  143|       |/* 80-bit number handling - a PNG image can be up to (2^31-1)x(2^31-1) 8-byte
  144|       | * (16-bit RGBA) pixels in size; that's less than 2^65 bytes or 2^68 bits, so
  145|       | * arithmetic of 80-bit numbers is sufficient.  This representation uses an
  146|       | * arbitrary length array of png_uint_16 digits (0..65535).  The representation
  147|       | * is little endian.
  148|       | *
  149|       | * The arithmetic functions take zero to two uarb values together with the
  150|       | * number of digits in those values and write the result to the given uarb
  151|       | * (always the first argument) returning the number of digits in the result.
  152|       | * If the result is negative the return value is also negative (this would
  153|       | * normally be an error).
  154|       | */
  155|       |typedef png_uint_16  udigit; /* A 'unum' is an array of these */
  156|       |typedef png_uint_16p uarb;
  157|       |typedef png_const_uint_16p uarbc;
  158|       |
  159|       |#define UDIGITS(unum) ((sizeof unum)/(sizeof (udigit))
  160|       |   /* IMPORTANT: only apply this to an array, applied to a pointer the result
  161|       |    * will typically be '2', which is not useful.
  162|       |    */
  163|       |
  164|       |static int
  165|       |uarb_set(uarb result, png_alloc_size_t val)
  166|       |   /* Set (initialize) 'result' to 'val'.  The size required for 'result' must
  167|       |    * be determined by the caller from a knowledge of the maximum for 'val'.
  168|       |    */
  169|  21.3k|{
  170|  21.3k|   int ndigits = 0;
  171|       |
  172|  23.9k|   while (val > 0)
  173|  2.51k|   {
  174|  2.51k|      result[ndigits++] = (png_uint_16)(val & 0xffff);
  175|  2.51k|      val >>= 16;
  176|  2.51k|   }
  177|       |
  178|  21.3k|   return ndigits;
  179|  21.3k|}
  180|       |
  181|       |static int
  182|       |uarb_copy(uarb to, uarb from, int idigits)
  183|       |   /* Copy a uarb, may reduce the digit count */
  184|  1.14k|{
  185|  1.14k|   int d, odigits;
  186|       |
  187|  2.45k|   for (d=odigits=0; d<idigits; ++d)
  188|  1.30k|      if ((to[d] = from[d]) != 0)
  189|  1.30k|         odigits = d+1;
  190|       |
  191|  1.14k|   return odigits;
  192|  1.14k|}
  193|       |
  194|       |static int
  195|       |uarb_inc(uarb num, int in_digits, png_int_32 add)
  196|       |   /* This is a signed 32-bit add, except that to avoid overflow the value added
  197|       |    * or subtracted must be no more than 2^31-65536.  A negative result
  198|       |    * indicates a negative number (which is an error below).  The size of
  199|       |    * 'num' should be max(in_digits+1,2) for arbitrary 'add' but can be just
  200|       |    * in_digits+1 if add is known to be in the range -65535..65535.
  201|       |    */
  202|   194k|{
  203|   194k|   int out_digits = 0;
  204|       |
  205|   380k|   while (out_digits < in_digits)
  206|   186k|   {
  207|   186k|      add += num[out_digits];
  208|   186k|      num[out_digits++] = (png_uint_16)(add & 0xffff);
  209|   186k|      add >>= 16;
  210|   186k|   }
  211|       |
  212|   194k|   while (add != 0 && add != (-1))
  213|    160|   {
  214|    160|      num[out_digits++] = (png_uint_16)(add & 0xffff);
  215|    160|      add >>= 16;
  216|    160|   }
  217|       |
  218|   194k|   if (add == 0)
  219|   194k|   {
  220|   194k|      while (out_digits > 0 && num[out_digits-1] == 0)
  221|      0|         --out_digits;
  222|   194k|      return out_digits; /* may be 0 */
  223|   194k|   }
  224|       |
  225|      0|   else /* negative result */
  226|      0|   {
  227|      0|      while (out_digits > 1 && num[out_digits-1] == 0xffff)
  228|      0|         --out_digits;
  229|       |
  230|      0|      return -out_digits;
  231|      0|   }
  232|   194k|}
  233|       |
  234|       |static int
  235|       |uarb_add32(uarb num, int in_digits, png_uint_32 add)
  236|       |   /* As above but this works with any 32-bit value and only does 'add' */
  237|   117k|{
  238|   117k|   if (in_digits > 0)
  239|  96.8k|   {
  240|  96.8k|      in_digits = uarb_inc(num, in_digits, add & 0xffff);
  241|  96.8k|      return uarb_inc(num+1, in_digits-1, add >> 16)+1;
  242|  96.8k|   }
  243|       |
  244|  20.4k|   return uarb_set(num, add);
  245|   117k|}
  246|       |
  247|       |static int
  248|       |uarb_mult_digit(uarb acc, int a_digits, uarb num, int n_digits,
  249|       |   png_uint_16 val)
  250|       |   /* Primitive one-digit multiply - 'val' must be 0..65535. Note that this
  251|       |    * primitive is a multiply and accumulate - the result of *num * val is added
  252|       |    * to *acc.
  253|       |    *
  254|       |    * This is a one-digit multiply, so the product may be up to one digit longer
  255|       |    * than 'num', however the add to 'acc' means that the caller must ensure
  256|       |    * that 'acc' is at least one digit longer than this *and* at least one digit
  257|       |    * longer than the current length of 'acc'.  (Or the caller must otherwise
  258|       |    * ensure 'adigits' is adequate from knowledge of the values.)
  259|       |    */
  260|    883|{
  261|       |   /* The digits in *acc, *num and val are in the range 0..65535, so the
  262|       |    * result below is at most (65535*65535)+2*65635 = 65535*(65535+2), which is
  263|       |    * exactly 0xffffffff.
  264|       |    */
  265|    883|   if (val > 0 && n_digits > 0) /* Else the product is 0 */
  266|    883|   {
  267|    883|      png_uint_32 carry = 0;
  268|    883|      int out_digits = 0;
  269|       |
  270|  1.89k|      while (out_digits < n_digits || carry > 0)
  271|  1.01k|      {
  272|  1.01k|         if (out_digits < a_digits)
  273|    514|            carry += acc[out_digits];
  274|       |
  275|  1.01k|         if (out_digits < n_digits)
  276|    901|            carry += (png_uint_32)num[out_digits] * val;
  277|       |
  278|  1.01k|         acc[out_digits++] = (png_uint_16)(carry & 0xffff);
  279|  1.01k|         carry >>= 16;
  280|  1.01k|      }
  281|       |
  282|       |      /* So carry is 0 and all the input digits have been consumed. This means
  283|       |       * that it is possible to skip any remaining digits in acc.
  284|       |       */
  285|    883|      if (out_digits > a_digits)
  286|    385|         return out_digits;
  287|    883|   }
  288|       |
  289|    498|   return a_digits;
  290|    883|}
  291|       |
  292|       |static int
  293|       |uarb_mult32(uarb acc, int a_digits, uarb num, int n_digits, png_uint_32 val)
  294|       |   /* calculate acc += num * val, 'val' may be any 32-bit value, 'acc' and 'num'
  295|       |    * may be any value, returns the number of digits in 'acc'.
  296|       |    */
  297|    447|{
  298|    447|   if (n_digits > 0 && val > 0)
  299|    435|   {
  300|    435|      a_digits = uarb_mult_digit(acc, a_digits, num, n_digits,
  301|    435|         (png_uint_16)(val & 0xffff));
  302|       |
  303|    435|      val >>= 16;
  304|    435|      if (val > 0)
  305|      1|         a_digits = uarb_mult_digit(acc+1, a_digits-1, num, n_digits,
  306|      1|            (png_uint_16)val) + 1;
  307|       |
  308|       |      /* Because n_digits and val are >0 the following must be true: */
  309|    435|      assert(a_digits > 0);
  310|    435|   }
  311|       |
  312|    447|   return a_digits;
  313|    447|}
  314|       |
  315|       |static int
  316|       |uarb_shift(uarb inout, int ndigits, unsigned int right_shift)
  317|       |   /* Shift inout right by right_shift bits, right_shift must be in the range
  318|       |    * 1..15
  319|       |    */
  320|    447|{
  321|    447|   int i = ndigits;
  322|    447|   png_uint_16 carry = 0;
  323|       |
  324|    447|   assert(right_shift >= 1 && right_shift <= 15);
  325|       |
  326|    906|   while (--i >= 0)
  327|    459|   {
  328|    459|      png_uint_16 temp = (png_uint_16)(carry | (inout[i] >> right_shift));
  329|       |
  330|       |      /* Bottom bits to top bits of carry */
  331|    459|      carry = (png_uint_16)((inout[i] << (16-right_shift)) & 0xffff);
  332|       |
  333|    459|      inout[i] = temp;
  334|       |
  335|       |      /* The shift may reduce ndigits */
  336|    459|      if (i+1 == ndigits && temp == 0)
  337|      5|         ndigits = i;
  338|    459|   }
  339|       |
  340|    447|   return ndigits;
  341|    447|}
  342|       |
  343|       |static int
  344|       |uarb_cmp(uarb a, int adigits, uarb b, int bdigits)
  345|       |   /* Return -1/0/+1 according as a<b/a==b/a>b */
  346|    281|{
  347|    281|   if (adigits < bdigits)
  348|     41|      return -1;
  349|       |
  350|    240|   if (adigits > bdigits)
  351|      5|      return 1;
  352|       |
  353|    512|   while (adigits-- > 0)
  354|    301|      if (a[adigits] < b[adigits])
  355|     19|         return -1;
  356|       |
  357|    282|      else if (a[adigits] > b[adigits])
  358|      5|         return 1;
  359|       |
  360|    211|   return 0;
  361|    235|}
  362|       |
  363|       |#if 0 /*UNUSED*/
  364|       |static int
  365|       |uarb_eq32(uarb num, int digits, png_uint_32 val)
  366|       |   /* Return true if the uarb is equal to 'val' */
  367|       |{
  368|       |   switch (digits)
  369|       |   {
  370|       |      case 0:  return val == 0;
  371|       |      case 1:  return val == num[0];
  372|       |      case 2:  return (val & 0xffff) == num[0] && (val >> 16) == num[1];
  373|       |      default: return 0;
  374|       |   }
  375|       |}
  376|       |#endif
  377|       |
  378|       |static void
  379|       |uarb_printx(uarb num, int digits, FILE *out)
  380|       |   /* Print 'num' as a hexadecimal number (easier than decimal!) */
  381|      0|{
  382|      0|   while (digits > 0)
  383|      0|      if (num[--digits] > 0)
  384|      0|      {
  385|      0|         fprintf(out, "0x%x", num[digits]);
  386|       |
  387|      0|         while (digits > 0)
  388|      0|            fprintf(out, "%.4x", num[--digits]);
  389|      0|      }
  390|       |
  391|      0|      else if (digits == 0) /* the number is 0 */
  392|      0|         fputs("0x0", out);
  393|      0|}
  394|       |
  395|       |static void
  396|       |uarb_print(uarb num, int digits, FILE *out)
  397|       |   /* Prints 'num' as a decimal if it will fit in an unsigned long, else as a
  398|       |    * hexadecimal number.  Notice that the results vary for images over 4GByte
  399|       |    * in a system dependent way, and the hexadecimal form doesn't work very well
  400|       |    * in awk script input.
  401|       |    *
  402|       |    *
  403|       |    * TODO: write uarb_div10
  404|       |    */
  405|  1.19k|{
  406|  1.19k|   if (digits * sizeof (udigit) > sizeof (unsigned long))
  407|      0|      uarb_printx(num, digits, out);
  408|       |
  409|  1.19k|   else
  410|  1.19k|   {
  411|  1.19k|      unsigned long n = 0;
  412|       |
  413|  2.50k|      while (digits > 0)
  414|  1.31k|         n = (n << 16) + num[--digits];
  415|       |
  416|  1.19k|      fprintf(out, "%lu", n);
  417|  1.19k|   }
  418|  1.19k|}
  419|       |
  420|       |/* Generate random bytes.  This uses a boring repeatable algorithm and it
  421|       | * is implemented here so that it gives the same set of numbers on every
  422|       | * architecture.  It's a linear congruential generator (Knuth or Sedgewick
  423|       | * "Algorithms") but it comes from the 'feedback taps' table in Horowitz and
  424|       | * Hill, "The Art of Electronics" (Pseudo-Random Bit Sequences and Noise
  425|       | * Generation.)
  426|       | *
  427|       | * (Copied from contrib/libtests/pngvalid.c)
  428|       | */
  429|       |static void
  430|       |make_random_bytes(png_uint_32* seed, void* pv, size_t size)
  431|  8.32k|{
  432|  8.32k|   png_uint_32 u0 = seed[0], u1 = seed[1];
  433|  8.32k|   png_bytep bytes = voidcast(png_bytep, pv);
  434|       |
  435|       |   /* There are thirty-three bits; the next bit in the sequence is bit-33 XOR
  436|       |    * bit-20.  The top 1 bit is in u1, the bottom 32 are in u0.
  437|       |    */
  438|  8.32k|   size_t i;
  439|  1.08M|   for (i=0; i<size; ++i)
  440|  1.08M|   {
  441|       |      /* First generate 8 new bits then shift them in at the end. */
  442|  1.08M|      png_uint_32 u = ((u0 >> (20-8)) ^ ((u1 << 7) | (u0 >> (32-7)))) & 0xff;
  443|  1.08M|      u1 <<= 8;
  444|  1.08M|      u1 |= u0 >> 24;
  445|  1.08M|      u0 <<= 8;
  446|  1.08M|      u0 |= u;
  447|  1.08M|      *bytes++ = (png_byte)u;
  448|  1.08M|   }
  449|       |
  450|  8.32k|   seed[0] = u0;
  451|  8.32k|   seed[1] = u1;
  452|  8.32k|}
  453|       |
  454|       |/* Clear an object to a random value. */
  455|       |static void
  456|       |clear(void *pv, size_t size)
  457|  8.32k|{
  458|  8.32k|   static png_uint_32 clear_seed[2] = { 0x12345678, 0x9abcdef0 };
  459|  8.32k|   make_random_bytes(clear_seed, pv, size);
  460|  8.32k|}
  461|       |
  462|  8.32k|#define CLEAR(object) clear(&(object), sizeof (object))
  463|       |
  464|       |/* Copied from unreleased 1.7 code.
  465|       | *
  466|       | * CRC checking uses a local pre-built implementation of the Ethernet CRC32.
  467|       | * This is to avoid a function call to the zlib DLL and to optimize the
  468|       | * byte-by-byte case.
  469|       | */
  470|       |static png_uint_32 crc_table[256] =
  471|       |{
  472|       |   0x00000000, 0x77073096, 0xee0e612c, 0x990951ba, 0x076dc419,
  473|       |   0x706af48f, 0xe963a535, 0x9e6495a3, 0x0edb8832, 0x79dcb8a4,
  474|       |   0xe0d5e91e, 0x97d2d988, 0x09b64c2b, 0x7eb17cbd, 0xe7b82d07,
  475|       |   0x90bf1d91, 0x1db71064, 0x6ab020f2, 0xf3b97148, 0x84be41de,
  476|       |   0x1adad47d, 0x6ddde4eb, 0xf4d4b551, 0x83d385c7, 0x136c9856,
  477|       |   0x646ba8c0, 0xfd62f97a, 0x8a65c9ec, 0x14015c4f, 0x63066cd9,
  478|       |   0xfa0f3d63, 0x8d080df5, 0x3b6e20c8, 0x4c69105e, 0xd56041e4,
  479|       |   0xa2677172, 0x3c03e4d1, 0x4b04d447, 0xd20d85fd, 0xa50ab56b,
  480|       |   0x35b5a8fa, 0x42b2986c, 0xdbbbc9d6, 0xacbcf940, 0x32d86ce3,
  481|       |   0x45df5c75, 0xdcd60dcf, 0xabd13d59, 0x26d930ac, 0x51de003a,
  482|       |   0xc8d75180, 0xbfd06116, 0x21b4f4b5, 0x56b3c423, 0xcfba9599,
  483|       |   0xb8bda50f, 0x2802b89e, 0x5f058808, 0xc60cd9b2, 0xb10be924,
  484|       |   0x2f6f7c87, 0x58684c11, 0xc1611dab, 0xb6662d3d, 0x76dc4190,
  485|       |   0x01db7106, 0x98d220bc, 0xefd5102a, 0x71b18589, 0x06b6b51f,
  486|       |   0x9fbfe4a5, 0xe8b8d433, 0x7807c9a2, 0x0f00f934, 0x9609a88e,
  487|       |   0xe10e9818, 0x7f6a0dbb, 0x086d3d2d, 0x91646c97, 0xe6635c01,
  488|       |   0x6b6b51f4, 0x1c6c6162, 0x856530d8, 0xf262004e, 0x6c0695ed,
  489|       |   0x1b01a57b, 0x8208f4c1, 0xf50fc457, 0x65b0d9c6, 0x12b7e950,
  490|       |   0x8bbeb8ea, 0xfcb9887c, 0x62dd1ddf, 0x15da2d49, 0x8cd37cf3,
  491|       |   0xfbd44c65, 0x4db26158, 0x3ab551ce, 0xa3bc0074, 0xd4bb30e2,
  492|       |   0x4adfa541, 0x3dd895d7, 0xa4d1c46d, 0xd3d6f4fb, 0x4369e96a,
  493|       |   0x346ed9fc, 0xad678846, 0xda60b8d0, 0x44042d73, 0x33031de5,
  494|       |   0xaa0a4c5f, 0xdd0d7cc9, 0x5005713c, 0x270241aa, 0xbe0b1010,
  495|       |   0xc90c2086, 0x5768b525, 0x206f85b3, 0xb966d409, 0xce61e49f,
  496|       |   0x5edef90e, 0x29d9c998, 0xb0d09822, 0xc7d7a8b4, 0x59b33d17,
  497|       |   0x2eb40d81, 0xb7bd5c3b, 0xc0ba6cad, 0xedb88320, 0x9abfb3b6,
  498|       |   0x03b6e20c, 0x74b1d29a, 0xead54739, 0x9dd277af, 0x04db2615,
  499|       |   0x73dc1683, 0xe3630b12, 0x94643b84, 0x0d6d6a3e, 0x7a6a5aa8,
  500|       |   0xe40ecf0b, 0x9309ff9d, 0x0a00ae27, 0x7d079eb1, 0xf00f9344,
  501|       |   0x8708a3d2, 0x1e01f268, 0x6906c2fe, 0xf762575d, 0x806567cb,
  502|       |   0x196c3671, 0x6e6b06e7, 0xfed41b76, 0x89d32be0, 0x10da7a5a,
  503|       |   0x67dd4acc, 0xf9b9df6f, 0x8ebeeff9, 0x17b7be43, 0x60b08ed5,
  504|       |   0xd6d6a3e8, 0xa1d1937e, 0x38d8c2c4, 0x4fdff252, 0xd1bb67f1,
  505|       |   0xa6bc5767, 0x3fb506dd, 0x48b2364b, 0xd80d2bda, 0xaf0a1b4c,
  506|       |   0x36034af6, 0x41047a60, 0xdf60efc3, 0xa867df55, 0x316e8eef,
  507|       |   0x4669be79, 0xcb61b38c, 0xbc66831a, 0x256fd2a0, 0x5268e236,
  508|       |   0xcc0c7795, 0xbb0b4703, 0x220216b9, 0x5505262f, 0xc5ba3bbe,
  509|       |   0xb2bd0b28, 0x2bb45a92, 0x5cb36a04, 0xc2d7ffa7, 0xb5d0cf31,
  510|       |   0x2cd99e8b, 0x5bdeae1d, 0x9b64c2b0, 0xec63f226, 0x756aa39c,
  511|       |   0x026d930a, 0x9c0906a9, 0xeb0e363f, 0x72076785, 0x05005713,
  512|       |   0x95bf4a82, 0xe2b87a14, 0x7bb12bae, 0x0cb61b38, 0x92d28e9b,
  513|       |   0xe5d5be0d, 0x7cdcefb7, 0x0bdbdf21, 0x86d3d2d4, 0xf1d4e242,
  514|       |   0x68ddb3f8, 0x1fda836e, 0x81be16cd, 0xf6b9265b, 0x6fb077e1,
  515|       |   0x18b74777, 0x88085ae6, 0xff0f6a70, 0x66063bca, 0x11010b5c,
  516|       |   0x8f659eff, 0xf862ae69, 0x616bffd3, 0x166ccf45, 0xa00ae278,
  517|       |   0xd70dd2ee, 0x4e048354, 0x3903b3c2, 0xa7672661, 0xd06016f7,
  518|       |   0x4969474d, 0x3e6e77db, 0xaed16a4a, 0xd9d65adc, 0x40df0b66,
  519|       |   0x37d83bf0, 0xa9bcae53, 0xdebb9ec5, 0x47b2cf7f, 0x30b5ffe9,
  520|       |   0xbdbdf21c, 0xcabac28a, 0x53b39330, 0x24b4a3a6, 0xbad03605,
  521|       |   0xcdd70693, 0x54de5729, 0x23d967bf, 0xb3667a2e, 0xc4614ab8,
  522|       |   0x5d681b02, 0x2a6f2b94, 0xb40bbe37, 0xc30c8ea1, 0x5a05df1b,
  523|       |   0x2d02ef8d
  524|       |};
  525|       |
  526|       |/* The CRC calculated here *IS* conditioned, the corresponding value used by
  527|       | * zlib and the result value is obtained by XORing with CRC_INIT, which is also
  528|       | * the first value that must be passed in (for the first byte) to crc_one_byte.
  529|       | */
  530|       |#define CRC_INIT 0xffffffff
  531|       |
  532|       |static png_uint_32
  533|       |crc_one_byte(png_uint_32 crc, int b)
  534|   282k|{
  535|   282k|   return crc_table[(crc ^ b) & 0xff] ^ (crc >> 8);
  536|   282k|}
  537|       |
  538|       |static png_uint_32
  539|       |crc_init_4(png_uint_32 value)
  540|  3.97k|{
  541|       |   /* This is an alternative to the algorithm used in zlib, which requires four
  542|       |    * separate tables to parallelize the four byte operations, it only works for
  543|       |    * a CRC of the first four bytes of the stream, but this is what happens in
  544|       |    * the parser below where length+chunk-name is read and chunk-name used to
  545|       |    * initialize the CRC.  Notice that the calculation here avoids repeated
  546|       |    * conditioning (xor with 0xffffffff) by storing the conditioned value.
  547|       |    */
  548|  3.97k|   png_uint_32 crc = crc_table[(~value >> 24)] ^ 0xffffff;
  549|       |
  550|  3.97k|   crc = crc_table[(crc ^ (value >> 16)) & 0xff] ^ (crc >> 8);
  551|  3.97k|   crc = crc_table[(crc ^ (value >> 8)) & 0xff] ^ (crc >> 8);
  552|  3.97k|   return crc_table[(crc ^ value) & 0xff] ^ (crc >> 8);
  553|  3.97k|}
  554|       |
  555|       |static int
  556|       |chunk_type_valid(png_uint_32 c)
  557|       |   /* Bit whacking approach to chunk name validation that is intended to avoid
  558|       |    * branches.  The cost is that it uses a lot of 32-bit constants, which might
  559|       |    * be bad on some architectures.
  560|       |    */
  561|  1.79k|{
  562|  1.79k|   png_uint_32 t;
  563|       |
  564|       |   /* Remove bit 5 from all but the reserved byte; this means every
  565|       |    * 8-bit unit must be in the range 65-90 to be valid.  So bit 5
  566|       |    * must be zero, bit 6 must be set and bit 7 zero.
  567|       |    */
  568|  1.79k|   c &= ~PNG_U32(32,32,0,32);
  569|  1.79k|   t = (c & ~0x1f1f1f1f) ^ 0x40404040;
  570|       |
  571|       |   /* Subtract 65 for each 8-bit quantity, this must not overflow
  572|       |    * and each byte must then be in the range 0-25.
  573|       |    */
  574|  1.79k|   c -= PNG_U32(65,65,65,65);
  575|  1.79k|   t |=c ;
  576|       |
  577|       |   /* Subtract 26, handling the overflow which should set the top
  578|       |    * three bits of each byte.
  579|       |    */
  580|  1.79k|   c -= PNG_U32(25,25,25,26);
  581|  1.79k|   t |= ~c;
  582|       |
  583|  1.79k|   return (t & 0xe0e0e0e0) == 0;
  584|  1.79k|}
  585|       |
  586|       |/**************************** CONTROL INFORMATION *****************************/
  587|       |
  588|       |/* Information about a sequence of IDAT chunks, the chunks have been re-synced
  589|       | * using sync_stream below and the new lengths are recorded here.  Because the
  590|       | * number of chunks is unlimited this is handled using a linked list of these
  591|       | * structures.
  592|       | */
  593|       |struct IDAT_list
  594|       |{
  595|       |   struct IDAT_list *next;     /* Linked list */
  596|       |   unsigned int      length;   /* Actual length of the array below */
  597|       |   unsigned int      count;    /* Number of entries that are valid */
  598|    374|#     define IDAT_INIT_LENGTH 16
  599|       |   png_uint_32       lengths[IDAT_INIT_LENGTH];
  600|       |};
  601|       |
  602|       |static void
  603|       |IDAT_list_init(struct IDAT_list *list)
  604|    374|{
  605|    374|   CLEAR(*list);
  606|       |
  607|    374|   list->next = NULL;
  608|    374|   list->length = IDAT_INIT_LENGTH;
  609|    374|}
  610|       |
  611|       |static size_t
  612|       |IDAT_list_size(struct IDAT_list *list, unsigned int length)
  613|       |   /* Return the size in bytes of an IDAT_list of the given length. */
  614|      0|{
  615|      0|   if (list != NULL)
  616|      0|      length = list->length;
  617|       |
  618|      0|   return sizeof *list - sizeof list->lengths +
  619|      0|      length * sizeof list->lengths[0];
  620|      0|}
  621|       |
  622|       |static void
  623|       |IDAT_list_end(struct IDAT_list *IDAT_list)
  624|    374|{
  625|    374|   struct IDAT_list *list = IDAT_list->next;
  626|       |
  627|    374|   CLEAR(*IDAT_list);
  628|       |
  629|    374|   while (list != NULL)
  630|      0|   {
  631|      0|      struct IDAT_list *next = list->next;
  632|       |
  633|      0|      clear(list, IDAT_list_size(list, 0));
  634|      0|      free(list);
  635|      0|      list = next;
  636|      0|   }
  637|    374|}
  638|       |
  639|       |static struct IDAT_list *
  640|       |IDAT_list_extend(struct IDAT_list *tail)
  641|      0|{
  642|       |   /* Use the previous cached value if available. */
  643|      0|   struct IDAT_list *next = tail->next;
  644|       |
  645|      0|   if (next == NULL)
  646|      0|   {
  647|       |      /* Insert a new, malloc'ed, block of IDAT information buffers, this
  648|       |       * one twice as large as the previous one:
  649|       |       */
  650|      0|      unsigned int length = 2 * tail->length;
  651|       |
  652|      0|      if (length < tail->length) /* arithmetic overflow */
  653|      0|         length = tail->length;
  654|       |
  655|      0|      next = voidcast(IDAT_list*, malloc(IDAT_list_size(NULL, length)));
  656|      0|      CLEAR(*next);
  657|       |
  658|       |      /* The caller must handle this: */
  659|      0|      if (next == NULL)
  660|      0|         return NULL;
  661|       |
  662|      0|      next->next = NULL;
  663|      0|      next->length = length;
  664|      0|      tail->next = next;
  665|      0|   }
  666|       |
  667|      0|   return next;
  668|      0|}
  669|       |
  670|       |/* GLOBAL CONTROL STRUCTURE */
  671|       |struct global
  672|       |{
  673|       |   /* PUBLIC GLOBAL VARIABLES: OWNER INITIALIZE */
  674|       |   unsigned int   errors        :1; /* print file errors to stderr */
  675|       |   unsigned int   warnings      :1; /* print libpng warnings to stderr */
  676|       |   unsigned int   optimize_zlib :1; /* Run optimization search */
  677|       |   unsigned int   quiet         :2; /* don't output summaries */
  678|       |   unsigned int   verbose       :3; /* various internal tracking */
  679|       |   unsigned int   skip          :3; /* Non-critical chunks to skip */
  680|    374|#     define SKIP_NONE      0
  681|    402|#     define SKIP_BAD_CRC   1    /* Chunks with a bad CRC */
  682|      6|#     define SKIP_UNSAFE    2    /* Chunks not safe to copy */
  683|    710|#     define SKIP_UNUSED    3    /* Chunks not used by libpng */
  684|      0|#     define SKIP_TRANSFORM 4    /* Chunks only used in transforms */
  685|     48|#     define SKIP_COLOR     5    /* Everything but tRNS, sBIT, gAMA and sRGB */
  686|    189|#     define SKIP_ALL       6    /* Everything but tRNS and sBIT */
  687|       |
  688|       |   png_uint_32    idat_max;         /* 0 to perform no re-chunking */
  689|       |
  690|       |   int            status_code;      /* Accumulated status code */
  691|     52|#     define TOO_FAR_BACK   0x01 /* found a too-far-back error */
  692|    402|#     define CRC_ERROR      0x02 /* fixed an invalid CRC */
  693|     62|#     define STREAM_ERROR   0x04 /* damaged PNG stream (may be fixable) */
  694|     42|#     define TRUNCATED      0x08 /* truncated but still readable */
  695|    117|#     define FILE_ERROR     0x10 /* could not read the file */
  696|      0|#     define WRITE_ERROR    0x20 /* write error (this terminates the read) */
  697|      0|#     define INTERNAL_ERROR 0x40 /* internal limits/errors encountered */
  698|       |
  699|       |   /* PUBLIC GLOBAL VARIABLES: USED INTERNALLY BY IDAT READ CODE */
  700|       |   struct IDAT_list idat_cache;  /* Cache of file IDAT information buffers */
  701|       |      /* The structure is shared across all uses of this global control
  702|       |       * structure to avoid reallocation between IDAT streams.
  703|       |       */
  704|       |};
  705|       |
  706|       |static int
  707|       |global_end(struct global *global)
  708|    374|{
  709|       |
  710|    374|   int rc;
  711|       |
  712|    374|   IDAT_list_end(&global->idat_cache);
  713|    374|   rc = global->status_code;
  714|    374|   CLEAR(*global);
  715|    374|   return rc;
  716|    374|}
  717|       |
  718|       |static void
  719|       |global_init(struct global *global)
  720|       |   /* Call this once (and only once) to initialize the control */
  721|    374|{
  722|    374|   CLEAR(*global);
  723|       |
  724|       |   /* Globals */
  725|    374|   global->errors        = 0;
  726|    374|   global->warnings      = 0;
  727|    374|   global->quiet         = 0;
  728|    374|   global->verbose       = 0;
  729|    374|   global->idat_max      = 0;         /* no re-chunking of IDAT */
  730|    374|   global->optimize_zlib = 0;
  731|    374|   global->skip          = SKIP_NONE;
  732|    374|   global->status_code   = 0;
  733|       |
  734|    374|   IDAT_list_init(&global->idat_cache);
  735|    374|}
  736|       |
  737|       |static int
  738|       |skip_chunk_type(const struct global *global, png_uint_32 type)
  739|       |   /* Return true if this chunk is to be skipped according to the --strip
  740|       |    * option.  This code needs to recognize all known ancillary chunks in order
  741|       |    * to handle the --strip=unsafe option.
  742|       |    */
  743|  2.04k|{
  744|       |   /* Never strip critical chunks: */
  745|  2.04k|   if (CRITICAL(type))
  746|  1.00k|      return 0;
  747|       |
  748|  1.04k|   switch (type)
  749|  1.04k|   {
  750|       |      /* Chunks that are treated as, effectively, critical because they affect
  751|       |       * correct interpretation of the pixel values:
  752|       |       */
  753|     89|      case png_tRNS: case png_sBIT:
  754|     89|         return 0;
  755|       |
  756|       |      /* Chunks that specify gamma encoding which should therefore only be
  757|       |       * removed if the user insists:
  758|       |       */
  759|    189|      case png_gAMA: case png_sRGB:
  760|    189|         if (global->skip >= SKIP_ALL)
  761|      0|            return 1;
  762|    189|         return 0;
  763|       |
  764|       |      /* Chunks that affect color interpretation - not used by libpng and rarely
  765|       |       * used by applications, but technically still required for correct
  766|       |       * interpretation of the image data:
  767|       |       */
  768|     48|      case png_cHRM: case png_iCCP:
  769|     48|         if (global->skip >= SKIP_COLOR)
  770|      0|            return 1;
  771|     48|         return 0;
  772|       |
  773|       |      /* Other chunks that are used by libpng in image transformations (as
  774|       |       * opposed to known chunks that have get/set APIs but are not otherwise
  775|       |       * used.)
  776|       |       */
  777|      0|      case png_bKGD:
  778|      0|         if (global->skip >= SKIP_TRANSFORM)
  779|      0|            return 1;
  780|      0|         return 0;
  781|       |
  782|       |      /* All other chunks that libpng knows about and affect neither image
  783|       |       * interpretation nor libpng transforms - chunks that are effectively
  784|       |       * unused by libpng even though libpng might recognize and store them.
  785|       |       */
  786|      0|      case png_fRAc: case png_gIFg: case png_gIFt: case png_gIFx: case png_hIST:
  787|    358|      case png_iTXt: case png_oFFs: case png_pCAL: case png_pHYs: case png_sCAL:
  788|    707|      case png_sPLT: case png_sTER: case png_tEXt: case png_tIME: case png_zTXt:
  789|    707|         if (global->skip >= SKIP_UNUSED)
  790|      0|            return 1;
  791|    707|         return 0;
  792|       |
  793|       |      /* Chunks that libpng does not know about (notice that this depends on the
  794|       |       * list above including all known chunks!)  The decision here depends on
  795|       |       * whether the safe-to-copy bit is set in the chunk type.
  796|       |       */
  797|      9|      default:
  798|      9|         if (SAFE_TO_COPY(type))
  799|      3|         {
  800|      3|            if (global->skip >= SKIP_UNUSED) /* as above */
  801|      0|               return 1;
  802|      3|         }
  803|       |
  804|      6|         else if (global->skip >= SKIP_UNSAFE)
  805|      0|            return 1;
  806|       |
  807|      9|         return 0;
  808|  1.04k|   }
  809|  1.04k|}
  810|       |
  811|       |/* PER-FILE CONTROL STRUCTURE */
  812|       |struct chunk;
  813|       |struct IDAT;
  814|       |struct file
  815|       |{
  816|       |   /* ANCESTORS */
  817|       |   struct global *global;
  818|       |
  819|       |   /* PUBLIC PER-FILE VARIABLES: CALLER INITIALIZE */
  820|       |   const char *   file_name;
  821|       |   const char *   out_name;      /* Name of output file (if required) */
  822|       |
  823|       |   /* PUBLIC PER-FILE VARIABLES: SET BY PNG READ CODE */
  824|       |   /* File specific result codes */
  825|       |   int            status_code;   /* Set to a bit mask of the following: */
  826|       |   int            read_errno;    /* Records a read error errno */
  827|       |   int            write_errno;   /* Records a write error errno */
  828|       |
  829|       |   /* IHDR information */
  830|       |   png_uint_32    width;
  831|       |   png_uint_32    height;
  832|       |   png_byte       bit_depth;
  833|       |   png_byte       color_type;
  834|       |   png_byte       compression_method;
  835|       |   png_byte       filter_method;
  836|       |   png_byte       interlace_method;
  837|       |
  838|       |   udigit         image_bytes[5];
  839|       |   int            image_digits;
  840|       |
  841|       |   /* PROTECTED PER-FILE VARIABLES: USED BY THE READ CODE */
  842|       |   FILE *         file;          /* Original PNG file */
  843|       |   FILE *         out;           /* If a new one is being written */
  844|       |   jmp_buf        jmpbuf;        /* Set while reading a PNG */
  845|       |
  846|       |   /* PROTECTED CHUNK SPECIFIC VARIABLES: USED BY CHUNK CODE */
  847|       |   /* The following variables are used during reading to record the length, type
  848|       |    * and data position of the *next* chunk or, right at the start, the
  849|       |    * signature (in length,type).
  850|       |    *
  851|       |    * When a chunk control structure is instantiated these values are copied
  852|       |    * into the structure and can then be overwritten with the data for the next
  853|       |    * chunk.
  854|       |    */
  855|       |   fpos_t         data_pos;      /* Position of first byte of chunk data */
  856|       |   png_uint_32    length;        /* First word (length or signature start) */
  857|       |   png_uint_32    type;          /* Second word (type or signature end) */
  858|       |   png_uint_32    crc;           /* Running chunk CRC (used by read_chunk) */
  859|       |
  860|       |   /* These counts are maintained by the read and write routines below and are
  861|       |    * reset by the chunk handling code.  They record the total number of bytes
  862|       |    * read or written for the chunk, including the header (length,type) bytes.
  863|       |    */
  864|       |   png_uint_32    read_count;    /* Count of bytes read (in the chunk) */
  865|       |   png_uint_32    write_count;   /* Count of bytes written (in the chunk) */
  866|       |   int            state;         /* As defined here: */
  867|   314k|#     define STATE_SIGNATURE  0  /* The signature is being written */
  868|    702|#     define STATE_CHUNKS     1  /* Non-IDAT chunks are being written */
  869|   137k|#     define STATE_IDAT       2  /* An IDAT stream is being written */
  870|       |
  871|       |   /* Two pointers used to enable clean-up in the event of fatal errors and to
  872|       |    * hold state about the parser process (only one of each at present.)
  873|       |    */
  874|       |   struct chunk * chunk;
  875|       |   struct IDAT *  idat;
  876|       |
  877|       |   /* Interface to allocate a new chunk or IDAT control structure.  The result
  878|       |    * is returned by setting one or other of the above variables.  Note that the
  879|       |    * relevant initializer is called by the allocator function.  The alloc_ptr
  880|       |    * is used only by the implementation of the allocate function.
  881|       |    */
  882|       |   void *         alloc_ptr;
  883|       |   void         (*alloc)(struct file*,int idat);
  884|       |                                  /* idat: allocate IDAT not chunk */
  885|       |};
  886|       |
  887|       |/* Valid longjmp (stop) codes are: */
  888|      0|#define LIBPNG_WARNING_CODE   1 /* generic png_error */
  889|    288|#define LIBPNG_ERROR_CODE     2 /* generic png_error */
  890|     94|#define ZLIB_ERROR_CODE       3 /* generic zlib error */
  891|      6|#define INVALID_ERROR_CODE    4 /* detected an invalid PNG */
  892|     18|#define READ_ERROR_CODE       5 /* read failed */
  893|      0|#define WRITE_ERROR_CODE      6 /* error in write */
  894|     26|#define UNEXPECTED_ERROR_CODE 7 /* unexpected (internal?) error */
  895|       |
  896|       |static void
  897|       |emit_string(const char *str, FILE *out)
  898|       |   /* Print a string with spaces replaced by '_' and non-printing characters by
  899|       |    * an octal escape.
  900|       |    */
  901|    498|{
  902|  8.05k|   for (; *str; ++str)
  903|  7.56k|      if (isgraph(UCHAR_MAX & *str))
  904|  6.88k|         putc(*str, out);
  905|       |
  906|    674|      else if (isspace(UCHAR_MAX & *str))
  907|    674|         putc('_', out);
  908|       |
  909|      0|      else
  910|      0|         fprintf(out, "\\%.3o", *str);
  911|    498|}
  912|       |
  913|       |static const char *
  914|       |strcode(int code)
  915|    117|{
  916|    117|   switch (code)
  917|    117|   {
  918|      0|      case LIBPNG_WARNING_CODE:   return "warning";
  919|     48|      case LIBPNG_ERROR_CODE:     return "libpng";
  920|     47|      case ZLIB_ERROR_CODE:       return "zlib";
  921|      0|      case INVALID_ERROR_CODE:    return "invalid";
  922|      9|      case READ_ERROR_CODE:       return "read";
  923|      0|      case WRITE_ERROR_CODE:      return "write";
  924|     13|      case UNEXPECTED_ERROR_CODE: return "unexpected";
  925|      0|      default:                    return "INVALID";
  926|    117|   }
  927|    117|}
  928|       |
  929|       |static void
  930|       |emit_error(struct file *file, int code, const char *what)
  931|       |   /* Generic error message routine, takes a 'stop' code but can be used
  932|       |    * elsewhere.  Always outputs a message.
  933|       |    */
  934|      0|{
  935|      0|   const char *reason;
  936|      0|   int err = 0;
  937|       |
  938|      0|   switch (code)
  939|      0|   {
  940|      0|      case LIBPNG_WARNING_CODE:   reason = "libpng warning:"; break;
  941|      0|      case LIBPNG_ERROR_CODE:     reason = "libpng error:"; break;
  942|      0|      case ZLIB_ERROR_CODE:       reason = "zlib error:"; break;
  943|      0|      case INVALID_ERROR_CODE:    reason = "invalid"; break;
  944|      0|      case READ_ERROR_CODE:       reason = "read failure:";
  945|      0|                                  err = file->read_errno;
  946|      0|                                  break;
  947|      0|      case WRITE_ERROR_CODE:      reason = "write error";
  948|      0|                                  err = file->write_errno;
  949|      0|                                  break;
  950|      0|      case UNEXPECTED_ERROR_CODE: reason = "unexpected error:";
  951|      0|                                  err = file->read_errno;
  952|      0|                                  if (err == 0)
  953|      0|                                     err = file->write_errno;
  954|      0|                                  break;
  955|      0|      default:                    reason = "INVALID (internal error):"; break;
  956|      0|   }
  957|       |
  958|      0|   if (err != 0)
  959|      0|      fprintf(stderr, "%s: %s %s [%s]\n", file->file_name, reason, what,
  960|      0|         strerror(err));
  961|       |
  962|      0|   else
  963|      0|      fprintf(stderr, "%s: %s %s\n", file->file_name, reason, what);
  964|      0|}
  965|       |
  966|       |static void chunk_end(struct chunk **);
  967|       |static void IDAT_end(struct IDAT **);
  968|       |
  969|       |static int
  970|       |file_end(struct file *file)
  971|    374|{
  972|    374|   int rc;
  973|       |
  974|       |   /* If either of the chunk pointers are set end them here, the IDAT structure
  975|       |    * must be deallocated first as it may deallocate the chunk structure.
  976|       |    */
  977|    374|   if (file->idat != NULL)
  978|     71|      IDAT_end(&file->idat);
  979|       |
  980|    374|   if (file->chunk != NULL)
  981|     25|      chunk_end(&file->chunk);
  982|       |
  983|    374|   rc = file->status_code;
  984|       |
  985|    374|   if (file->file != NULL)
  986|    374|      (void)fclose(file->file);
  987|       |
  988|    374|   if (file->out != NULL)
  989|      0|   {
  990|       |      /* On some systems 'fclose' deletes the FILE struct (making it
  991|       |       * inaccessbile).  There is no guarantee that fclose returns an error
  992|       |       * code from fflush or, indeed, from the FILE error indicator.  There is
  993|       |       * also no explicit (or clear) guarantee in the standard that anything
  994|       |       * other than a read or write operation sets the error indicator; fflush
  995|       |       * is not a read or write operation, so both conditions must be checked
  996|       |       * to ensure the close succeeded and in ANSI-C conformant code they must
  997|       |       * be checked before the fclose call.
  998|       |       */
  999|      0|      const int err = fflush(file->out) || ferror(file->out);
 1000|       |
 1001|      0|      if (fclose(file->out) || err)
 1002|      0|      {
 1003|      0|         perror(file->out_name);
 1004|      0|         emit_error(file, READ_ERROR_CODE, "output write error");
 1005|      0|         rc |= WRITE_ERROR;
 1006|      0|      }
 1007|      0|   }
 1008|       |
 1009|       |   /* Accumulate the result codes */
 1010|    374|   file->global->status_code |= rc;
 1011|       |
 1012|    374|   CLEAR(*file);
 1013|       |
 1014|    374|   return rc; /* status code: non-zero on read or write error */
 1015|    374|}
 1016|       |
 1017|       |static int
 1018|       |file_init(struct file *file, struct global *global, const char *file_name,
 1019|       |   const char *out_name, void *alloc_ptr, void (*alloc)(struct file*,int))
 1020|       |   /* Initialize a file control structure.  This will open the given files as
 1021|       |    * well.  The status code returned is 0 on success, non zero (using the flags
 1022|       |    * above) on a file open error.
 1023|       |    */
 1024|    374|{
 1025|    374|   CLEAR(*file);
 1026|    374|   file->global = global;
 1027|       |
 1028|    374|   file->file_name = file_name;
 1029|    374|   file->out_name = out_name;
 1030|    374|   file->status_code = 0;
 1031|    374|   file->read_errno = 0;
 1032|    374|   file->write_errno = 0;
 1033|       |
 1034|    374|   file->file = NULL;
 1035|    374|   file->out = NULL;
 1036|       |   /* jmpbuf is garbage: must be set by read_png */
 1037|       |
 1038|    374|   file->read_count = 0;
 1039|    374|   file->state = STATE_SIGNATURE;
 1040|       |
 1041|    374|   file->chunk = NULL;
 1042|    374|   file->idat = NULL;
 1043|       |
 1044|    374|   file->alloc_ptr = alloc_ptr;
 1045|    374|   file->alloc = alloc;
 1046|       |
 1047|       |   /* Open the files: */
 1048|    374|   assert(file_name != NULL);
 1049|    374|   file->file = fopen(file_name, "rb");
 1050|       |
 1051|    374|   if (file->file == NULL)
 1052|      0|   {
 1053|      0|      file->read_errno = errno;
 1054|      0|      file->status_code |= FILE_ERROR;
 1055|       |      /* Always output: please give a readable file! */
 1056|      0|      perror(file_name);
 1057|      0|      return FILE_ERROR;
 1058|      0|   }
 1059|       |
 1060|    374|   if (out_name != NULL)
 1061|      0|   {
 1062|      0|      file->out = fopen(out_name, "wb");
 1063|       |
 1064|      0|      if (file->out == NULL)
 1065|      0|      {
 1066|      0|         file->write_errno = errno;
 1067|      0|         file->status_code |= WRITE_ERROR;
 1068|      0|         perror(out_name);
 1069|      0|         return WRITE_ERROR;
 1070|      0|      }
 1071|      0|   }
 1072|       |
 1073|    374|   return 0;
 1074|    374|}
 1075|       |
 1076|       |static void
 1077|       |log_error(struct file *file, int code, const char *what)
 1078|       |   /* Like emit_error but checks the global 'errors' flag */
 1079|    123|{
 1080|    123|   if (file->global->errors)
 1081|      0|      emit_error(file, code, what);
 1082|    123|}
 1083|       |
 1084|       |static char
 1085|       |type_char(png_uint_32 v)
 1086|  3.12k|{
 1087|       |   /* In fact because chunk::chunk_type is validated prior to any call to this
 1088|       |    * function it will always return a-zA-Z, but the extra codes are just there
 1089|       |    * to help in finding internal (programming) errors.  Note that the code only
 1090|       |    * ever considers the low 7 bits of the value (so it is not necessary for the
 1091|       |    * type_name function to mask of the byte.)
 1092|       |    */
 1093|  3.12k|   if (v & 32)
 1094|    724|      return "!abcdefghijklmnopqrstuvwxyz56789"[(v-96)&31];
 1095|       |
 1096|  2.40k|   else
 1097|  2.40k|      return "@ABCDEFGHIJKLMNOPQRSTUVWXYZ01234"[(v-64)&31];
 1098|  3.12k|}
 1099|       |
 1100|       |static void
 1101|       |type_name(png_uint_32 type, FILE *out)
 1102|    782|{
 1103|    782|   putc(type_char(type >> 24), out);
 1104|    782|   putc(type_char(type >> 16), out);
 1105|    782|   putc(type_char(type >>  8), out);
 1106|    782|   putc(type_char(type      ), out);
 1107|    782|}
 1108|       |
 1109|       |static void
 1110|       |type_sep(FILE *out)
 1111|      0|{
 1112|      0|   putc(':', out);
 1113|      0|   putc(' ', out);
 1114|      0|}
 1115|       |
 1116|       |static png_uint_32 current_type(struct file *file, int code);
 1117|       |
 1118|       |PNG_NORETURN static void
 1119|       |stop(struct file *file, int code, const char *what)
 1120|       |   /* Return control when a PNG file cannot be read. This outputs an 'ERR'
 1121|       |    * summary line too.
 1122|       |    */
 1123|    117|{
 1124|    117|   log_error(file, code, what);
 1125|       |
 1126|       |   /* The chunk being read is typically identified by file->chunk or, if this is
 1127|       |    * NULL, by file->type.  This may be wrong if libpng reads ahead, but this
 1128|       |    * only happens with IDAT where libpng reads the header then jumps around
 1129|       |    * finding errors in the previous chunks.  We know that is happening because
 1130|       |    * we are at the start of the IDAT (i.e. no IDAT data has yet been written.)
 1131|       |    *
 1132|       |    * SUMMARY FORMAT (stop):
 1133|       |    *
 1134|       |    * IDAT ERR status code read-errno write-errno message file
 1135|       |    *
 1136|       |    * 'uncompressed' will be 0 if there was a problem in the IHDR.  The errno
 1137|       |    * values are emit_string(strerror(errno)).
 1138|       |    */
 1139|    117|   if (file->global->quiet < 2) /* need two quiets to stop this. */
 1140|    117|   {
 1141|    117|      png_uint_32 type;
 1142|       |
 1143|    117|      if (file->chunk != NULL)
 1144|     96|         type = current_type(file, code); /* Gropes in struct chunk and IDAT */
 1145|       |
 1146|     21|      else
 1147|     21|         type = file->type;
 1148|       |
 1149|    117|      if (type)
 1150|    112|         type_name(type, stdout);
 1151|       |
 1152|      5|      else /* magic: an IDAT header, produces bogons for too many IDATs */
 1153|      5|         fputs("HEAD", stdout); /* not a registered chunk! */
 1154|       |
 1155|    117|      printf(" ERR %.2x %s ", file->status_code, strcode(code));
 1156|       |      /* This only works one strerror at a time, because of the way strerror is
 1157|       |       * implemented.
 1158|       |       */
 1159|    117|      emit_string(strerror(file->read_errno), stdout);
 1160|    117|      putc(' ', stdout);
 1161|    117|      emit_string(strerror(file->write_errno), stdout);
 1162|    117|      putc(' ', stdout);
 1163|    117|      emit_string(what, stdout);
 1164|    117|      putc(' ', stdout);
 1165|    117|      fputs(file->file_name, stdout);
 1166|    117|      putc('\n', stdout);
 1167|    117|   }
 1168|       |
 1169|    117|   file->status_code |= FILE_ERROR;
 1170|    117|   longjmp(file->jmpbuf, code);
 1171|    117|}
 1172|       |
 1173|       |PNG_NORETURN static void
 1174|       |stop_invalid(struct file *file, const char *what)
 1175|      0|{
 1176|      0|   stop(file, INVALID_ERROR_CODE, what);
 1177|      0|}
 1178|       |
 1179|       |static void
 1180|       |type_message(struct file *file, png_uint_32 type, const char *what)
 1181|       |   /* Error message for a chunk; the chunk name comes from 'type' */
 1182|    523|{
 1183|    523|   if (file->global->errors)
 1184|      0|   {
 1185|      0|      fputs(file->file_name, stderr);
 1186|      0|      type_sep(stderr);
 1187|      0|      type_name(type, stderr);
 1188|      0|      type_sep(stderr);
 1189|      0|      fputs(what, stderr);
 1190|      0|      putc('\n', stderr);
 1191|      0|   }
 1192|    523|}
 1193|       |
 1194|       |/* Input file positioning - we jump around in the input file while reading
 1195|       | * stuff, these wrappers deal with the error handling.
 1196|       | */
 1197|       |static void
 1198|       |file_getpos(struct file *file, fpos_t *pos)
 1199|  3.08k|{
 1200|  3.08k|   if (fgetpos(file->file, pos))
 1201|      0|   {
 1202|       |      /* This is unexpected, so perror it */
 1203|      0|      perror(file->file_name);
 1204|      0|      stop(file, READ_ERROR_CODE, "fgetpos");
 1205|      0|   }
 1206|  3.08k|}
 1207|       |
 1208|       |static void
 1209|       |file_setpos(struct file *file, const fpos_t *pos)
 1210|  4.88k|{
 1211|  4.88k|   if (fsetpos(file->file, pos))
 1212|      0|   {
 1213|      0|      perror(file->file_name);
 1214|      0|      stop(file, READ_ERROR_CODE, "fsetpos");
 1215|      0|   }
 1216|  4.88k|}
 1217|       |
 1218|       |static void
 1219|       |getpos(struct file *file)
 1220|       |   /* Get the current position and store it in 'data_pos'.  The corresponding
 1221|       |    * setpos() function is chunk specific because it uses the copy of the
 1222|       |    * position for the specific chunk.
 1223|       |    */
 1224|  2.41k|{
 1225|  2.41k|   file_getpos(file, &file->data_pos);
 1226|  2.41k|}
 1227|       |
 1228|       |
 1229|       |/* Read utility - read a single byte, returns a value in the range 0..255 or EOF
 1230|       | * on a read error.  In the latter case status_code and read_errno are updated
 1231|       | * appropriately.
 1232|       | */
 1233|       |static int
 1234|       |read_byte(struct file *file)
 1235|   181k|{
 1236|   181k|   int ch = getc(file->file);
 1237|       |
 1238|   181k|   if (ch >= 0 && ch <= 255)
 1239|   181k|   {
 1240|   181k|      ++(file->read_count);
 1241|   181k|      return ch;
 1242|   181k|   }
 1243|       |
 1244|     42|   else if (ch != EOF)
 1245|      0|   {
 1246|      0|      file->status_code |= INTERNAL_ERROR;
 1247|      0|      file->read_errno = ERANGE; /* out of range character */
 1248|       |
 1249|       |      /* This is very unexpected; an error message is always output: */
 1250|      0|      emit_error(file, UNEXPECTED_ERROR_CODE, "file read");
 1251|      0|   }
 1252|       |
 1253|     42|#  ifdef EINTR
 1254|     42|      else if (errno == EINTR) /* Interrupted, try again */
 1255|      0|      {
 1256|      0|         errno = 0;
 1257|      0|         return read_byte(file);
 1258|      0|      }
 1259|     42|#  endif
 1260|       |
 1261|     42|   else
 1262|     42|   {
 1263|       |      /* An error, it doesn't really matter what the error is but it gets
 1264|       |       * recorded anyway.
 1265|       |       */
 1266|     42|      if (ferror(file->file))
 1267|      0|         file->read_errno = errno;
 1268|       |
 1269|     42|      else if (feof(file->file))
 1270|     42|         file->read_errno = 0; /* I.e. a regular EOF, no error */
 1271|       |
 1272|      0|      else /* unexpected */
 1273|      0|         file->read_errno = EDOM;
 1274|     42|   }
 1275|       |
 1276|       |   /* 'TRUNCATED' is used for all cases of failure to read a byte, because of
 1277|       |    * the way libpng works a byte read is never attempted unless the byte is
 1278|       |    * expected to be there, so EOF should not occur.
 1279|       |    */
 1280|     42|   file->status_code |= TRUNCATED;
 1281|     42|   return EOF;
 1282|   181k|}
 1283|       |
 1284|       |static png_byte
 1285|       |reread_byte(struct file *file)
 1286|       |   /* Read a byte when an error is not expected to happen because the byte has
 1287|       |    * been read before without error.
 1288|       |    */
 1289|   256k|{
 1290|   256k|   int ch = getc(file->file);
 1291|       |
 1292|   256k|   if (errno != 0)
 1293|      0|      file->read_errno = errno;
 1294|       |
 1295|   256k|   if (ch < 0 || ch > 255)
 1296|     13|      stop(file, UNEXPECTED_ERROR_CODE, "reread");
 1297|       |
 1298|   256k|   return (png_byte)ch;
 1299|   256k|}
 1300|       |
 1301|       |static png_uint_32
 1302|       |reread_4(struct file *file)
 1303|       |   /* The same but for a four byte quantity */
 1304|    738|{
 1305|    738|   png_uint_32 result = 0;
 1306|    738|   int i = 0;
 1307|       |
 1308|  3.69k|   while (++i <= 4)
 1309|  2.95k|      result = (result << 8) + reread_byte(file);
 1310|       |
 1311|    738|   return result;
 1312|    738|}
 1313|       |
 1314|       |static void
 1315|       |skip_12(struct file *file)
 1316|       |   /* Skip exactly 12 bytes in the input stream - used to skip a CRC and chunk
 1317|       |    * header that has been read before.
 1318|       |    */
 1319|      0|{
 1320|       |   /* Since the chunks were read before this shouldn't fail: */
 1321|      0|   if (fseek(file->file, 12, SEEK_CUR) != 0)
 1322|      0|   {
 1323|      0|      if (errno != 0)
 1324|      0|         file->read_errno = errno;
 1325|       |
 1326|      0|      stop(file, UNEXPECTED_ERROR_CODE, "reskip");
 1327|      0|   }
 1328|      0|}
 1329|       |
 1330|       |static void
 1331|       |write_byte(struct file *file, int b)
 1332|       |   /* Write one byte to the output - this causes a fatal error if the write
 1333|       |    * fails and the read of this PNG file immediately terminates.  Just
 1334|       |    * increments the write count if there is no output file.
 1335|       |    */
 1336|   155k|{
 1337|   155k|   if (file->out != NULL)
 1338|      0|   {
 1339|      0|      if (putc(b, file->out) != b)
 1340|      0|      {
 1341|      0|         file->write_errno = errno;
 1342|      0|         file->status_code |= WRITE_ERROR;
 1343|      0|         stop(file, WRITE_ERROR_CODE, "write byte");
 1344|      0|      }
 1345|      0|   }
 1346|       |
 1347|   155k|   ++(file->write_count);
 1348|   155k|}
 1349|       |
 1350|       |/* Derivatives of the read/write functions. */
 1351|       |static unsigned int
 1352|       |read_4(struct file *file, png_uint_32 *pu)
 1353|       |   /* Read four bytes, returns the number of bytes read successfully and, if all
 1354|       |    * four bytes are read, assigns the result to *pu.
 1355|       |    */
 1356|  7.06k|{
 1357|  7.06k|   unsigned int i = 0;
 1358|  7.06k|   png_uint_32 val = 0;
 1359|       |
 1360|  7.06k|   do
 1361|  28.2k|   {
 1362|  28.2k|      int ch = read_byte(file);
 1363|       |
 1364|  28.2k|      if (ch == EOF)
 1365|      1|         return i;
 1366|       |
 1367|  28.2k|      val = (val << 8) + ch;
 1368|  28.2k|   } while (++i < 4);
 1369|       |
 1370|  7.06k|   *pu = val;
 1371|  7.06k|   return i;
 1372|  7.06k|}
 1373|       |
 1374|       |/* CRC handling - read but calculate the CRC while doing so. */
 1375|       |static int
 1376|       |crc_read_many(struct file *file, png_uint_32 length)
 1377|       |   /* Reads 'length' bytes and updates the CRC, returns true on success, false
 1378|       |    * if the input is truncated.
 1379|       |    */
 1380|  2.05k|{
 1381|  2.05k|   if (length > 0)
 1382|  1.78k|   {
 1383|  1.78k|      png_uint_32 crc = file->crc;
 1384|       |
 1385|  1.78k|      do
 1386|   148k|      {
 1387|   148k|         int ch = read_byte(file);
 1388|       |
 1389|   148k|         if (ch == EOF)
 1390|     33|            return 0; /* Truncated */
 1391|       |
 1392|   148k|         crc = crc_one_byte(crc, ch);
 1393|   148k|      }
 1394|   148k|      while (--length > 0);
 1395|       |
 1396|  1.75k|      file->crc = crc;
 1397|  1.75k|   }
 1398|       |
 1399|  2.01k|   return 1; /* OK */
 1400|  2.05k|}
 1401|       |
 1402|       |static int
 1403|       |calc_image_size(struct file *file)
 1404|       |   /* Fill in the image_bytes field given the IHDR information, calls stop on
 1405|       |    * error.
 1406|       |    */
 1407|    369|{
 1408|    369|   png_uint_16 pd = file->bit_depth;
 1409|       |
 1410|    369|   switch (file->color_type)
 1411|    369|   {
 1412|      0|      default:
 1413|      0|         stop_invalid(file, "IHDR: colour type");
 1414|       |
 1415|      0|      invalid_bit_depth:
 1416|      0|         stop_invalid(file, "IHDR: bit depth");
 1417|       |
 1418|    310|      case 0: /* g */
 1419|    310|         if (pd != 1 && pd != 2 && pd != 4 && pd != 8 && pd != 16)
 1420|      0|            goto invalid_bit_depth;
 1421|    310|         break;
 1422|       |
 1423|    310|      case 3:
 1424|     34|         if (pd != 1 && pd != 2 && pd != 4 && pd != 8)
 1425|      0|            goto invalid_bit_depth;
 1426|     34|         break;
 1427|       |
 1428|     34|      case 2: /* rgb */
 1429|     20|         if (pd != 8 && pd != 16)
 1430|      0|            goto invalid_bit_depth;
 1431|       |
 1432|     20|         pd = (png_uint_16)(pd * 3);
 1433|     20|         break;
 1434|       |
 1435|      0|      case 4: /* ga */
 1436|      0|         if (pd != 8 && pd != 16)
 1437|      0|            goto invalid_bit_depth;
 1438|       |
 1439|      0|         pd = (png_uint_16)(pd * 2);
 1440|      0|         break;
 1441|       |
 1442|      5|      case 6: /* rgba */
 1443|      5|         if (pd != 8 && pd != 16)
 1444|      0|            goto invalid_bit_depth;
 1445|       |
 1446|      5|         pd = (png_uint_16)(pd * 4);
 1447|      5|         break;
 1448|    369|   }
 1449|       |
 1450|    369|   if (file->width < 1 || file->width > 0x7fffffff)
 1451|      0|      stop_invalid(file, "IHDR: width");
 1452|       |
 1453|    369|   else if (file->height < 1 || file->height > 0x7fffffff)
 1454|      0|      stop_invalid(file, "IHDR: height");
 1455|       |
 1456|    369|   else if (file->compression_method != 0)
 1457|      0|      stop_invalid(file, "IHDR: compression method");
 1458|       |
 1459|    369|   else if (file->filter_method != 0)
 1460|      0|      stop_invalid(file, "IHDR: filter method");
 1461|       |
 1462|    369|   else switch (file->interlace_method)
 1463|    369|   {
 1464|     13|      case PNG_INTERLACE_ADAM7:
 1465|       |         /* Interlacing makes the image larger because of the replication of
 1466|       |          * both the filter byte and the padding to a byte boundary.
 1467|       |          */
 1468|     13|         {
 1469|     13|            int pass;
 1470|     13|            int image_digits = 0;
 1471|     13|            udigit row_width[2], row_bytes[3];
 1472|       |
 1473|    104|            for (pass=0; pass<=6; ++pass)
 1474|     91|            {
 1475|     91|               png_uint_32 pw = PNG_PASS_COLS(file->width, pass);
 1476|       |
 1477|     91|               if (pw > 0)
 1478|     91|               {
 1479|     91|                  int  digits;
 1480|       |
 1481|       |                  /* calculate 1+((pw*pd+7)>>3) in row_bytes */
 1482|     91|                  digits = uarb_mult_digit(row_bytes, uarb_set(row_bytes, 7),
 1483|     91|                     row_width, uarb_set(row_width, pw), pd);
 1484|     91|                  digits = uarb_shift(row_bytes, digits, 3);
 1485|     91|                  digits = uarb_inc(row_bytes, digits, 1);
 1486|       |
 1487|       |                  /* Add row_bytes * pass-height to the file image_bytes field
 1488|       |                   */
 1489|     91|                  image_digits = uarb_mult32(file->image_bytes, image_digits,
 1490|     91|                     row_bytes, digits,
 1491|     91|                     PNG_PASS_ROWS(file->height, pass));
 1492|     91|               }
 1493|     91|            }
 1494|       |
 1495|     13|            file->image_digits = image_digits;
 1496|     13|         }
 1497|     13|         break;
 1498|       |
 1499|    356|      case PNG_INTERLACE_NONE:
 1500|    356|         {
 1501|    356|            int  digits;
 1502|    356|            udigit row_width[2], row_bytes[3];
 1503|       |
 1504|       |            /* As above, but use image_width in place of the pass width: */
 1505|    356|            digits = uarb_mult_digit(row_bytes, uarb_set(row_bytes, 7),
 1506|    356|               row_width, uarb_set(row_width, file->width), pd);
 1507|    356|            digits = uarb_shift(row_bytes, digits, 3);
 1508|    356|            digits = uarb_inc(row_bytes, digits, 1);
 1509|       |
 1510|       |            /* Set row_bytes * image-height to the file image_bytes field */
 1511|    356|            file->image_digits = uarb_mult32(file->image_bytes, 0,
 1512|    356|               row_bytes, digits, file->height);
 1513|    356|         }
 1514|    356|         break;
 1515|       |
 1516|      0|      default:
 1517|      0|         stop_invalid(file, "IHDR: interlace method");
 1518|    369|   }
 1519|       |
 1520|    369|   assert(file->image_digits >= 1 && file->image_digits <= 5);
 1521|    369|   return 1;
 1522|    369|}
 1523|       |
 1524|       |/* PER-CHUNK CONTROL STRUCTURE
 1525|       | * This structure is instantiated for each chunk, except for the IDAT chunks
 1526|       | * where one chunk control structure is used for the whole of a single stream of
 1527|       | * IDAT chunks (see the IDAT control structure below).
 1528|       | */
 1529|       |struct chunk
 1530|       |{
 1531|       |   /* ANCESTORS */
 1532|       |   struct file *         file;
 1533|       |   struct global *       global;
 1534|       |
 1535|       |   /* PUBLIC IDAT INFORMATION: SET BY THE ZLIB CODE */
 1536|       |   udigit         uncompressed_bytes[5];
 1537|       |   int            uncompressed_digits;
 1538|       |   udigit         compressed_bytes[5];
 1539|       |   int            compressed_digits;
 1540|       |
 1541|       |   /* PUBLIC PER-CHUNK INFORMATION: USED BY CHUNK READ CODE */
 1542|       |   /* This information is filled in by chunk_init from the data in the file
 1543|       |    * control structure, but chunk_length may be changed later.
 1544|       |    */
 1545|       |   fpos_t         chunk_data_pos;    /* Position of first byte of chunk data */
 1546|       |   png_uint_32    chunk_length;      /* From header (or modified below) */
 1547|       |   png_uint_32    chunk_type;        /* From header */
 1548|       |
 1549|       |   /* PUBLIC PER-CHUNK INFORMATION: FOR THE CHUNK WRITE CODE */
 1550|       |   png_uint_32    write_crc;         /* Output CRC (may differ from read_crc) */
 1551|       |   png_uint_32    rewrite_offset;    /* Count of bytes before rewrite. */
 1552|       |   int            rewrite_length;    /* Number of bytes left to change */
 1553|       |   png_byte       rewrite_buffer[2]; /* Buffer of new byte values */
 1554|       |};
 1555|       |
 1556|       |static void
 1557|       |chunk_message(struct chunk *chunk, const char *message)
 1558|     61|{
 1559|     61|   type_message(chunk->file, chunk->chunk_type, message);
 1560|     61|}
 1561|       |
 1562|       |static void
 1563|       |chunk_end(struct chunk **chunk_var)
 1564|  2.04k|{
 1565|  2.04k|   struct chunk *chunk = *chunk_var;
 1566|       |
 1567|  2.04k|   *chunk_var = NULL;
 1568|  2.04k|   CLEAR(*chunk);
 1569|  2.04k|}
 1570|       |
 1571|       |static void
 1572|       |chunk_init(struct chunk * const chunk, struct file * const file)
 1573|       |   /* When a chunk is initialized the file length/type/pos are copied into the
 1574|       |    * corresponding chunk fields and the new chunk is registered in the file
 1575|       |    * structure.  There can only be one chunk at a time.
 1576|       |    *
 1577|       |    * NOTE: this routine must onely be called from the file alloc routine!
 1578|       |    */
 1579|  2.04k|{
 1580|  2.04k|   assert(file->chunk == NULL);
 1581|       |
 1582|  2.04k|   CLEAR(*chunk);
 1583|       |
 1584|  2.04k|   chunk->file = file;
 1585|  2.04k|   chunk->global = file->global;
 1586|       |
 1587|  2.04k|   chunk->chunk_data_pos = file->data_pos;
 1588|  2.04k|   chunk->chunk_length = file->length;
 1589|  2.04k|   chunk->chunk_type = file->type;
 1590|       |
 1591|       |   /* Compressed/uncompressed size information (from the zlib control structure
 1592|       |    * that is used to check the compressed data in a chunk.)
 1593|       |    */
 1594|  2.04k|   chunk->uncompressed_digits = 0;
 1595|  2.04k|   chunk->compressed_digits = 0;
 1596|       |
 1597|  2.04k|   file->chunk = chunk;
 1598|  2.04k|}
 1599|       |
 1600|       |static png_uint_32
 1601|       |current_type(struct file *file, int code)
 1602|       |   /* Guess the actual chunk type that causes a stop() */
 1603|     96|{
 1604|       |   /* This may return png_IDAT for errors detected (late) in the header; that
 1605|       |    * includes any inter-chunk consistency check that libpng performs.  Assume
 1606|       |    * that if the chunk_type is png_IDAT and the file write count is 8 this is
 1607|       |    * what is happening.
 1608|       |    */
 1609|     96|   if (file->chunk != NULL)
 1610|     96|   {
 1611|     96|      png_uint_32 type = file->chunk->chunk_type;
 1612|       |
 1613|       |      /* This is probably wrong for the excess IDATs case, because then libpng
 1614|       |       * whines about too many of them (apparently in some cases erroneously)
 1615|       |       * when the header is read.
 1616|       |       */
 1617|     96|      if (code <= LIBPNG_ERROR_CODE && type == png_IDAT &&
 1618|     96|         file->write_count == 8)
 1619|      5|         type = 0; /* magic */
 1620|       |
 1621|     96|      return type;
 1622|     96|   }
 1623|       |
 1624|      0|   else
 1625|      0|      return file->type;
 1626|     96|}
 1627|       |
 1628|       |static void
 1629|       |setpos(struct chunk *chunk)
 1630|       |   /* Reset the position to 'chunk_data_pos' - the start of the data for this
 1631|       |    * chunk.  As a side effect the read_count in the file is reset to 8, just
 1632|       |    * after the length/type header.
 1633|       |    */
 1634|  2.67k|{
 1635|  2.67k|   chunk->file->read_count = 8;
 1636|  2.67k|   file_setpos(chunk->file, &chunk->chunk_data_pos);
 1637|  2.67k|}
 1638|       |
 1639|       |/* Specific chunk handling - called for each chunk header, all special chunk
 1640|       | * processing is initiated in these functions.
 1641|       | */
 1642|       |/* The next functions handle special processing for those chunks with LZ data,
 1643|       | * the data is identified and checked for validity.  If there are problems which
 1644|       | * cannot be corrected the routines return false, otherwise true (although
 1645|       | * modification to the zlib header may be required.)
 1646|       | *
 1647|       | * The compressed data is in zlib format (RFC1950) and consequently has a
 1648|       | * minimum length of 7 bytes.
 1649|       | */
 1650|       |static int zlib_check(struct file *file, png_uint_32 offset);
 1651|       |
 1652|       |static int
 1653|       |process_zTXt_iCCP(struct file *file)
 1654|       |   /* zTXt and iCCP have exactly the same form - keyword, null, compression
 1655|       |    * method then compressed data.
 1656|       |    */
 1657|      0|{
 1658|      0|   struct chunk *chunk = file->chunk;
 1659|      0|   png_uint_32 length;
 1660|      0|   png_uint_32 index = 0;
 1661|       |
 1662|      0|   assert(chunk != NULL && file->idat == NULL);
 1663|      0|   length = chunk->chunk_length;
 1664|      0|   setpos(chunk);
 1665|       |
 1666|      0|   while (length >= 9)
 1667|      0|   {
 1668|      0|      --length;
 1669|      0|      ++index;
 1670|      0|      if (reread_byte(file) == 0) /* keyword null terminator */
 1671|      0|      {
 1672|      0|         --length;
 1673|      0|         ++index;
 1674|      0|         (void)reread_byte(file); /* compression method */
 1675|      0|         return zlib_check(file, index);
 1676|      0|      }
 1677|      0|   }
 1678|       |
 1679|      0|   chunk_message(chunk, "too short");
 1680|      0|   return 0; /* skip */
 1681|      0|}
 1682|       |
 1683|       |static int
 1684|       |process_iTXt(struct file *file)
 1685|    358|{
 1686|       |   /* Like zTXt but more fields. */
 1687|    358|   struct chunk *chunk = file->chunk;
 1688|    358|   png_uint_32 length;
 1689|    358|   png_uint_32 index = 0;
 1690|       |
 1691|    358|   assert(chunk != NULL && file->idat == NULL);
 1692|    358|   length = chunk->chunk_length;
 1693|    358|   setpos(chunk);
 1694|       |
 1695|  3.60k|   while (length >= 5)
 1696|  3.60k|   {
 1697|  3.60k|      --length;
 1698|  3.60k|      ++index;
 1699|  3.60k|      if (reread_byte(file) == 0) /* keyword null terminator */
 1700|    356|      {
 1701|    356|         --length;
 1702|    356|         ++index;
 1703|    356|         if (reread_byte(file) == 0) /* uncompressed text */
 1704|     10|            return 1; /* nothing to check */
 1705|       |
 1706|    346|         --length;
 1707|    346|         ++index;
 1708|    346|         (void)reread_byte(file); /* compression method */
 1709|       |
 1710|       |         /* Skip the language tag (null terminated). */
 1711|  1.12k|         while (length >= 9)
 1712|  1.12k|         {
 1713|  1.12k|            --length;
 1714|  1.12k|            ++index;
 1715|  1.12k|            if (reread_byte(file) == 0) /* terminator */
 1716|    342|            {
 1717|       |               /* Skip the translated keyword */
 1718|    346|               while (length >= 8)
 1719|    346|               {
 1720|    346|                  --length;
 1721|    346|                  ++index;
 1722|    346|                  if (reread_byte(file) == 0) /* terminator */
 1723|    342|                     return zlib_check(file, index);
 1724|    346|               }
 1725|    342|            }
 1726|  1.12k|         }
 1727|       |
 1728|       |         /* Ran out of bytes in the compressed case. */
 1729|      4|         break;
 1730|    346|      }
 1731|  3.60k|   }
 1732|       |
 1733|      6|   log_error(file, INVALID_ERROR_CODE, "iTXt chunk length");
 1734|       |
 1735|      6|   return 0; /* skip */
 1736|    358|}
 1737|       |
 1738|       |/* IDAT READ/WRITE CONTROL STRUCTURE */
 1739|       |struct IDAT
 1740|       |{
 1741|       |   /* ANCESTORS */
 1742|       |   struct file *         file;
 1743|       |   struct global *       global;
 1744|       |
 1745|       |   /* PROTECTED IDAT INFORMATION: SET BY THE IDAT READ CODE */
 1746|       |   struct IDAT_list *idat_list_head; /* START of the list of IDAT information */
 1747|       |   struct IDAT_list *idat_list_tail; /* *END* of the list of IDAT information */
 1748|       |
 1749|       |   /* PROTECTED IDAT INFORMATION: USED BY THE IDAT WRITE CODE */
 1750|       |   struct IDAT_list *idat_cur;       /* Current list entry */
 1751|       |   unsigned int      idat_count;     /* And the *current* index into the list */
 1752|       |   png_uint_32       idat_index;     /* Index of *next* input byte to write */
 1753|       |   png_uint_32       idat_length;    /* Cache of current chunk length */
 1754|       |};
 1755|       |
 1756|       |/* NOTE: there is currently no IDAT_reset, so a stream cannot contain more than
 1757|       | * one IDAT sequence (i.e. MNG is not supported).
 1758|       | */
 1759|       |
 1760|       |static void
 1761|       |IDAT_end(struct IDAT **idat_var)
 1762|    328|{
 1763|    328|   struct IDAT *idat = *idat_var;
 1764|    328|   struct file *file = idat->file;
 1765|       |
 1766|    328|   *idat_var = NULL;
 1767|       |
 1768|    328|   CLEAR(*idat);
 1769|       |
 1770|    328|   assert(file->chunk != NULL);
 1771|    328|   chunk_end(&file->chunk);
 1772|       |
 1773|       |   /* Regardless of why the IDAT was killed set the state back to CHUNKS (it may
 1774|       |    * already be CHUNKS because the state isn't changed until process_IDAT
 1775|       |    * returns; a stop will cause IDAT_end to be entered in state CHUNKS!)
 1776|       |    */
 1777|    328|   file->state = STATE_CHUNKS;
 1778|    328|}
 1779|       |
 1780|       |static void
 1781|       |IDAT_init(struct IDAT * const idat, struct file * const file)
 1782|       |   /* When the chunk is png_IDAT instantiate an IDAT control structure in place
 1783|       |    * of a chunk control structure.  The IDAT will instantiate a chunk control
 1784|       |    * structure using the file alloc routine.
 1785|       |    *
 1786|       |    * NOTE: this routine must only be called from the file alloc routine!
 1787|       |    */
 1788|    328|{
 1789|    328|   assert(file->chunk == NULL);
 1790|    328|   assert(file->idat == NULL);
 1791|       |
 1792|    328|   CLEAR(*idat);
 1793|       |
 1794|    328|   idat->file = file;
 1795|    328|   idat->global = file->global;
 1796|       |
 1797|       |   /* Initialize the tail to the pre-allocated buffer and set the count to 0
 1798|       |    * (empty.)
 1799|       |    */
 1800|    328|   idat->global->idat_cache.count = 0;
 1801|    328|   idat->idat_list_head = idat->idat_list_tail = &idat->global->idat_cache;
 1802|       |
 1803|       |   /* Now the chunk.  The allocator calls the initializer of the new chunk and
 1804|       |    * stores the result in file->chunk:
 1805|       |    */
 1806|    328|   file->alloc(file, 0/*chunk*/);
 1807|    328|   assert(file->chunk != NULL);
 1808|       |
 1809|       |   /* And store this for cleanup (and to check for double alloc or failure to
 1810|       |    * free.)
 1811|       |    */
 1812|    328|   file->idat = idat;
 1813|    328|}
 1814|       |
 1815|       |static png_uint_32
 1816|       |rechunk_length(struct IDAT *idat, int start)
 1817|       |   /* Return the length for the next IDAT chunk, taking into account
 1818|       |    * rechunking.
 1819|       |    */
 1820|    271|{
 1821|    271|   png_uint_32 len = idat->global->idat_max;
 1822|       |
 1823|    271|   if (len == 0) /* use original chunk lengths */
 1824|    271|   {
 1825|    271|      const struct IDAT_list *cur;
 1826|    271|      unsigned int count;
 1827|       |
 1828|    271|      if (start)
 1829|    271|         return idat->idat_length; /* use the cache */
 1830|       |
 1831|       |      /* Otherwise rechunk_length is called at the end of a chunk for the length
 1832|       |       * of the next one.
 1833|       |       */
 1834|      0|      cur = idat->idat_cur;
 1835|      0|      count = idat->idat_count;
 1836|       |
 1837|      0|      assert(idat->idat_index == idat->idat_length &&
 1838|      0|         idat->idat_length == cur->lengths[count]);
 1839|       |
 1840|       |      /* Return length of the *next* chunk */
 1841|      0|      if (++count < cur->count)
 1842|      0|         return cur->lengths[count];
 1843|       |
 1844|       |      /* End of this list */
 1845|      0|      assert(cur != idat->idat_list_tail);
 1846|      0|      cur = cur->next;
 1847|      0|      assert(cur != NULL && cur->count > 0);
 1848|      0|      return cur->lengths[0];
 1849|      0|   }
 1850|       |
 1851|      0|   else /* rechunking */
 1852|      0|   {
 1853|       |      /* The chunk size is the lesser of file->idat_max and the number
 1854|       |       * of remaining bytes.
 1855|       |       */
 1856|      0|      png_uint_32 have = idat->idat_length - idat->idat_index;
 1857|       |
 1858|      0|      if (len > have)
 1859|      0|      {
 1860|      0|         struct IDAT_list *cur = idat->idat_cur;
 1861|      0|         unsigned int j = idat->idat_count+1; /* the next IDAT in the list */
 1862|       |
 1863|      0|         do
 1864|      0|         {
 1865|       |            /* Add up the remaining bytes.  This can't overflow because the
 1866|       |             * individual lengths are always <= 0x7fffffff, so when we add two
 1867|       |             * of them overflow is not possible.
 1868|       |             */
 1869|      0|            assert(cur != NULL);
 1870|       |
 1871|      0|            for (;;)
 1872|      0|            {
 1873|       |               /* NOTE: IDAT_list::count here, not IDAT_list::length */
 1874|      0|               for (; j < cur->count; ++j)
 1875|      0|               {
 1876|      0|                  have += cur->lengths[j];
 1877|      0|                  if (len <= have)
 1878|      0|                     return len;
 1879|      0|               }
 1880|       |
 1881|       |               /* If this was the end return the count of the available bytes */
 1882|      0|               if (cur == idat->idat_list_tail)
 1883|      0|                  return have;
 1884|       |
 1885|      0|               cur = cur->next;
 1886|      0|               j = 0;
 1887|      0|            }
 1888|      0|         }
 1889|      0|         while (len > have);
 1890|      0|      }
 1891|       |
 1892|      0|      return len;
 1893|      0|   }
 1894|    271|}
 1895|       |
 1896|       |static int
 1897|       |process_IDAT(struct file *file)
 1898|       |   /* Process the IDAT stream, this is the more complex than the preceding
 1899|       |    * cases because the compressed data is spread across multiple IDAT chunks
 1900|       |    * (typically).  Rechunking of the data is not handled here; all this
 1901|       |    * function does is establish whether the zlib header needs to be modified.
 1902|       |    *
 1903|       |    * Initially the function returns false, indicating that the chunk should not
 1904|       |    * be written.  It does this until the last IDAT chunk is passed in, then it
 1905|       |    * checks the zlib data and returns true.
 1906|       |    *
 1907|       |    * It does not return false on a fatal error; it calls stop instead.
 1908|       |    *
 1909|       |    * The caller must have an instantiated (IDAT) control structure and it must
 1910|       |    * have extent over the whole read of the IDAT stream.  For a PNG this means
 1911|       |    * the whole PNG read, for MNG it could have lesser extent.
 1912|       |    */
 1913|    328|{
 1914|    328|   struct IDAT_list *list;
 1915|       |
 1916|    328|   assert(file->idat != NULL && file->chunk != NULL);
 1917|       |
 1918|       |   /* We need to first check the entire sequence of IDAT chunks to ensure the
 1919|       |    * stream is in sync.  Do this by building a list of all the chunks and
 1920|       |    * recording the length of each because the length may have been fixed up by
 1921|       |    * sync_stream below.
 1922|       |    *
 1923|       |    * At the end of the list of chunks, where the type of the next chunk is not
 1924|       |    * png_IDAT, process the whole stream using the list data to check validity
 1925|       |    * then return control to the start and rewrite everything.
 1926|       |    */
 1927|    328|   list = file->idat->idat_list_tail;
 1928|       |
 1929|    328|   if (list->count == list->length)
 1930|      0|   {
 1931|      0|      list = IDAT_list_extend(list);
 1932|       |
 1933|      0|      if (list == NULL)
 1934|      0|         stop(file, READ_ERROR_CODE, "out of memory");
 1935|       |
 1936|       |      /* Move to the next block */
 1937|      0|      list->count = 0;
 1938|      0|      file->idat->idat_list_tail = list;
 1939|      0|   }
 1940|       |
 1941|       |   /* And fill in the next IDAT information buffer. */
 1942|    328|   list->lengths[(list->count)++] = file->chunk->chunk_length;
 1943|       |
 1944|       |   /* The type of the next chunk was recorded in the file control structure by
 1945|       |    * the caller, if this is png_IDAT return 'skip' to the caller.
 1946|       |    */
 1947|    328|   if (file->type == png_IDAT)
 1948|      0|      return 0; /* skip this for the moment */
 1949|       |
 1950|       |   /* This is the final IDAT chunk, so run the tests to check for the too far
 1951|       |    * back error and possibly optimize the window bits.  This means going back
 1952|       |    * to the start of the first chunk data, which is stored in the original
 1953|       |    * chunk allocation.
 1954|       |    */
 1955|    328|   setpos(file->chunk);
 1956|       |
 1957|    328|   if (zlib_check(file, 0))
 1958|    281|   {
 1959|    281|      struct IDAT *idat;
 1960|    281|      int cmp;
 1961|       |
 1962|       |      /* The IDAT stream was successfully uncompressed; see whether it
 1963|       |       * contained the correct number of bytes of image data.
 1964|       |       */
 1965|    281|      cmp = uarb_cmp(file->image_bytes, file->image_digits,
 1966|    281|         file->chunk->uncompressed_bytes, file->chunk->uncompressed_digits);
 1967|       |
 1968|    281|      if (cmp < 0)
 1969|     60|         type_message(file, png_IDAT, "extra uncompressed data");
 1970|       |
 1971|    221|      else if (cmp > 0)
 1972|     10|         stop(file, LIBPNG_ERROR_CODE, "IDAT: uncompressed data too small");
 1973|       |
 1974|       |      /* Return the stream to the start of the first IDAT chunk; the length
 1975|       |       * is set in the write case below but the input chunk variables must be
 1976|       |       * set (once) here:
 1977|       |       */
 1978|    271|      setpos(file->chunk);
 1979|       |
 1980|    271|      idat = file->idat;
 1981|    271|      idat->idat_cur = idat->idat_list_head;
 1982|    271|      idat->idat_length = idat->idat_cur->lengths[0];
 1983|    271|      idat->idat_count = 0; /* Count of chunks read in current list */
 1984|    271|      idat->idat_index = 0; /* Index into chunk data */
 1985|       |
 1986|       |      /* Update the chunk length to the correct value for the IDAT chunk: */
 1987|    271|      file->chunk->chunk_length = rechunk_length(idat, 1/*start*/);
 1988|       |
 1989|       |      /* Change the state to writing IDAT chunks */
 1990|    271|      file->state = STATE_IDAT;
 1991|       |
 1992|    271|      return 1;
 1993|    281|   }
 1994|       |
 1995|     47|   else /* Failure to decompress the IDAT stream; give up. */
 1996|     47|      stop(file, ZLIB_ERROR_CODE, "could not uncompress IDAT");
 1997|    328|}
 1998|       |
 1999|       |/* ZLIB CONTROL STRUCTURE */
 2000|       |struct zlib
 2001|       |{
 2002|       |   /* ANCESTORS */
 2003|       |   struct IDAT *  idat;          /* NOTE: May be NULL */
 2004|       |   struct chunk * chunk;
 2005|       |   struct file *  file;
 2006|       |   struct global *global;
 2007|       |
 2008|       |   /* GLOBAL ZLIB INFORMATION: SET BY THE CALLER */
 2009|       |   png_uint_32    rewrite_offset;
 2010|       |
 2011|       |   /* GLOBAL ZLIB INFORMATION: SET BY THE ZLIB READ CODE */
 2012|       |   udigit         compressed_bytes[5];
 2013|       |   int            compressed_digits;
 2014|       |   udigit         uncompressed_bytes[5];
 2015|       |   int            uncompressed_digits;
 2016|       |   int            file_bits;             /* window bits from the file */
 2017|       |   int            ok_bits;               /* Set <16 on a successful read */
 2018|       |   int            cksum;                 /* Set on a checksum error */
 2019|       |
 2020|       |   /* PROTECTED ZLIB INFORMATION: USED BY THE ZLIB ROUTINES */
 2021|       |   z_stream       z;
 2022|       |   png_uint_32    extra_bytes;   /* Count of extra compressed bytes */
 2023|       |   int            state;
 2024|       |   int            rc;            /* Last return code */
 2025|       |   int            window_bits;   /* 0 if no change */
 2026|       |   png_byte       header[2];
 2027|       |};
 2028|       |
 2029|       |static const char *
 2030|       |zlib_flevel(struct zlib *zlib)
 2031|    670|{
 2032|    670|   switch (zlib->header[1] >> 6)
 2033|    670|   {
 2034|      6|      case 0:  return "supfast";
 2035|      9|      case 1:  return "stdfast";
 2036|      0|      case 2:  return "default";
 2037|    655|      case 3:  return "maximum";
 2038|      0|      default: assert(UNREACHED);
 2039|    670|   }
 2040|       |
 2041|      0|   return "COMPILER BUG";
 2042|    670|}
 2043|       |
 2044|       |static const char *
 2045|       |zlib_rc(struct zlib *zlib)
 2046|       |   /* Return a string for the zlib return code */
 2047|    147|{
 2048|    147|   switch (zlib->rc)
 2049|    147|   {
 2050|      5|      case Z_OK:              return "Z_OK";
 2051|      0|      case Z_STREAM_END:      return "Z_STREAM_END";
 2052|      2|      case Z_NEED_DICT:       return "Z_NEED_DICT";
 2053|      0|      case Z_ERRNO:           return "Z_ERRNO";
 2054|      0|      case Z_STREAM_ERROR:    return "Z_STREAM_ERROR";
 2055|    110|      case Z_DATA_ERROR:      return "Z_DATA_ERROR";
 2056|      0|      case Z_MEM_ERROR:       return "Z_MEM_ERROR";
 2057|     30|      case Z_BUF_ERROR:       return "Z_BUF_ERROR";
 2058|      0|      case Z_VERSION_ERROR:   return "Z_VERSION_ERROR";
 2059|      0|      default:                return "Z_*INVALID_RC*";
 2060|    147|   }
 2061|    147|}
 2062|       |
 2063|       |static void
 2064|       |zlib_message(struct zlib *zlib, int unexpected)
 2065|       |   /* Output a message given a zlib rc */
 2066|    147|{
 2067|    147|   if (zlib->global->errors)
 2068|      0|   {
 2069|      0|      const char *reason = zlib->z.msg;
 2070|       |
 2071|      0|      if (reason == NULL)
 2072|      0|         reason = "[no message]";
 2073|       |
 2074|      0|      fputs(zlib->file->file_name, stderr);
 2075|      0|      type_sep(stderr);
 2076|      0|      type_name(zlib->chunk->chunk_type, stderr);
 2077|      0|      fprintf(stderr, ": %szlib error: %d (%s) (%s)\n",
 2078|      0|         unexpected ? "unexpected " : "", zlib->rc, zlib_rc(zlib), reason);
 2079|      0|   }
 2080|    147|}
 2081|       |
 2082|       |static void
 2083|       |zlib_end(struct zlib *zlib)
 2084|    670|{
 2085|       |   /* Output the summary line now; this ensures a summary line always gets
 2086|       |    * output regardless of the manner of exit.
 2087|       |    */
 2088|    670|   if (!zlib->global->quiet)
 2089|    670|   {
 2090|    670|      if (zlib->ok_bits < 16) /* stream was read ok */
 2091|    523|      {
 2092|    523|         const char *reason;
 2093|       |
 2094|    523|         if (zlib->cksum)
 2095|     51|            reason = "CHK"; /* checksum error */
 2096|       |
 2097|    472|         else if (zlib->ok_bits > zlib->file_bits)
 2098|      0|            reason = "TFB"; /* fixing a too-far-back error */
 2099|       |
 2100|    472|         else if (zlib->ok_bits == zlib->file_bits)
 2101|    472|            reason = "OK ";
 2102|       |
 2103|      0|         else
 2104|      0|            reason = "OPT"; /* optimizing window bits */
 2105|       |
 2106|       |         /* SUMMARY FORMAT (for a successful zlib inflate):
 2107|       |          *
 2108|       |          * IDAT reason flevel file-bits ok-bits compressed uncompressed file
 2109|       |          */
 2110|    523|         type_name(zlib->chunk->chunk_type, stdout);
 2111|    523|         printf(" %s %s %d %d ", reason, zlib_flevel(zlib), zlib->file_bits,
 2112|    523|            zlib->ok_bits);
 2113|    523|         uarb_print(zlib->compressed_bytes, zlib->compressed_digits, stdout);
 2114|    523|         putc(' ', stdout);
 2115|    523|         uarb_print(zlib->uncompressed_bytes, zlib->uncompressed_digits,
 2116|    523|            stdout);
 2117|    523|         putc(' ', stdout);
 2118|    523|         fputs(zlib->file->file_name, stdout);
 2119|    523|         putc('\n', stdout);
 2120|    523|      }
 2121|       |
 2122|    147|      else
 2123|    147|      {
 2124|       |         /* This is a zlib read error; the chunk will be skipped.  For an IDAT
 2125|       |          * stream this will also cause a fatal read error (via stop()).
 2126|       |          *
 2127|       |          * SUMMARY FORMAT:
 2128|       |          *
 2129|       |          * IDAT SKP flevel file-bits z-rc compressed message file
 2130|       |          *
 2131|       |          * z-rc is the zlib failure code; message is the error message with
 2132|       |          * spaces replaced by '-'.  The compressed byte count indicates where
 2133|       |          * in the zlib stream the error occurred.
 2134|       |          */
 2135|    147|         type_name(zlib->chunk->chunk_type, stdout);
 2136|    147|         printf(" SKP %s %d %s ", zlib_flevel(zlib), zlib->file_bits,
 2137|    147|            zlib_rc(zlib));
 2138|    147|         uarb_print(zlib->compressed_bytes, zlib->compressed_digits, stdout);
 2139|    147|         putc(' ', stdout);
 2140|    147|         emit_string(zlib->z.msg ? zlib->z.msg : "[no_message]", stdout);
 2141|    147|         putc(' ', stdout);
 2142|    147|         fputs(zlib->file->file_name, stdout);
 2143|    147|         putc('\n', stdout);
 2144|    147|      }
 2145|    670|   }
 2146|       |
 2147|    670|   if (zlib->state >= 0)
 2148|    670|   {
 2149|    670|      zlib->rc = inflateEnd(&zlib->z);
 2150|       |
 2151|    670|      if (zlib->rc != Z_OK)
 2152|      0|         zlib_message(zlib, 1/*unexpected*/);
 2153|    670|   }
 2154|       |
 2155|    670|   CLEAR(*zlib);
 2156|    670|}
 2157|       |
 2158|       |static int
 2159|       |zlib_reset(struct zlib *zlib, int window_bits)
 2160|       |   /* Reinitializes a zlib with a different window_bits */
 2161|    198|{
 2162|    198|   assert(zlib->state >= 0); /* initialized by zlib_init */
 2163|       |
 2164|    198|   zlib->z.next_in = Z_NULL;
 2165|    198|   zlib->z.avail_in = 0;
 2166|    198|   zlib->z.next_out = Z_NULL;
 2167|    198|   zlib->z.avail_out = 0;
 2168|       |
 2169|    198|   zlib->window_bits = window_bits;
 2170|    198|   zlib->compressed_digits = 0;
 2171|    198|   zlib->uncompressed_digits = 0;
 2172|       |
 2173|    198|   zlib->state = 0; /* initialized, once */
 2174|    198|   zlib->rc = inflateReset2(&zlib->z, 0);
 2175|    198|   if (zlib->rc != Z_OK)
 2176|      0|   {
 2177|      0|      zlib_message(zlib, 1/*unexpected*/);
 2178|      0|      return 0;
 2179|      0|   }
 2180|       |
 2181|    198|   return 1;
 2182|    198|}
 2183|       |
 2184|       |static int
 2185|       |zlib_init(struct zlib *zlib, struct IDAT *idat, struct chunk *chunk,
 2186|       |   int window_bits, png_uint_32 offset)
 2187|       |   /* Initialize a zlib_control; the result is true/false */
 2188|    670|{
 2189|    670|   CLEAR(*zlib);
 2190|       |
 2191|    670|   zlib->idat = idat;
 2192|    670|   zlib->chunk = chunk;
 2193|    670|   zlib->file = chunk->file;
 2194|    670|   zlib->global = chunk->global;
 2195|    670|   zlib->rewrite_offset = offset; /* never changed for this zlib */
 2196|       |
 2197|       |   /* *_out does not need to be set: */
 2198|    670|   zlib->z.next_in = Z_NULL;
 2199|    670|   zlib->z.avail_in = 0;
 2200|    670|   zlib->z.zalloc = Z_NULL;
 2201|    670|   zlib->z.zfree = Z_NULL;
 2202|    670|   zlib->z.opaque = Z_NULL;
 2203|       |
 2204|    670|   zlib->state = -1;
 2205|    670|   zlib->window_bits = window_bits;
 2206|       |
 2207|    670|   zlib->compressed_digits = 0;
 2208|    670|   zlib->uncompressed_digits = 0;
 2209|       |
 2210|       |   /* These values are sticky across reset (in addition to the stuff in the
 2211|       |    * first block, which is actually constant.)
 2212|       |    */
 2213|    670|   zlib->file_bits = 24;
 2214|    670|   zlib->ok_bits = 16; /* unset */
 2215|    670|   zlib->cksum = 0; /* set when a checksum error is detected */
 2216|       |
 2217|       |   /* '0' means use the header; inflateInit2 should always succeed because it
 2218|       |    * does nothing apart from allocating the internal zstate.
 2219|       |    */
 2220|    670|   zlib->rc = inflateInit2(&zlib->z, 0);
 2221|    670|   if (zlib->rc != Z_OK)
 2222|      0|   {
 2223|      0|      zlib_message(zlib, 1/*unexpected*/);
 2224|      0|      return 0;
 2225|      0|   }
 2226|       |
 2227|    670|   else
 2228|    670|   {
 2229|    670|      zlib->state = 0; /* initialized */
 2230|    670|      return 1;
 2231|    670|   }
 2232|    670|}
 2233|       |
 2234|       |static int
 2235|       |max_window_bits(uarbc size, int ndigits)
 2236|       |   /* Return the zlib stream window bits required for data of the given size. */
 2237|     46|{
 2238|     46|   png_uint_16 cb;
 2239|       |
 2240|     46|   if (ndigits > 1)
 2241|     18|      return 15;
 2242|       |
 2243|     28|   cb = size[0];
 2244|       |
 2245|     28|   if (cb > 16384) return 15;
 2246|     28|   if (cb >  8192) return 14;
 2247|     28|   if (cb >  4096) return 13;
 2248|     28|   if (cb >  2048) return 12;
 2249|     28|   if (cb >  1024) return 11;
 2250|     28|   if (cb >   512) return 10;
 2251|     28|   if (cb >   256) return  9;
 2252|     28|   return 8;
 2253|     28|}
 2254|       |
 2255|       |static int
 2256|       |zlib_advance(struct zlib *zlib, png_uint_32 nbytes)
 2257|       |   /* Read nbytes compressed bytes; the stream will be initialized if required.
 2258|       |    * Bytes are always being reread and errors are fatal.  The return code is as
 2259|       |    * follows:
 2260|       |    *
 2261|       |    *    -1: saw the "too far back" error
 2262|       |    *     0: ok, keep going
 2263|       |    *     1: saw Z_STREAM_END (zlib->extra_bytes indicates too much data)
 2264|       |    *     2: a zlib error that cannot be corrected (error message already
 2265|       |    *        output if required.)
 2266|       |    */
 2267|    388|#  define ZLIB_TOO_FAR_BACK (-1)
 2268|  27.0M|#  define ZLIB_OK           0
 2269|  3.20k|#  define ZLIB_STREAM_END   1
 2270|     65|#  define ZLIB_FATAL        2
 2271|    868|{
 2272|    868|   int state = zlib->state;
 2273|    868|   int endrc = ZLIB_OK;
 2274|    868|   png_uint_32 in_bytes = 0;
 2275|    868|   struct file *file = zlib->file;
 2276|       |
 2277|    868|   assert(state >= 0);
 2278|       |
 2279|   117k|   while (in_bytes < nbytes && endrc == ZLIB_OK)
 2280|   116k|   {
 2281|   116k|      png_uint_32 out_bytes;
 2282|   116k|      int flush;
 2283|   116k|      png_byte bIn = reread_byte(file);
 2284|   116k|      png_byte bOut;
 2285|       |
 2286|   116k|      switch (state)
 2287|   116k|      {
 2288|    863|         case 0: /* first header byte */
 2289|    863|            {
 2290|    863|               int file_bits = 8+(bIn >> 4);
 2291|    863|               int new_bits = zlib->window_bits;
 2292|       |
 2293|    863|               zlib->file_bits = file_bits;
 2294|       |
 2295|       |               /* Check against the existing value - it may not need to be
 2296|       |                * changed.  Note that a bogus file_bits is allowed through once,
 2297|       |                * to see if it works, but the window_bits value is set to 15,
 2298|       |                * the maximum.
 2299|       |                */
 2300|    863|               if (new_bits == 0) /* no change */
 2301|    665|                  zlib->window_bits = ((file_bits > 15) ? 15 : file_bits);
 2302|       |
 2303|    198|               else if (new_bits != file_bits) /* rewrite required */
 2304|    193|                  bIn = (png_byte)((bIn & 0xf) + ((new_bits-8) << 4));
 2305|    863|            }
 2306|       |
 2307|    863|            zlib->header[0] = bIn;
 2308|    863|            zlib->state = state = 1;
 2309|    863|            break;
 2310|       |
 2311|    862|         case 1: /* second header byte */
 2312|    862|            {
 2313|    862|               int b2 = bIn & 0xe0; /* top 3 bits */
 2314|       |
 2315|       |               /* The checksum calculation, on the first 11 bits: */
 2316|    862|               b2 += 0x1f - ((zlib->header[0] << 8) + b2) % 0x1f;
 2317|       |
 2318|       |               /* Update the checksum byte if required: */
 2319|    862|               if (bIn != b2)
 2320|    240|               {
 2321|       |                  /* If the first byte wasn't changed this indicates an error in
 2322|       |                   * the checksum calculation; signal this by setting 'cksum'.
 2323|       |                   */
 2324|    240|                  if (zlib->file_bits == zlib->window_bits)
 2325|     61|                     zlib->cksum = 1;
 2326|       |
 2327|    240|                  bIn = (png_byte)b2;
 2328|    240|               }
 2329|    862|            }
 2330|       |
 2331|    862|            zlib->header[1] = bIn;
 2332|    862|            zlib->state = state = 2;
 2333|    862|            break;
 2334|       |
 2335|   114k|         default: /* After the header bytes */
 2336|   114k|            break;
 2337|   116k|      }
 2338|       |
 2339|       |      /* For some streams, perhaps only those compressed with 'superfast
 2340|       |       * compression' (which results in a lot of copying) Z_BUF_ERROR can happen
 2341|       |       * immediately after all output has been flushed on the next input byte.
 2342|       |       * This is handled below when Z_BUF_ERROR is detected by adding an output
 2343|       |       * byte.
 2344|       |       */
 2345|   116k|      zlib->z.next_in = &bIn;
 2346|   116k|      zlib->z.avail_in = 1;
 2347|   116k|      zlib->z.next_out = &bOut;
 2348|   116k|      zlib->z.avail_out = 0;     /* Initially */
 2349|       |
 2350|       |      /* Initially use Z_NO_FLUSH in an attempt to persuade zlib to look at this
 2351|       |       * byte without confusing what is going on with output.
 2352|       |       */
 2353|   116k|      flush = Z_NO_FLUSH;
 2354|   116k|      out_bytes = 0;
 2355|       |
 2356|       |      /* NOTE: expression 3 is only evaluated on 'continue', because of the
 2357|       |       * 'break' at the end of this loop below.
 2358|       |       */
 2359|  26.9M|      for (;endrc == ZLIB_OK;
 2360|  26.8M|         flush = Z_SYNC_FLUSH,
 2361|  26.8M|         zlib->z.next_out = &bOut,
 2362|  26.8M|         zlib->z.avail_out = 1,
 2363|  26.8M|         ++out_bytes)
 2364|  26.9M|      {
 2365|  26.9M|         zlib->rc = inflate(&zlib->z, flush);
 2366|  26.9M|         out_bytes -= zlib->z.avail_out;
 2367|       |
 2368|  26.9M|         switch (zlib->rc)
 2369|  26.9M|         {
 2370|   115k|            case Z_BUF_ERROR:
 2371|   115k|               if (zlib->z.avail_out == 0)
 2372|      0|                  continue; /* Try another output byte. */
 2373|       |
 2374|   115k|               if (zlib->z.avail_in == 0)
 2375|   115k|                  break; /* Try another input byte */
 2376|       |
 2377|       |               /* Both avail_out and avail_in are 1 yet zlib returned a code
 2378|       |                * indicating no progress was possible.  This is unexpected.
 2379|       |                */
 2380|      0|               zlib_message(zlib, 1/*unexpected*/);
 2381|      0|               endrc = ZLIB_FATAL; /* stop processing */
 2382|      0|               break;
 2383|       |
 2384|  26.8M|            case Z_OK:
 2385|       |               /* Zlib is supposed to have made progress: */
 2386|  26.8M|               assert(zlib->z.avail_out == 0 || zlib->z.avail_in == 0);
 2387|  26.8M|               continue;
 2388|       |
 2389|  26.8M|            case Z_STREAM_END:
 2390|       |               /* This is the successful end. */
 2391|    574|               zlib->state = 3; /* end of stream */
 2392|    574|               endrc = ZLIB_STREAM_END;
 2393|    574|               break;
 2394|       |
 2395|      2|            case Z_NEED_DICT:
 2396|      2|               zlib_message(zlib, 0/*stream error*/);
 2397|      2|               endrc = ZLIB_FATAL;
 2398|      2|               break;
 2399|       |
 2400|    257|            case Z_DATA_ERROR:
 2401|       |               /* The too far back error can be corrected, others cannot: */
 2402|    257|               if (zlib->z.msg != NULL &&
 2403|    257|                  strcmp(zlib->z.msg, "invalid distance too far back") == 0)
 2404|    194|               {
 2405|    194|                  endrc = ZLIB_TOO_FAR_BACK;
 2406|    194|                  break;
 2407|    194|               }
 2408|       |               /* FALLTHROUGH */
 2409|       |
 2410|     63|            default:
 2411|     63|               zlib_message(zlib, 0/*stream error*/);
 2412|     63|               endrc = ZLIB_FATAL;
 2413|     63|               break;
 2414|  26.9M|         } /* switch (inflate rc) */
 2415|       |
 2416|       |         /* Control gets here when further output is not possible; endrc may
 2417|       |          * still be ZLIB_OK if more input is required.
 2418|       |          */
 2419|   116k|         break;
 2420|  26.9M|      } /* for (output bytes) */
 2421|       |
 2422|       |      /* Keep a running count of output byte produced: */
 2423|   116k|      zlib->uncompressed_digits = uarb_add32(zlib->uncompressed_bytes,
 2424|   116k|         zlib->uncompressed_digits, out_bytes);
 2425|       |
 2426|       |      /* Keep going, the loop will terminate when endrc is no longer set to
 2427|       |       * ZLIB_OK or all the input bytes have been consumed; meanwhile keep
 2428|       |       * adding input bytes.
 2429|       |       */
 2430|   116k|      assert(zlib->z.avail_in == 0 || endrc != ZLIB_OK);
 2431|       |
 2432|   116k|      in_bytes += 1 - zlib->z.avail_in;
 2433|   116k|   } /* while (input bytes) */
 2434|       |
 2435|    868|   assert(in_bytes == nbytes || endrc != ZLIB_OK);
 2436|       |
 2437|       |   /* Update the running total of input bytes consumed */
 2438|    868|   zlib->compressed_digits = uarb_add32(zlib->compressed_bytes,
 2439|    868|      zlib->compressed_digits, in_bytes - zlib->z.avail_in);
 2440|       |
 2441|       |   /* At the end of the stream update the chunk with the accumulated
 2442|       |    * information if it is an improvement:
 2443|       |    */
 2444|    868|   if (endrc == ZLIB_STREAM_END && zlib->window_bits < zlib->ok_bits)
 2445|    574|   {
 2446|    574|      struct chunk *chunk = zlib->chunk;
 2447|       |
 2448|    574|      chunk->uncompressed_digits = uarb_copy(chunk->uncompressed_bytes,
 2449|    574|         zlib->uncompressed_bytes, zlib->uncompressed_digits);
 2450|    574|      chunk->compressed_digits = uarb_copy(chunk->compressed_bytes,
 2451|    574|         zlib->compressed_bytes, zlib->compressed_digits);
 2452|    574|      chunk->rewrite_buffer[0] = zlib->header[0];
 2453|    574|      chunk->rewrite_buffer[1] = zlib->header[1];
 2454|       |
 2455|    574|      if (zlib->window_bits != zlib->file_bits || zlib->cksum)
 2456|    102|      {
 2457|       |         /* A rewrite is required */
 2458|    102|         chunk->rewrite_offset = zlib->rewrite_offset;
 2459|    102|         chunk->rewrite_length = 2;
 2460|    102|      }
 2461|       |
 2462|    472|      else
 2463|    472|      {
 2464|    472|         chunk->rewrite_offset = 0;
 2465|    472|         chunk->rewrite_length = 0;
 2466|    472|      }
 2467|       |
 2468|    574|      if (in_bytes < nbytes)
 2469|     15|         chunk_message(chunk, "extra compressed data");
 2470|       |
 2471|    574|      zlib->extra_bytes = nbytes - in_bytes;
 2472|    574|      zlib->ok_bits = zlib->window_bits;
 2473|    574|   }
 2474|       |
 2475|    868|   return endrc;
 2476|    868|}
 2477|       |
 2478|       |static int
 2479|       |zlib_run(struct zlib *zlib)
 2480|       |   /* Like zlib_advance but also handles a stream of IDAT chunks. */
 2481|    868|{
 2482|       |   /* The 'extra_bytes' field is set by zlib_advance if there is extra
 2483|       |    * compressed data in the chunk it handles (if it sees Z_STREAM_END before
 2484|       |    * all the input data has been used.)  This function uses the value to update
 2485|       |    * the correct chunk length, so the problem should only ever be detected once
 2486|       |    * for each chunk.  zlib_advance outputs the error message, though see the
 2487|       |    * IDAT specific check below.
 2488|       |    */
 2489|    868|   zlib->extra_bytes = 0;
 2490|       |
 2491|    868|   if (zlib->idat != NULL)
 2492|    440|   {
 2493|    440|      struct IDAT_list *list = zlib->idat->idat_list_head;
 2494|    440|      struct IDAT_list *last = zlib->idat->idat_list_tail;
 2495|    440|      int        skip = 0;
 2496|       |
 2497|       |      /* 'rewrite_offset' is the offset of the LZ data within the chunk, for
 2498|       |       * IDAT it should be 0:
 2499|       |       */
 2500|    440|      assert(zlib->rewrite_offset == 0);
 2501|       |
 2502|       |      /* Process each IDAT_list in turn; the caller has left the stream
 2503|       |       * positioned at the start of the first IDAT chunk data.
 2504|       |       */
 2505|    440|      for (;;)
 2506|    440|      {
 2507|    440|         unsigned int count = list->count;
 2508|    440|         unsigned int i;
 2509|       |
 2510|    458|         for (i = 0; i<count; ++i)
 2511|    440|         {
 2512|    440|            int rc;
 2513|       |
 2514|    440|            if (skip > 0) /* Skip CRC and next IDAT header */
 2515|      0|               skip_12(zlib->file);
 2516|       |
 2517|    440|            skip = 12; /* for the next time */
 2518|       |
 2519|    440|            rc = zlib_advance(zlib, list->lengths[i]);
 2520|       |
 2521|    440|            switch (rc)
 2522|    440|            {
 2523|     18|               case ZLIB_OK: /* keep going */
 2524|     18|                  break;
 2525|       |
 2526|    322|               case ZLIB_STREAM_END: /* stop */
 2527|       |                  /* There may be extra chunks; if there are and one of them is
 2528|       |                   * not zero length output the 'extra data' message.  Only do
 2529|       |                   * this check if errors are being output.
 2530|       |                   */
 2531|    322|                  if (zlib->global->errors && zlib->extra_bytes == 0)
 2532|      0|                  {
 2533|      0|                     struct IDAT_list *check = list;
 2534|      0|                     int j = i+1, jcount = count;
 2535|       |
 2536|      0|                     for (;;)
 2537|      0|                     {
 2538|      0|                        for (; j<jcount; ++j)
 2539|      0|                           if (check->lengths[j] > 0)
 2540|      0|                           {
 2541|      0|                              chunk_message(zlib->chunk,
 2542|      0|                                 "extra compressed data");
 2543|      0|                              goto end_check;
 2544|      0|                           }
 2545|       |
 2546|      0|                        if (check == last)
 2547|      0|                           break;
 2548|       |
 2549|      0|                        check = check->next;
 2550|      0|                        jcount = check->count;
 2551|      0|                        j = 0;
 2552|      0|                     }
 2553|      0|                  }
 2554|       |
 2555|    322|               end_check:
 2556|       |                  /* Terminate the list at the current position, reducing the
 2557|       |                   * length of the last IDAT too if required.
 2558|       |                   */
 2559|    322|                  list->lengths[i] -= zlib->extra_bytes;
 2560|    322|                  list->count = i+1;
 2561|    322|                  zlib->idat->idat_list_tail = list;
 2562|       |                  /* FALLTHROUGH */
 2563|       |
 2564|    422|               default:
 2565|    422|                  return rc;
 2566|    440|            }
 2567|    440|         }
 2568|       |
 2569|       |         /* At the end of the compressed data and Z_STREAM_END was not seen. */
 2570|     18|         if (list == last)
 2571|     18|            return ZLIB_OK;
 2572|       |
 2573|      0|         list = list->next;
 2574|      0|      }
 2575|    440|   }
 2576|       |
 2577|    428|   else
 2578|    428|   {
 2579|    428|      struct chunk *chunk = zlib->chunk;
 2580|    428|      int rc;
 2581|       |
 2582|    428|      assert(zlib->rewrite_offset < chunk->chunk_length);
 2583|       |
 2584|    428|      rc = zlib_advance(zlib, chunk->chunk_length - zlib->rewrite_offset);
 2585|       |
 2586|       |      /* The extra bytes in the chunk are handled now by adjusting the chunk
 2587|       |       * length to exclude them; the zlib data is always stored at the end of
 2588|       |       * the PNG chunk (although clearly this is not necessary.)  zlib_advance
 2589|       |       * has already output a warning message.
 2590|       |       */
 2591|    428|      chunk->chunk_length -= zlib->extra_bytes;
 2592|    428|      return rc;
 2593|    428|   }
 2594|    868|}
 2595|       |
 2596|       |static int /* global function; not a member function */
 2597|       |zlib_check(struct file *file, png_uint_32 offset)
 2598|       |   /* Check the stream of zlib compressed data in either idat (if given) or (if
 2599|       |    * not) chunk.  In fact it is zlib_run that handles the difference in reading
 2600|       |    * a single chunk and a list of IDAT chunks.
 2601|       |    *
 2602|       |    * In either case the input file must be positioned at the first byte of zlib
 2603|       |    * compressed data (the first header byte).
 2604|       |    *
 2605|       |    * The return value is true on success, including the case where the zlib
 2606|       |    * header may need to be rewritten, and false on an unrecoverable error.
 2607|       |    *
 2608|       |    * In the case of IDAT chunks 'offset' should be 0.
 2609|       |    */
 2610|    670|{
 2611|    670|   fpos_t start_pos;
 2612|    670|   struct zlib zlib;
 2613|       |
 2614|       |   /* Record the start of the LZ data to allow a re-read. */
 2615|    670|   file_getpos(file, &start_pos);
 2616|       |
 2617|       |   /* First test the existing (file) window bits: */
 2618|    670|   if (zlib_init(&zlib, file->idat, file->chunk, 0/*window bits*/, offset))
 2619|    670|   {
 2620|    670|      int min_bits, max_bits, rc;
 2621|       |
 2622|       |      /* The first run using the existing window bits. */
 2623|    670|      rc = zlib_run(&zlib);
 2624|       |
 2625|    670|      switch (rc)
 2626|    670|      {
 2627|     52|         case ZLIB_TOO_FAR_BACK:
 2628|       |            /* too far back error */
 2629|     52|            file->status_code |= TOO_FAR_BACK;
 2630|     52|            min_bits = zlib.window_bits + 1;
 2631|     52|            max_bits = 15;
 2632|     52|            break;
 2633|       |
 2634|    518|         case ZLIB_STREAM_END:
 2635|    518|            if (!zlib.global->optimize_zlib &&
 2636|    518|               zlib.window_bits == zlib.file_bits && !zlib.cksum)
 2637|    472|            {
 2638|       |               /* The trivial case where the stream is ok and optimization was
 2639|       |                * not requested.
 2640|       |                */
 2641|    472|               zlib_end(&zlib);
 2642|    472|               return 1;
 2643|    472|            }
 2644|       |
 2645|     46|            max_bits = max_window_bits(zlib.uncompressed_bytes,
 2646|     46|               zlib.uncompressed_digits);
 2647|     46|            if (zlib.ok_bits < max_bits)
 2648|     18|               max_bits = zlib.ok_bits;
 2649|     46|            min_bits = 8;
 2650|       |
 2651|       |            /* cksum is set if there is an error in the zlib header checksum
 2652|       |             * calculation in the original file (and this may be the only reason
 2653|       |             * a rewrite is required).  We can't rely on the file window bits in
 2654|       |             * this case, so do the optimization anyway.
 2655|       |             */
 2656|     46|            if (zlib.cksum)
 2657|     46|               chunk_message(zlib.chunk, "zlib checksum");
 2658|     46|            break;
 2659|       |
 2660|       |
 2661|     35|         case ZLIB_OK:
 2662|       |            /* Truncated stream; unrecoverable, gets converted to ZLIB_FATAL */
 2663|     35|            zlib.z.msg = PNGZ_MSG_CAST("[truncated]");
 2664|     35|            zlib_message(&zlib, 0/*expected*/);
 2665|       |            /* FALLTHROUGH */
 2666|       |
 2667|    100|         default:
 2668|       |            /* Unrecoverable error; skip the chunk; a zlib_message has already
 2669|       |             * been output.
 2670|       |             */
 2671|    100|            zlib_end(&zlib);
 2672|    100|            return 0;
 2673|    670|      }
 2674|       |
 2675|       |      /* Optimize window bits or fix a too-far-back error.  min_bits and
 2676|       |       * max_bits have been set appropriately, ok_bits records the bit value
 2677|       |       * known to work.
 2678|       |       */
 2679|    249|      while (min_bits < max_bits || max_bits < zlib.ok_bits/*if 16*/)
 2680|    198|      {
 2681|    198|         int test_bits = (min_bits + max_bits) >> 1;
 2682|       |
 2683|    198|         if (zlib_reset(&zlib, test_bits))
 2684|    198|         {
 2685|    198|            file_setpos(file, &start_pos);
 2686|    198|            rc = zlib_run(&zlib);
 2687|       |
 2688|    198|            switch (rc)
 2689|    198|            {
 2690|    142|               case ZLIB_TOO_FAR_BACK:
 2691|    142|                  min_bits = test_bits+1;
 2692|    142|                  if (min_bits > max_bits)
 2693|     47|                  {
 2694|       |                     /* This happens when the stream really is damaged and it
 2695|       |                      * contains a distance code that addresses bytes before
 2696|       |                      * the start of the uncompressed data.
 2697|       |                      */
 2698|     47|                     assert(test_bits == 15);
 2699|       |
 2700|       |                     /* Output the error that wasn't output before: */
 2701|     47|                     if (zlib.z.msg == NULL)
 2702|      0|                        zlib.z.msg = PNGZ_MSG_CAST(
 2703|     47|                           "invalid distance too far back");
 2704|     47|                     zlib_message(&zlib, 0/*stream error*/);
 2705|     47|                     zlib_end(&zlib);
 2706|     47|                     return 0;
 2707|     47|                  }
 2708|     95|                  break;
 2709|       |
 2710|     95|               case ZLIB_STREAM_END: /* success */
 2711|     56|                  max_bits = test_bits;
 2712|     56|                  break;
 2713|       |
 2714|      0|               default:
 2715|       |                  /* A fatal error; this happens if a too-far-back error was
 2716|       |                   * hiding a more serious error, zlib_advance has already
 2717|       |                   * output a zlib_message.
 2718|       |                   */
 2719|      0|                  zlib_end(&zlib);
 2720|      0|                  return 0;
 2721|    198|            }
 2722|    198|         }
 2723|       |
 2724|      0|         else /* inflateReset2 failed */
 2725|      0|         {
 2726|      0|            zlib_end(&zlib);
 2727|      0|            return 0;
 2728|      0|         }
 2729|    198|      }
 2730|       |
 2731|       |      /* The loop guarantees this */
 2732|     51|      assert(zlib.ok_bits == max_bits);
 2733|     51|      zlib_end(&zlib);
 2734|     51|      return 1;
 2735|     51|   }
 2736|       |
 2737|      0|   else /* zlib initialization failed - skip the chunk */
 2738|      0|   {
 2739|      0|      zlib_end(&zlib);
 2740|      0|      return 0;
 2741|      0|   }
 2742|    670|}
 2743|       |
 2744|       |/***************************** LIBPNG CALLBACKS *******************************/
 2745|       |/* The strategy here is to run a regular libpng PNG file read but examine the
 2746|       | * input data (from the file) before passing it to libpng so as to be aware of
 2747|       | * the state we expect libpng to be in.  Warning and error callbacks are also
 2748|       | * intercepted so that they can be quieted and interpreted.  Interpretation
 2749|       | * depends on a somewhat risky string match for known error messages; let us
 2750|       | * hope that this can be fixed in the next version of libpng.
 2751|       | *
 2752|       | * The control structure is pointed to by the libpng error pointer.  It contains
 2753|       | * that set of structures which must persist across multiple read callbacks,
 2754|       | * which is pretty much everything except the 'zlib' control structure.
 2755|       | *
 2756|       | * The file structure is instantiated in the caller of the per-file routine, but
 2757|       | * the per-file routine contains the chunk and IDAT control structures.
 2758|       | */
 2759|       |/* The three routines read_chunk, process_chunk and sync_stream can only be
 2760|       | * called via a call to read_chunk and only exit at a return from process_chunk.
 2761|       | * These routines could have been written as one confusing large routine,
 2762|       | * instead this code relies on the compiler to do tail call elimination.  The
 2763|       | * possible calls are as follows:
 2764|       | *
 2765|       | * read_chunk
 2766|       | *    -> sync_stream
 2767|       | *       -> process_chunk
 2768|       | *    -> process_chunk
 2769|       | *       -> read_chunk
 2770|       | *       returns
 2771|       | */
 2772|       |static void read_chunk(struct file *file);
 2773|       |static void
 2774|       |process_chunk(struct file *file, png_uint_32 file_crc, png_uint_32 next_length,
 2775|       |   png_uint_32 next_type)
 2776|       |   /* Called when the chunk data has been read, next_length and next_type
 2777|       |    * will be set for the next chunk (or 0 if this is IEND).
 2778|       |    *
 2779|       |    * When this routine returns, chunk_length and chunk_type will be set for the
 2780|       |    * next chunk to write because if a chunk is skipped this return calls back
 2781|       |    * to read_chunk.
 2782|       |    */
 2783|  2.04k|{
 2784|  2.04k|   png_uint_32 type = file->type;
 2785|       |
 2786|  2.04k|   if (file->global->verbose > 1)
 2787|      0|   {
 2788|      0|      fputs("  ", stderr);
 2789|      0|      type_name(file->type, stderr);
 2790|      0|      fprintf(stderr, " %lu 0x%.8x 0x%.8x\n", (unsigned long)file->length,
 2791|      0|         file->crc ^ 0xffffffff, file_crc);
 2792|      0|   }
 2793|       |
 2794|       |   /* The basic structure seems correct but the CRC may not match, in this
 2795|       |    * case assume that it is simply a bad CRC, either wrongly calculated or
 2796|       |    * because of damaged stream data.
 2797|       |    */
 2798|  2.04k|   if ((file->crc ^ 0xffffffff) != file_crc)
 2799|    402|   {
 2800|       |      /* The behavior is set by the 'skip' setting; if it is anything other
 2801|       |       * than SKIP_BAD_CRC ignore the bad CRC and return the chunk, with a
 2802|       |       * corrected CRC and possibly processed, to libpng.  Otherwise skip the
 2803|       |       * chunk, which will result in a fatal error if the chunk is critical.
 2804|       |       */
 2805|    402|      file->status_code |= CRC_ERROR;
 2806|       |
 2807|       |      /* Ignore the bad CRC  */
 2808|    402|      if (file->global->skip != SKIP_BAD_CRC)
 2809|    402|         type_message(file, type, "bad CRC");
 2810|       |
 2811|       |      /* This will cause an IEND with a bad CRC to stop */
 2812|      0|      else if (CRITICAL(type))
 2813|      0|         stop(file, READ_ERROR_CODE, "bad CRC in critical chunk");
 2814|       |
 2815|      0|      else
 2816|      0|      {
 2817|      0|         type_message(file, type, "skipped: bad CRC");
 2818|       |
 2819|       |         /* NOTE: this cannot be reached for IEND because it is critical. */
 2820|      0|         goto skip_chunk;
 2821|      0|      }
 2822|    402|   }
 2823|       |
 2824|       |   /* Check for other 'skip' cases and handle these; these only apply to
 2825|       |    * ancillary chunks (and not tRNS, which should probably have been a critical
 2826|       |    * chunk.)
 2827|       |    */
 2828|  2.04k|   if (skip_chunk_type(file->global, type))
 2829|      0|      goto skip_chunk;
 2830|       |
 2831|       |   /* The chunk may still be skipped if problems are detected in the LZ data,
 2832|       |    * however the LZ data check requires a chunk.  Handle this by instantiating
 2833|       |    * a chunk unless an IDAT is already instantiated (IDAT control structures
 2834|       |    * instantiate their own chunk.)
 2835|       |    */
 2836|  2.04k|   if (type != png_IDAT)
 2837|  1.71k|      file->alloc(file, 0/*chunk*/);
 2838|       |
 2839|    328|   else if (file->idat == NULL)
 2840|    328|      file->alloc(file, 1/*IDAT*/);
 2841|       |
 2842|      0|   else
 2843|      0|   {
 2844|       |      /* The chunk length must be updated for process_IDAT */
 2845|      0|      assert(file->chunk != NULL);
 2846|      0|      assert(file->chunk->chunk_type == png_IDAT);
 2847|      0|      file->chunk->chunk_length = file->length;
 2848|      0|   }
 2849|       |
 2850|       |   /* Record the 'next' information too, now that the original values for
 2851|       |    * this chunk have been copied.  Notice that the IDAT chunks only make a
 2852|       |    * copy of the position of the first chunk, this is fine - process_IDAT does
 2853|       |    * not need the position of this chunk.
 2854|       |    */
 2855|  2.04k|   file->length = next_length;
 2856|  2.04k|   file->type = next_type;
 2857|  2.04k|   getpos(file);
 2858|       |
 2859|       |   /* Do per-type processing, note that if this code does not return from the
 2860|       |    * function the chunk will be skipped.  The rewrite is cancelled here so that
 2861|       |    * it can be set in the per-chunk processing.
 2862|       |    */
 2863|  2.04k|   file->chunk->rewrite_length = 0;
 2864|  2.04k|   file->chunk->rewrite_offset = 0;
 2865|  2.04k|   switch (type)
 2866|  2.04k|   {
 2867|    987|      default:
 2868|    987|         return;
 2869|       |
 2870|    987|      case png_IHDR:
 2871|       |         /* Read this now and update the control structure with the information
 2872|       |          * it contains.  The header is validated completely to ensure this is a
 2873|       |          * PNG.
 2874|       |          */
 2875|    369|         {
 2876|    369|            struct chunk *chunk = file->chunk;
 2877|       |
 2878|    369|            if (chunk->chunk_length != 13)
 2879|      0|               stop_invalid(file, "IHDR length");
 2880|       |
 2881|       |            /* Read all the IHDR information and validate it. */
 2882|    369|            setpos(chunk);
 2883|    369|            file->width = reread_4(file);
 2884|    369|            file->height = reread_4(file);
 2885|    369|            file->bit_depth = reread_byte(file);
 2886|    369|            file->color_type = reread_byte(file);
 2887|    369|            file->compression_method = reread_byte(file);
 2888|    369|            file->filter_method = reread_byte(file);
 2889|    369|            file->interlace_method = reread_byte(file);
 2890|       |
 2891|       |            /* This validates all the fields, and calls stop_invalid if
 2892|       |             * there is a problem.
 2893|       |             */
 2894|    369|            calc_image_size(file);
 2895|    369|         }
 2896|      0|         return;
 2897|       |
 2898|       |         /* Ancillary chunks that require further processing: */
 2899|      0|      case png_zTXt: case png_iCCP:
 2900|      0|         if (process_zTXt_iCCP(file))
 2901|      0|            return;
 2902|      0|         chunk_end(&file->chunk);
 2903|      0|         file_setpos(file, &file->data_pos);
 2904|      0|         break;
 2905|       |
 2906|    358|      case png_iTXt:
 2907|    358|         if (process_iTXt(file))
 2908|    252|            return;
 2909|    106|         chunk_end(&file->chunk);
 2910|    106|         file_setpos(file, &file->data_pos);
 2911|    106|         break;
 2912|       |
 2913|    328|      case png_IDAT:
 2914|    328|         if (process_IDAT(file))
 2915|    271|            return;
 2916|       |         /* First pass: */
 2917|     57|         assert(next_type == png_IDAT);
 2918|      0|         break;
 2919|  2.04k|   }
 2920|       |
 2921|       |   /* Control reaches this point if the chunk must be skipped.  For chunks other
 2922|       |    * than IDAT this means that the zlib compressed data is fatally damaged and
 2923|       |    * the chunk will not be passed to libpng.  For IDAT it means that the end of
 2924|       |    * the IDAT stream has not yet been reached and we must handle the next
 2925|       |    * (IDAT) chunk.  If the LZ data in an IDAT stream cannot be read 'stop' must
 2926|       |    * be used to halt parsing of the PNG.
 2927|       |    */
 2928|    106|   read_chunk(file);
 2929|    106|   return;
 2930|       |
 2931|       |   /* This is the generic code to skip the current chunk; simply jump to the
 2932|       |    * next one.
 2933|       |    */
 2934|      0|skip_chunk:
 2935|      0|   file->length = next_length;
 2936|      0|   file->type = next_type;
 2937|      0|   getpos(file);
 2938|      0|   read_chunk(file);
 2939|      0|}
 2940|       |
 2941|       |static png_uint_32
 2942|       |get32(png_bytep buffer, int offset)
 2943|       |   /* Read a 32-bit value from an 8-byte circular buffer (used only below).
 2944|       |    */
 2945|    112|{
 2946|    112|   return
 2947|    112|      (buffer[ offset    & 7] << 24) +
 2948|    112|      (buffer[(offset+1) & 7] << 16) +
 2949|    112|      (buffer[(offset+2) & 7] <<  8) +
 2950|    112|      (buffer[(offset+3) & 7]      );
 2951|    112|}
 2952|       |
 2953|       |static void
 2954|       |sync_stream(struct file *file)
 2955|       |   /* The stream seems to be messed up, attempt to resync from the current chunk
 2956|       |    * header.  Executes stop on a fatal error, otherwise calls process_chunk.
 2957|       |    */
 2958|     62|{
 2959|     62|   png_uint_32 file_crc;
 2960|       |
 2961|     62|   file->status_code |= STREAM_ERROR;
 2962|       |
 2963|     62|   if (file->global->verbose)
 2964|      0|   {
 2965|      0|      fputs(" SYNC ", stderr);
 2966|      0|      type_name(file->type, stderr);
 2967|      0|      putc('\n', stderr);
 2968|      0|   }
 2969|       |
 2970|       |   /* Return to the start of the chunk data */
 2971|     62|   file_setpos(file, &file->data_pos);
 2972|     62|   file->read_count = 8;
 2973|       |
 2974|     62|   if (read_4(file, &file_crc) == 4) /* else completely truncated */
 2975|     62|   {
 2976|       |      /* Ignore the recorded chunk length, proceed through the data looking for
 2977|       |       * a leading sequence of bytes that match the CRC in the following four
 2978|       |       * bytes.  Each time a match is found check the next 8 bytes for a valid
 2979|       |       * length, chunk-type pair.
 2980|       |       */
 2981|     62|      png_uint_32 length;
 2982|     62|      png_uint_32 type = file->type;
 2983|     62|      png_uint_32 crc = crc_init_4(type);
 2984|     62|      png_byte buffer[8];
 2985|     62|      unsigned int nread = 0, nused = 0;
 2986|       |
 2987|  4.85k|      for (length=0; length <= 0x7fffffff; ++length)
 2988|  4.85k|      {
 2989|  4.85k|         int ch;
 2990|       |
 2991|  4.85k|         if ((crc ^ 0xffffffff) == file_crc)
 2992|     56|         {
 2993|       |            /* A match on the CRC; for IEND this is sufficient, but for anything
 2994|       |             * else expect a following chunk header.
 2995|       |             */
 2996|     56|            if (type == png_IEND)
 2997|      0|            {
 2998|      0|               file->length = length;
 2999|      0|               process_chunk(file, file_crc, 0, 0);
 3000|      0|               return;
 3001|      0|            }
 3002|       |
 3003|     56|            else
 3004|     56|            {
 3005|       |               /* Need 8 bytes */
 3006|    504|               while (nread < 8+nused)
 3007|    448|               {
 3008|    448|                  ch = read_byte(file);
 3009|    448|                  if (ch == EOF)
 3010|      0|                     goto truncated;
 3011|    448|                  buffer[(nread++) & 7] = (png_byte)ch;
 3012|    448|               }
 3013|       |
 3014|       |               /* Prevent overflow */
 3015|     56|               nread -= nused & ~7;
 3016|     56|               nused -= nused & ~7; /* or, nused &= 7 ;-) */
 3017|       |
 3018|       |               /* Examine the 8 bytes for a valid chunk header. */
 3019|     56|               {
 3020|     56|                  png_uint_32 next_length = get32(buffer, nused);
 3021|       |
 3022|     56|                  if (next_length < 0x7fffffff)
 3023|     56|                  {
 3024|     56|                     png_uint_32 next_type = get32(buffer, nused+4);
 3025|       |
 3026|     56|                     if (chunk_type_valid(next_type))
 3027|     54|                     {
 3028|     54|                        file->read_count -= 8;
 3029|     54|                        process_chunk(file, file_crc, next_length, next_type);
 3030|     54|                        return;
 3031|     54|                     }
 3032|     56|                  }
 3033|       |
 3034|       |                  /* Not valid, keep going. */
 3035|     56|               }
 3036|     56|            }
 3037|     56|         }
 3038|       |
 3039|       |         /* This catches up with the circular buffer which gets filled above
 3040|       |          * while checking a chunk header.  This code is slightly tricky - if
 3041|       |          * the chunk_type is IEND the buffer will never be used, if it is not
 3042|       |          * the code will always read ahead exactly 8 bytes and pass this on to
 3043|       |          * process_chunk.  So the invariant that IEND leaves the file position
 3044|       |          * after the IEND CRC and other chunk leave it after the *next* chunk
 3045|       |          * header is not broken.
 3046|       |          */
 3047|  4.79k|         if (nread <= nused)
 3048|  4.78k|         {
 3049|  4.78k|            ch = read_byte(file);
 3050|       |
 3051|  4.78k|            if (ch == EOF)
 3052|      8|               goto truncated;
 3053|  4.78k|         }
 3054|       |
 3055|     16|         else
 3056|     16|            ch = buffer[(++nused) & 7];
 3057|       |
 3058|  4.79k|         crc = crc_one_byte(crc, file_crc >> 24);
 3059|  4.79k|         file_crc = (file_crc << 8) + ch;
 3060|  4.79k|      }
 3061|       |
 3062|       |      /* Control gets to here if when 0x7fffffff bytes (plus 8) have been read,
 3063|       |       * ok, treat this as a damaged stream too:
 3064|       |       */
 3065|     62|   }
 3066|       |
 3067|      8|truncated:
 3068|      8|   stop(file, READ_ERROR_CODE, "damaged PNG stream");
 3069|     62|}
 3070|       |
 3071|       |static void
 3072|       |read_chunk(struct file *file)
 3073|       |   /* On entry file::data_pos must be set to the position of the first byte
 3074|       |    * of the chunk data *and* the input file must be at this position.  This
 3075|       |    * routine (via process_chunk) instantiates a chunk or IDAT control structure
 3076|       |    * based on file::length and file::type and also resets these fields and
 3077|       |    * file::data_pos for the chunk after this one.  For an IDAT chunk the whole
 3078|       |    * stream of IDATs will be read, until something other than an IDAT is
 3079|       |    * encountered, and the file fields will be set for the chunk after the end
 3080|       |    * of the stream of IDATs.
 3081|       |    *
 3082|       |    * For IEND the file::type field will be set to 0, and nothing beyond the end
 3083|       |    * of the IEND chunk will have been read.
 3084|       |    */
 3085|  2.05k|{
 3086|  2.05k|   png_uint_32 length = file->length;
 3087|  2.05k|   png_uint_32 type = file->type;
 3088|       |
 3089|       |   /* After IEND file::type is set to 0, if libpng attempts to read
 3090|       |    * more data at this point this is a bug in libpng.
 3091|       |    */
 3092|  2.05k|   if (type == 0)
 3093|      0|      stop(file, UNEXPECTED_ERROR_CODE, "read beyond IEND");
 3094|       |
 3095|  2.05k|   if (file->global->verbose > 2)
 3096|      0|   {
 3097|      0|      fputs("   ", stderr);
 3098|      0|      type_name(type, stderr);
 3099|      0|      fprintf(stderr, " %lu\n", (unsigned long)length);
 3100|      0|   }
 3101|       |
 3102|       |   /* Start the read_crc calculation with the chunk type, then read to the end
 3103|       |    * of the chunk data (without processing it in any way) to check that it is
 3104|       |    * all there and calculate the CRC.
 3105|       |    */
 3106|  2.05k|   file->crc = crc_init_4(type);
 3107|  2.05k|   if (crc_read_many(file, length)) /* else it was truncated */
 3108|  2.01k|   {
 3109|  2.01k|      png_uint_32 file_crc; /* CRC read from file */
 3110|  2.01k|      unsigned int nread = read_4(file, &file_crc);
 3111|       |
 3112|  2.01k|      if (nread == 4)
 3113|  2.01k|      {
 3114|  2.01k|         if (type != png_IEND) /* do not read beyond IEND */
 3115|  1.74k|         {
 3116|  1.74k|            png_uint_32 next_length;
 3117|       |
 3118|  1.74k|            nread += read_4(file, &next_length);
 3119|  1.74k|            if (nread == 8 && next_length <= 0x7fffffff)
 3120|  1.74k|            {
 3121|  1.74k|               png_uint_32 next_type;
 3122|       |
 3123|  1.74k|               nread += read_4(file, &next_type);
 3124|       |
 3125|  1.74k|               if (nread == 12 && chunk_type_valid(next_type))
 3126|  1.71k|               {
 3127|       |                  /* Adjust the read count back to the correct value for this
 3128|       |                   * chunk.
 3129|       |                   */
 3130|  1.71k|                  file->read_count -= 8;
 3131|  1.71k|                  process_chunk(file, file_crc, next_length, next_type);
 3132|  1.71k|                  return;
 3133|  1.71k|               }
 3134|  1.74k|            }
 3135|  1.74k|         }
 3136|       |
 3137|    269|         else /* IEND */
 3138|    269|         {
 3139|    269|            process_chunk(file, file_crc, 0, 0);
 3140|    269|            return;
 3141|    269|         }
 3142|  2.01k|      }
 3143|  2.01k|   }
 3144|       |
 3145|       |   /* Control gets to here if the stream seems invalid or damaged in some
 3146|       |    * way.  Either there was a problem reading all the expected data (this
 3147|       |    * chunk's data, its CRC and the length and type of the next chunk) or the
 3148|       |    * next chunk length/type are invalid.  Notice that the cases that end up
 3149|       |    * here all correspond to cases that would otherwise terminate the read of
 3150|       |    * the PNG file.
 3151|       |    */
 3152|     62|   sync_stream(file);
 3153|     62|}
 3154|       |
 3155|       |/* This returns a file* from a png_struct in an implementation specific way. */
 3156|       |static struct file *get_control(png_const_structrp png_ptr);
 3157|       |
 3158|       |static void PNGCBAPI
 3159|       |error_handler(png_structp png_ptr, png_const_charp message)
 3160|     34|{
 3161|     34|   stop(get_control(png_ptr),  LIBPNG_ERROR_CODE, message);
 3162|     34|}
 3163|       |
 3164|       |static void PNGCBAPI
 3165|       |warning_handler(png_structp png_ptr, png_const_charp message)
 3166|     94|{
 3167|     94|   struct file *file = get_control(png_ptr);
 3168|       |
 3169|     94|   if (file->global->warnings)
 3170|      0|      emit_error(file, LIBPNG_WARNING_CODE, message);
 3171|     94|}
 3172|       |
 3173|       |/* Read callback - this is where the work gets done to check the stream before
 3174|       | * passing it to libpng
 3175|       | */
 3176|       |static void PNGCBAPI
 3177|       |read_callback(png_structp png_ptr, png_bytep buffer, size_t count)
 3178|       |   /* Return 'count' bytes to libpng in 'buffer' */
 3179|  7.74k|{
 3180|  7.74k|   struct file *file = get_control(png_ptr);
 3181|  7.74k|   png_uint_32 type, length; /* For the chunk be *WRITTEN* */
 3182|  7.74k|   struct chunk *chunk;
 3183|       |
 3184|       |   /* libpng should always ask for at least one byte */
 3185|  7.74k|   if (count == 0)
 3186|      0|      stop(file, UNEXPECTED_ERROR_CODE, "read callback for 0 bytes");
 3187|       |
 3188|       |   /* The callback always reads ahead by 8 bytes - the signature or chunk header
 3189|       |    * - these bytes are stored in chunk_length and chunk_type.  This block is
 3190|       |    * executed once for the signature and once for the first chunk right at the
 3191|       |    * start.
 3192|       |    */
 3193|  7.74k|   if (file->read_count < 8)
 3194|    748|   {
 3195|    748|      assert(file->read_count == 0);
 3196|    748|      assert((file->status_code & TRUNCATED) == 0);
 3197|       |
 3198|    748|      (void)read_4(file, &file->length);
 3199|       |
 3200|    748|      if (file->read_count == 4)
 3201|    748|         (void)read_4(file, &file->type);
 3202|       |
 3203|    748|      if (file->read_count < 8)
 3204|      1|      {
 3205|      1|         assert((file->status_code & TRUNCATED) != 0);
 3206|      1|         stop(file, READ_ERROR_CODE, "not a PNG (too short)");
 3207|      1|      }
 3208|       |
 3209|    747|      if (file->state == STATE_SIGNATURE)
 3210|    374|      {
 3211|    374|         if (file->length != sig1 || file->type != sig2)
 3212|      0|            stop(file, LIBPNG_ERROR_CODE, "not a PNG (signature)");
 3213|       |
 3214|       |         /* Else write it (this is the initialization of write_count, prior to
 3215|       |          * this it contains CLEAR garbage.)
 3216|       |          */
 3217|    374|         file->write_count = 0;
 3218|    374|      }
 3219|       |
 3220|    373|      else
 3221|    373|      {
 3222|    373|         assert(file->state == STATE_CHUNKS);
 3223|       |
 3224|       |         /* The first chunk must be a well formed IHDR (this could be relaxed to
 3225|       |          * use the checks in process_chunk, but that seems unnecessary.)
 3226|       |          */
 3227|    373|         if (file->length != 13 || file->type != png_IHDR)
 3228|      4|            stop(file, LIBPNG_ERROR_CODE, "not a PNG (IHDR)");
 3229|       |
 3230|       |         /* The position of the data must be stored too */
 3231|    369|         getpos(file);
 3232|    369|      }
 3233|    747|   }
 3234|       |
 3235|       |   /* Retrieve previous state (because the read callbacks are made pretty much
 3236|       |    * byte-by-byte in the sequential reader prior to 1.7).
 3237|       |    */
 3238|  7.73k|   chunk = file->chunk;
 3239|       |
 3240|  7.73k|   if (chunk != NULL)
 3241|  5.04k|   {
 3242|  5.04k|      length = chunk->chunk_length;
 3243|  5.04k|      type = chunk->chunk_type;
 3244|  5.04k|   }
 3245|       |
 3246|  2.69k|   else
 3247|  2.69k|   {
 3248|       |      /* This is the signature case; for IDAT and other chunks these values will
 3249|       |       * be overwritten when read_chunk is called below.
 3250|       |       */
 3251|  2.69k|      length = file->length;
 3252|  2.69k|      type = file->type;
 3253|  2.69k|   }
 3254|       |
 3255|  7.73k|   do
 3256|   155k|   {
 3257|   155k|      png_uint_32 b;
 3258|       |
 3259|       |      /* Complete the read of a chunk; as a side effect this also instantiates
 3260|       |       * a chunk control structure and sets the file length/type/data_pos fields
 3261|       |       * for the *NEXT* chunk header.
 3262|       |       *
 3263|       |       * NOTE: at an IDAT any following IDAT chunks will also be read and the
 3264|       |       * next_ fields will refer to the chunk after the last IDAT.
 3265|       |       *
 3266|       |       * NOTE: read_chunk only returns when it has read a chunk that must now be
 3267|       |       * written.
 3268|       |       */
 3269|   155k|      if (file->state != STATE_SIGNATURE && chunk == NULL)
 3270|  1.94k|      {
 3271|  1.94k|         assert(file->read_count == 8);
 3272|  1.94k|         assert(file->idat == NULL);
 3273|  1.94k|         read_chunk(file);
 3274|  1.94k|         chunk = file->chunk;
 3275|  1.94k|         assert(chunk != NULL);
 3276|       |
 3277|       |         /* Do the initialization that was not done before. */
 3278|  1.87k|         length = chunk->chunk_length;
 3279|  1.87k|         type = chunk->chunk_type;
 3280|       |
 3281|       |         /* And start writing the new chunk. */
 3282|  1.87k|         file->write_count = 0;
 3283|  1.87k|      }
 3284|       |
 3285|       |      /* The chunk_ fields describe a chunk that must be written, or hold the
 3286|       |       * signature.  Write the header first.  In the signature case this
 3287|       |       * rewrites the signature.
 3288|       |       */
 3289|   155k|      switch (file->write_count)
 3290|   155k|      {
 3291|  2.25k|         case 0: b = length >> 24; break;
 3292|  2.25k|         case 1: b = length >> 16; break;
 3293|  2.25k|         case 2: b = length >>  8; break;
 3294|  2.25k|         case 3: b = length      ; break;
 3295|       |
 3296|  2.25k|         case 4: b = type >> 24; break;
 3297|  2.25k|         case 5: b = type >> 16; break;
 3298|  2.25k|         case 6: b = type >>  8; break;
 3299|  2.25k|         case 7: b = type      ; break;
 3300|       |
 3301|  2.23k|         case 8:
 3302|       |            /* The header has been written.  If this is really the signature
 3303|       |             * that's all that is required and we can go to normal chunk
 3304|       |             * processing.
 3305|       |             */
 3306|  2.23k|            if (file->state == STATE_SIGNATURE)
 3307|    374|            {
 3308|       |               /* The signature has been written, the tail call to read_callback
 3309|       |                * below (it's just a goto to the start with a decent compiler)
 3310|       |                * will read the IHDR header ahead and validate it.
 3311|       |                */
 3312|    374|               assert(length == sig1 && type == sig2);
 3313|    374|               file->read_count = 0; /* Forces a header read */
 3314|    374|               file->state = STATE_CHUNKS; /* IHDR: checked above */
 3315|    374|               read_callback(png_ptr, buffer, count);
 3316|    374|               return;
 3317|    374|            }
 3318|       |
 3319|  1.86k|            else
 3320|  1.86k|            {
 3321|  1.86k|               assert(chunk != NULL);
 3322|       |
 3323|       |               /* Set up for write, notice that repositioning the input stream
 3324|       |                * is only necessary if something is to be read from it.  Also
 3325|       |                * notice that for the IDAT stream this must only happen once -
 3326|       |                * on the first IDAT - to get back to the start of the list and
 3327|       |                * this is done inside process_IDAT:
 3328|       |                */
 3329|  1.86k|               chunk->write_crc = crc_init_4(type);
 3330|  1.86k|               if (file->state != STATE_IDAT && length > 0)
 3331|  1.34k|                  setpos(chunk);
 3332|  1.86k|            }
 3333|       |            /* FALLTHROUGH */
 3334|       |
 3335|   137k|         default:
 3336|   137k|            assert(chunk != NULL);
 3337|       |
 3338|       |            /* NOTE: the arithmetic below overflows and gives a large positive
 3339|       |             * png_uint_32 value until the whole chunk data has been written.
 3340|       |             */
 3341|   137k|            switch (file->write_count - length)
 3342|   137k|            {
 3343|       |               /* Write the chunk data, normally this just comes from
 3344|       |                * the file.  The only exception is for that part of a
 3345|       |                * chunk which is zlib data and which must be rewritten,
 3346|       |                * and IDAT chunks which can be completely
 3347|       |                * reconstructed.
 3348|       |                */
 3349|   129k|               default:
 3350|   129k|                  if (file->state == STATE_IDAT)
 3351|  66.3k|                  {
 3352|  66.3k|                     struct IDAT *idat = file->idat;
 3353|       |
 3354|  66.3k|                     assert(idat != NULL);
 3355|       |
 3356|       |                     /* Read an IDAT byte from the input stream of IDAT chunks.
 3357|       |                      * Because the IDAT stream can be re-chunked this stream is
 3358|       |                      * held in the struct IDAT members.  The chunk members, in
 3359|       |                      * particular chunk_length (and therefore the length local)
 3360|       |                      * refer to the output chunk.
 3361|       |                      */
 3362|  66.3k|                     while (idat->idat_index >= idat->idat_length)
 3363|      0|                     {
 3364|       |                        /* Advance one chunk */
 3365|      0|                        struct IDAT_list *cur = idat->idat_cur;
 3366|       |
 3367|      0|                        assert(idat->idat_index == idat->idat_length);
 3368|      0|                        assert(cur != NULL && cur->count > 0);
 3369|       |
 3370|       |                        /* NOTE: IDAT_list::count here, not IDAT_list::length */
 3371|      0|                        if (++(idat->idat_count) >= cur->count)
 3372|      0|                        {
 3373|      0|                           assert(idat->idat_count == cur->count);
 3374|       |
 3375|       |                           /* Move on to the next IDAT_list: */
 3376|      0|                           cur = cur->next;
 3377|       |
 3378|       |                           /* This is an internal error - read beyond the end of
 3379|       |                            * the pre-calculated stream.
 3380|       |                            */
 3381|      0|                           if (cur == NULL || cur->count == 0)
 3382|      0|                              stop(file, UNEXPECTED_ERROR_CODE,
 3383|      0|                                 "read beyond end of IDAT");
 3384|       |
 3385|      0|                           idat->idat_count = 0;
 3386|      0|                           idat->idat_cur = cur;
 3387|      0|                        }
 3388|       |
 3389|      0|                        idat->idat_index = 0;
 3390|       |                        /* Zero length IDAT chunks are permitted, so the length
 3391|       |                         * here may be 0.
 3392|       |                         */
 3393|      0|                        idat->idat_length = cur->lengths[idat->idat_count];
 3394|       |
 3395|       |                        /* And skip 12 bytes to the next chunk data */
 3396|      0|                        skip_12(file);
 3397|      0|                     }
 3398|       |
 3399|       |                     /* The index is always that of the next byte, the rest of
 3400|       |                      * the information is always the current IDAT chunk and the
 3401|       |                      * current list.
 3402|       |                      */
 3403|  66.3k|                     ++(idat->idat_index);
 3404|  66.3k|                  }
 3405|       |
 3406|       |                  /* Read the byte from the stream. */
 3407|   129k|                  b = reread_byte(file);
 3408|       |
 3409|       |                  /* If the byte must be rewritten handle that here */
 3410|   129k|                  if (chunk->rewrite_length > 0)
 3411|    390|                  {
 3412|    390|                     if (chunk->rewrite_offset > 0)
 3413|    288|                        --(chunk->rewrite_offset);
 3414|       |
 3415|    102|                     else
 3416|    102|                     {
 3417|    102|                        b = chunk->rewrite_buffer[0];
 3418|    102|                        memmove(chunk->rewrite_buffer, chunk->rewrite_buffer+1,
 3419|    102|                           (sizeof chunk->rewrite_buffer)-
 3420|    102|                              (sizeof chunk->rewrite_buffer[0]));
 3421|       |
 3422|    102|                        --(chunk->rewrite_length);
 3423|    102|                     }
 3424|    390|                  }
 3425|       |
 3426|   129k|                  chunk->write_crc = crc_one_byte(chunk->write_crc, b);
 3427|   129k|                  break;
 3428|       |
 3429|       |               /* The CRC is written at:
 3430|       |                *
 3431|       |                *    chunk_write == chunk_length+8..chunk_length+11
 3432|       |                *
 3433|       |                * so 8 to 11.  The CRC is not (yet) conditioned.
 3434|       |                */
 3435|  1.84k|               case  8: b = chunk->write_crc >> 24; goto write_crc;
 3436|  1.84k|               case  9: b = chunk->write_crc >> 16; goto write_crc;
 3437|  1.84k|               case 10: b = chunk->write_crc >>  8; goto write_crc;
 3438|  1.84k|               case 11:
 3439|       |                  /* This must happen before the chunk_end below: */
 3440|  1.84k|                  b = chunk->write_crc;
 3441|       |
 3442|  1.84k|                  if (file->global->verbose > 2)
 3443|      0|                  {
 3444|      0|                     fputs("   ", stderr);
 3445|      0|                     type_name(type, stderr);
 3446|      0|                     fprintf(stderr, " %lu 0x%.8x\n", (unsigned long)length,
 3447|      0|                        chunk->write_crc ^ 0xffffffff);
 3448|      0|                  }
 3449|       |
 3450|       |                  /* The IDAT stream is written without a call to read_chunk
 3451|       |                   * until the end is reached.  rechunk_length() calculates the
 3452|       |                   * length of the output chunks.  Control gets to this point at
 3453|       |                   * the end of an *output* chunk - the length calculated by
 3454|       |                   * rechunk_length.  If this corresponds to the end of the
 3455|       |                   * input stream stop writing IDAT chunks, otherwise continue.
 3456|       |                   */
 3457|  1.84k|                  if (file->state == STATE_IDAT &&
 3458|  1.84k|                     (file->idat->idat_index < file->idat->idat_length ||
 3459|    257|                      1+file->idat->idat_count < file->idat->idat_cur->count ||
 3460|    257|                      file->idat->idat_cur != file->idat->idat_list_tail))
 3461|      0|                  {
 3462|       |                     /* Write another IDAT chunk.  Call rechunk_length to
 3463|       |                      * calculate the length required.
 3464|       |                      */
 3465|      0|                     length = chunk->chunk_length =
 3466|      0|                         rechunk_length(file->idat, 0/*end*/);
 3467|      0|                     assert(type == png_IDAT);
 3468|      0|                     file->write_count = 0; /* for the new chunk */
 3469|      0|                     --(file->write_count); /* fake out the increment below */
 3470|      0|                  }
 3471|       |
 3472|  1.84k|                  else
 3473|  1.84k|                  {
 3474|       |                     /* Entered at the end of a non-IDAT chunk and at the end of
 3475|       |                      * the IDAT stream.  The rewrite should have been cleared.
 3476|       |                      */
 3477|  1.84k|                     if (chunk->rewrite_length > 0 || chunk->rewrite_offset > 0)
 3478|      0|                        stop(file, UNEXPECTED_ERROR_CODE, "pending rewrite");
 3479|       |
 3480|       |                     /* This is the last byte so reset chunk_read for the next
 3481|       |                      * chunk and move the input file to the position after the
 3482|       |                      * *next* chunk header if required.
 3483|       |                      */
 3484|  1.84k|                     file->read_count = 8;
 3485|  1.84k|                     file_setpos(file, &file->data_pos);
 3486|       |
 3487|  1.84k|                     if (file->idat == NULL)
 3488|  1.58k|                        chunk_end(&file->chunk);
 3489|       |
 3490|    257|                     else
 3491|    257|                        IDAT_end(&file->idat);
 3492|  1.84k|                  }
 3493|       |
 3494|  7.36k|               write_crc:
 3495|  7.36k|                  b ^= 0xff; /* conditioning */
 3496|  7.36k|                  break;
 3497|   137k|            }
 3498|   137k|            break;
 3499|   155k|      }
 3500|       |
 3501|       |      /* Write one byte */
 3502|   155k|      b &= 0xff;
 3503|   155k|      *buffer++ = (png_byte)b;
 3504|   155k|      --count;
 3505|   155k|      write_byte(file, (png_byte)b); /* increments chunk_write */
 3506|   155k|   }
 3507|   155k|   while (count > 0);
 3508|  7.73k|}
 3509|       |
 3510|       |/* Bundle the file and an uninitialized chunk and IDAT control structure
 3511|       | * together to allow implementation of the chunk/IDAT allocate routine.
 3512|       | */
 3513|       |struct control
 3514|       |{
 3515|       |   struct file  file;
 3516|       |   struct chunk chunk;
 3517|       |   struct IDAT  idat;
 3518|       |};
 3519|       |
 3520|       |static int
 3521|       |control_end(struct control *control)
 3522|    374|{
 3523|    374|   return file_end(&control->file);
 3524|    374|}
 3525|       |
 3526|       |static struct file *
 3527|       |get_control(png_const_structrp png_ptr)
 3528|  7.86k|{
 3529|       |   /* This just returns the (file*).  The chunk and idat control structures
 3530|       |    * don't always exist.
 3531|       |    */
 3532|  7.86k|   struct control *control = voidcast(struct control*,
 3533|  7.86k|      png_get_error_ptr(png_ptr));
 3534|  7.86k|   return &control->file;
 3535|  7.86k|}
 3536|       |
 3537|       |static void
 3538|       |allocate(struct file *file, int allocate_idat)
 3539|  2.37k|{
 3540|  2.37k|   struct control *control = voidcast(struct control*, file->alloc_ptr);
 3541|       |
 3542|  2.37k|   if (allocate_idat)
 3543|    328|   {
 3544|    328|      assert(file->idat == NULL);
 3545|    328|      IDAT_init(&control->idat, file);
 3546|    328|   }
 3547|       |
 3548|  2.04k|   else /* chunk */
 3549|  2.04k|   {
 3550|  2.04k|      assert(file->chunk == NULL);
 3551|  2.04k|      chunk_init(&control->chunk, file);
 3552|  2.04k|   }
 3553|  2.37k|}
 3554|       |
 3555|       |static int
 3556|       |control_init(struct control *control, struct global *global,
 3557|       |   const char *file_name, const char *out_name)
 3558|       |   /* This wraps file_init(&control::file) and simply returns the result from
 3559|       |    * file_init.
 3560|       |    */
 3561|    374|{
 3562|    374|   return file_init(&control->file, global, file_name, out_name, control,
 3563|    374|      allocate);
 3564|    374|}
 3565|       |
 3566|       |static int
 3567|       |read_png(struct control *control)
 3568|       |   /* Read a PNG, return 0 on success else an error (status) code; a bit mask as
 3569|       |    * defined for file::status_code as above.
 3570|       |    */
 3571|    374|{
 3572|    374|   png_structp png_ptr;
 3573|    374|   png_infop info_ptr = NULL;
 3574|    374|   volatile int rc;
 3575|       |
 3576|    374|   png_ptr = png_create_read_struct(PNG_LIBPNG_VER_STRING, control,
 3577|    374|      error_handler, warning_handler);
 3578|       |
 3579|    374|   if (png_ptr == NULL)
 3580|      0|   {
 3581|       |      /* This is not really expected. */
 3582|      0|      log_error(&control->file, LIBPNG_ERROR_CODE, "OOM allocating png_struct");
 3583|      0|      control->file.status_code |= INTERNAL_ERROR;
 3584|      0|      return LIBPNG_ERROR_CODE;
 3585|      0|   }
 3586|       |
 3587|    374|   rc = setjmp(control->file.jmpbuf);
 3588|    374|   if (rc == 0)
 3589|    374|   {
 3590|    374|#     ifdef PNG_SET_USER_LIMITS_SUPPORTED
 3591|       |         /* Remove any limits on the size of PNG files that can be read,
 3592|       |          * without this we may reject files based on built-in safety
 3593|       |          * limits.
 3594|       |          */
 3595|    374|         png_set_user_limits(png_ptr, 0x7fffffff, 0x7fffffff);
 3596|    374|         png_set_chunk_cache_max(png_ptr, 0);
 3597|    374|         png_set_chunk_malloc_max(png_ptr, 0);
 3598|    374|#     endif
 3599|       |
 3600|    374|      png_set_read_fn(png_ptr, control, read_callback);
 3601|       |
 3602|    374|      info_ptr = png_create_info_struct(png_ptr);
 3603|    374|      if (info_ptr == NULL)
 3604|      0|         png_error(png_ptr, "OOM allocating info structure");
 3605|       |
 3606|    374|      if (control->file.global->verbose)
 3607|      0|         fprintf(stderr, " INFO\n");
 3608|       |
 3609|    374|      png_read_info(png_ptr, info_ptr);
 3610|       |
 3611|    374|      {
 3612|    374|        png_uint_32 height = png_get_image_height(png_ptr, info_ptr);
 3613|    374|        int passes = png_set_interlace_handling(png_ptr);
 3614|    374|        int pass;
 3615|       |
 3616|    374|        png_start_read_image(png_ptr);
 3617|       |
 3618|    704|        for (pass = 0; pass < passes; ++pass)
 3619|    330|        {
 3620|    330|           png_uint_32 y = height;
 3621|       |
 3622|       |           /* NOTE: this skips asking libpng to return either version of
 3623|       |            * the image row, but libpng still reads the rows.
 3624|       |            */
 3625|  31.3k|           while (y-- > 0)
 3626|  30.9k|              png_read_row(png_ptr, NULL, NULL);
 3627|    330|        }
 3628|    374|      }
 3629|       |
 3630|    374|      if (control->file.global->verbose)
 3631|      0|         fprintf(stderr, " END\n");
 3632|       |
 3633|       |      /* Make sure to read to the end of the file: */
 3634|    374|      png_read_end(png_ptr, info_ptr);
 3635|    374|   }
 3636|       |
 3637|    374|   png_destroy_read_struct(&png_ptr, &info_ptr, NULL);
 3638|    374|   return rc;
 3639|    374|}
 3640|       |
 3641|       |static int
 3642|       |one_file(struct global *global, const char *file_name, const char *out_name)
 3643|    374|{
 3644|    374|   int rc;
 3645|    374|   struct control control;
 3646|       |
 3647|    374|   if (global->verbose)
 3648|      0|      fprintf(stderr, "FILE %s -> %s\n", file_name,
 3649|      0|         out_name ? out_name : "<none>");
 3650|       |
 3651|       |   /* Although control_init can return a failure code the structure is always
 3652|       |    * initialized, so control_end can be used to accumulate any status codes.
 3653|       |    */
 3654|    374|   rc = control_init(&control, global, file_name, out_name);
 3655|       |
 3656|    374|   if (rc == 0)
 3657|    374|      rc = read_png(&control);
 3658|       |
 3659|    374|   rc |= control_end(&control);
 3660|       |
 3661|    374|   return rc;
 3662|    374|}
 3663|       |
 3664|       |static void
 3665|       |usage(const char *prog)
 3666|      0|{
 3667|       |   /* ANSI C-90 limits strings to 509 characters, so use a string array: */
 3668|      0|   size_t i;
 3669|      0|   static const char *usage_string[] = {
 3670|      0|"  Tests, optimizes and optionally fixes the zlib header in PNG files.",
 3671|      0|"  Optionally, when fixing, strips ancillary chunks from the file.",
 3672|      0|0,
 3673|      0|"OPTIONS",
 3674|      0|"  OPERATION",
 3675|      0|"      By default files are just checked for readability with a summary of the",
 3676|      0|"      of zlib issues founds for each compressed chunk and the IDAT stream in",
 3677|      0|"      the file.",
 3678|      0|"    --optimize (-o):",
 3679|      0|"      Find the smallest deflate window size for the compressed data.",
 3680|      0|"    --strip=[none|crc|unsafe|unused|transform|color|all]:",
 3681|      0|"        none (default):   Retain all chunks.",
 3682|      0|"        crc:    Remove chunks with a bad CRC.",
 3683|      0|"        unsafe: Remove chunks that may be unsafe to retain if the image data",
 3684|      0|"                is modified.  This is set automatically if --max is given but",
 3685|      0|"                may be cancelled by a later --strip=none.",
 3686|      0|"        unused: Remove chunks not used by libpng when decoding an image.",
 3687|      0|"                This retains any chunks that might be used by libpng image",
 3688|      0|"                transformations.",
 3689|      0|"        transform: unused+bKGD.",
 3690|      0|"        color:  transform+iCCP and cHRM.",
 3691|      0|"        all:    color+gAMA and sRGB.",
 3692|      0|"      Only ancillary chunks are ever removed.  In addition the tRNS and sBIT",
 3693|      0|"      chunks are never removed as they affect exact interpretation of the",
 3694|      0|"      image pixel values.  The following known chunks are treated specially",
 3695|      0|"      by the above options:",
 3696|      0|"        gAMA, sRGB [all]: These specify the gamma encoding used for the pixel",
 3697|      0|"            values.",
 3698|      0|"        cHRM, iCCP [color]: These specify how colors are encoded.  iCCP also",
 3699|      0|"            specifies the exact encoding of a pixel value; however, in",
 3700|      0|"            practice most programs will ignore it.",
 3701|      0|"        bKGD [transform]: This is used by libpng transforms."
 3702|      0|"    --max=<number>:",
 3703|      0|"      Use IDAT chunks sized <number>.  If no number is given the IDAT",
 3704|      0|"      chunks will be the maximum size permitted; 2^31-1 bytes.  If the option",
 3705|      0|"      is omitted the original chunk sizes will not be changed.  When the",
 3706|      0|"      option is given --strip=unsafe is set automatically. This may be",
 3707|      0|"      cancelled if you know that all unknown unsafe-to-copy chunks really are",
 3708|      0|"      safe to copy across an IDAT size change.  This is true of all chunks",
 3709|      0|"      that have ever been formally proposed as PNG extensions.",
 3710|      0|"  MESSAGES",
 3711|      0|"      By default the program only outputs summaries for each file.",
 3712|      0|"    --quiet (-q):",
 3713|      0|"      Do not output the summaries except for files that cannot be read. With",
 3714|      0|"      two --quiets these are not output either.",
 3715|      0|"    --errors (-e):",
 3716|      0|"      Output errors from libpng and the program (except too-far-back).",
 3717|      0|"    --warnings (-w):",
 3718|      0|"      Output warnings from libpng.",
 3719|      0|"  OUTPUT",
 3720|      0|"      By default nothing is written.",
 3721|      0|"    --out=<file>:",
 3722|      0|"      Write the optimized/corrected version of the next PNG to <file>.  This",
 3723|      0|"      overrides the following two options",
 3724|      0|"    --suffix=<suffix>:",
 3725|      0|"      Set --out=<name><suffix> for all following files unless overridden on",
 3726|      0|"      a per-file basis by explicit --out.",
 3727|      0|"    --prefix=<prefix>:",
 3728|      0|"      Set --out=<prefix><name> for all the following files unless overridden",
 3729|      0|"      on a per-file basis by explicit --out.",
 3730|      0|"      These two options can be used together to produce a suffix and prefix.",
 3731|      0|"  INTERNAL OPTIONS",
 3732|       |#if 0 /*NYI*/
 3733|       |#ifdef PNG_MAXIMUM_INFLATE_WINDOW
 3734|       |"    --test:",
 3735|       |"      Test the PNG_MAXIMUM_INFLATE_WINDOW option.  Setting this disables",
 3736|       |"      output as this would produce a broken file.",
 3737|       |#endif
 3738|       |#endif
 3739|      0|0,
 3740|      0|"EXIT CODES",
 3741|      0|"  *** SUBJECT TO CHANGE ***",
 3742|      0|"  The program exit code is value in the range 0..127 holding a bit mask of",
 3743|      0|"  the following codes.  Notice that the results for each file are combined",
 3744|      0|"  together - check one file at a time to get a meaningful error code!",
 3745|      0|"    0x01: The zlib too-far-back error existed in at least one chunk.",
 3746|      0|"    0x02: At least one chunk had a CRC error.",
 3747|      0|"    0x04: A chunk length was incorrect.",
 3748|      0|"    0x08: The file was truncated.",
 3749|      0|"  Errors less than 16 are potentially recoverable, for a single file if the",
 3750|      0|"  exit code is less than 16 the file could be read (with corrections if a",
 3751|      0|"  non-zero code is returned).",
 3752|      0|"    0x10: The file could not be read, even with corrections.",
 3753|      0|"    0x20: The output file could not be written.",
 3754|      0|"    0x40: An unexpected, potentially internal, error occurred.",
 3755|      0|"  If the command line arguments are incorrect the program exits with exit",
 3756|      0|"  255.  Some older operating systems only support 7-bit exit codes, on those",
 3757|      0|"  systems it is suggested that this program is first tested by supplying",
 3758|      0|"  invalid arguments.",
 3759|      0|0,
 3760|      0|"DESCRIPTION",
 3761|      0|"  " PROGRAM_NAME ":",
 3762|      0|"  checks each PNG file on the command line for errors.  By default errors are",
 3763|      0|"  not output and the program just returns an exit code and prints a summary.",
 3764|      0|"  With the --quiet (-q) option the summaries are suppressed too and the",
 3765|      0|"  program only outputs unexpected errors (internal errors and file open",
 3766|      0|"  errors).",
 3767|      0|"  Various known problems in PNG files are fixed while the file is being read",
 3768|      0|"  The exit code says what problems were fixed.  In particular the zlib error:",
 3769|      0|0,
 3770|      0|"        \"invalid distance too far back\"",
 3771|      0|0,
 3772|      0|"  caused by an incorrect optimization of a zlib stream is fixed in any",
 3773|      0|"  compressed chunk in which it is encountered.  An integrity problem of the",
 3774|      0|"  PNG stream caused by a bug in libpng which wrote an incorrect chunk length",
 3775|      0|"  is also fixed.  Chunk CRC errors are automatically fixed up.",
 3776|      0|0,
 3777|      0|"  Setting one of the \"OUTPUT\" options causes the possibly modified file to",
 3778|      0|"  be written to a new file.",
 3779|      0|0,
 3780|      0|"  Notice that some PNG files with the zlib optimization problem can still be",
 3781|      0|"  read by libpng under some circumstances.  This program will still detect",
 3782|      0|"  and, if requested, correct the error.",
 3783|      0|0,
 3784|      0|"  The program will reliably process all files on the command line unless",
 3785|      0|"  either an invalid argument causes the usage message (this message) to be",
 3786|      0|"  produced or the program crashes.",
 3787|      0|0,
 3788|      0|"  The summary lines describe issues encountered with the zlib compressed",
 3789|      0|"  stream of a chunk.  They have the following format, which is SUBJECT TO",
 3790|      0|"  CHANGE in the future:",
 3791|      0|0,
 3792|      0|"     chunk reason comp-level p1 p2 p3 p4 file",
 3793|      0|0,
 3794|      0|"  p1 through p4 vary according to the 'reason'.  There are always 8 space",
 3795|      0|"  separated fields.  Reasons specific formats are:",
 3796|      0|0,
 3797|      0|"     chunk ERR status code read-errno write-errno message file",
 3798|      0|"     chunk SKP comp-level file-bits zlib-rc compressed message file",
 3799|      0|"     chunk ??? comp-level file-bits ok-bits compressed uncompress file",
 3800|      0|0,
 3801|      0|"  The various fields are",
 3802|      0|0,
 3803|      0|"$1 chunk:      The chunk type of a chunk in the file or 'HEAD' if a problem",
 3804|      0|"               is reported by libpng at the start of the IDAT stream.",
 3805|      0|"$2 reason:     One of:",
 3806|      0|"          CHK: A zlib header checksum was detected and fixed.",
 3807|      0|"          TFB: The zlib too far back error was detected and fixed.",
 3808|      0|"          OK : No errors were detected in the zlib stream and optimization",
 3809|      0|"               was not requested, or was not possible.",
 3810|      0|"          OPT: The zlib stream window bits value could be improved (and was).",
 3811|      0|"          SKP: The chunk was skipped because of a zlib issue (zlib-rc) with",
 3812|      0|"               explanation 'message'",
 3813|      0|"          ERR: The read of the file was aborted.  The parameters explain why.",
 3814|      0|"$3 status:     For 'ERR' the accumulated status code from 'EXIT CODES' above.",
 3815|      0|"               This is printed as a 2 digit hexadecimal value",
 3816|      0|"   comp-level: The recorded compression level (FLEVEL) of a zlib stream",
 3817|      0|"               expressed as a string {supfast,stdfast,default,maximum}",
 3818|      0|"$4 code:       The file exit code; where stop was called, as a fairly terse",
 3819|      0|"               string {warning,libpng,zlib,invalid,read,write,unexpected}.",
 3820|      0|"   file-bits:  The zlib window bits recorded in the file.",
 3821|      0|"$5 read-errno: A system errno value from a read translated by strerror(3).",
 3822|      0|"   zlib-rc:    A zlib return code as a string (see zlib.h).",
 3823|      0|"   ok-bits:    The smallest zlib window bits value that works.",
 3824|      0|"$6 write-errno:A system errno value from a write translated by strerror(3).",
 3825|      0|"   compressed: The count of compressed bytes in the zlib stream, when the",
 3826|      0|"               reason is 'SKP'; this is a count of the bytes read from the",
 3827|      0|"               stream when the fatal error was encountered.",
 3828|      0|"$7 message:    An error message (spaces replaced by _, as in all parameters),",
 3829|      0|"   uncompress: The count of bytes from uncompressing the zlib stream; this",
 3830|      0|"               may not be the same as the number of bytes in the image.",
 3831|      0|"$8 file:       The name of the file (this may contain spaces).",
 3832|      0|};
 3833|       |
 3834|      0|   fprintf(stderr, "Usage: %s {[options] png-file}\n", prog);
 3835|       |
 3836|      0|   for (i=0; i < (sizeof usage_string)/(sizeof usage_string[0]); ++i)
 3837|      0|   {
 3838|      0|      if (usage_string[i] != 0)
 3839|      0|         fputs(usage_string[i], stderr);
 3840|       |
 3841|      0|      fputc('\n', stderr);
 3842|      0|   }
 3843|       |
 3844|      0|   exit(255);
 3845|      0|}
 3846|       |
 3847|       |int
 3848|       |main(int argc, const char **argv)
 3849|    374|{
 3850|    374|   char temp_name[FILENAME_MAX+1];
 3851|    374|   const char *  prog = *argv;
 3852|    374|   const char *  outfile = NULL;
 3853|    374|   const char *  suffix = NULL;
 3854|    374|   const char *  prefix = NULL;
 3855|    374|   int           done = 0; /* if at least one file is processed */
 3856|    374|   struct global global;
 3857|       |
 3858|    374|   global_init(&global);
 3859|       |
 3860|    748|   while (--argc > 0)
 3861|    374|   {
 3862|    374|      ++argv;
 3863|       |
 3864|    374|      if (strcmp(*argv, "--debug") == 0)
 3865|      0|      {
 3866|       |         /* To help debugging problems: */
 3867|      0|         global.errors = global.warnings = 1;
 3868|      0|         global.quiet = 0;
 3869|      0|         global.verbose = 7;
 3870|      0|      }
 3871|       |
 3872|    374|      else if (strncmp(*argv, "--max=", 6) == 0)
 3873|      0|      {
 3874|      0|         global.idat_max = (png_uint_32)atol(6+*argv);
 3875|       |
 3876|      0|         if (global.skip < SKIP_UNSAFE)
 3877|      0|            global.skip = SKIP_UNSAFE;
 3878|      0|      }
 3879|       |
 3880|    374|      else if (strcmp(*argv, "--max") == 0)
 3881|      0|      {
 3882|      0|         global.idat_max = 0x7fffffff;
 3883|       |
 3884|      0|         if (global.skip < SKIP_UNSAFE)
 3885|      0|            global.skip = SKIP_UNSAFE;
 3886|      0|      }
 3887|       |
 3888|    374|      else if (strcmp(*argv, "--optimize") == 0 || strcmp(*argv, "-o") == 0)
 3889|      0|         global.optimize_zlib = 1;
 3890|       |
 3891|    374|      else if (strncmp(*argv, "--out=", 6) == 0)
 3892|      0|         outfile = 6+*argv;
 3893|       |
 3894|    374|      else if (strncmp(*argv, "--suffix=", 9) == 0)
 3895|      0|         suffix = 9+*argv;
 3896|       |
 3897|    374|      else if (strncmp(*argv, "--prefix=", 9) == 0)
 3898|      0|         prefix = 9+*argv;
 3899|       |
 3900|    374|      else if (strcmp(*argv, "--strip=none") == 0)
 3901|      0|         global.skip = SKIP_NONE;
 3902|       |
 3903|    374|      else if (strcmp(*argv, "--strip=crc") == 0)
 3904|      0|         global.skip = SKIP_BAD_CRC;
 3905|       |
 3906|    374|      else if (strcmp(*argv, "--strip=unsafe") == 0)
 3907|      0|         global.skip = SKIP_UNSAFE;
 3908|       |
 3909|    374|      else if (strcmp(*argv, "--strip=unused") == 0)
 3910|      0|         global.skip = SKIP_UNUSED;
 3911|       |
 3912|    374|      else if (strcmp(*argv, "--strip=transform") == 0)
 3913|      0|         global.skip = SKIP_TRANSFORM;
 3914|       |
 3915|    374|      else if (strcmp(*argv, "--strip=color") == 0)
 3916|      0|         global.skip = SKIP_COLOR;
 3917|       |
 3918|    374|      else if (strcmp(*argv, "--strip=all") == 0)
 3919|      0|         global.skip = SKIP_ALL;
 3920|       |
 3921|    374|      else if (strcmp(*argv, "--errors") == 0 || strcmp(*argv, "-e") == 0)
 3922|      0|         global.errors = 1;
 3923|       |
 3924|    374|      else if (strcmp(*argv, "--warnings") == 0 || strcmp(*argv, "-w") == 0)
 3925|      0|         global.warnings = 1;
 3926|       |
 3927|    374|      else if (strcmp(*argv, "--quiet") == 0 || strcmp(*argv, "-q") == 0)
 3928|      0|      {
 3929|      0|         if (global.quiet)
 3930|      0|            global.quiet = 2;
 3931|       |
 3932|      0|         else
 3933|      0|            global.quiet = 1;
 3934|      0|      }
 3935|       |
 3936|    374|      else if (strcmp(*argv, "--verbose") == 0 || strcmp(*argv, "-v") == 0)
 3937|      0|         ++global.verbose;
 3938|       |
 3939|       |#if 0
 3940|       |      /* NYI */
 3941|       |#     ifdef PNG_MAXIMUM_INFLATE_WINDOW
 3942|       |         else if (strcmp(*argv, "--test") == 0)
 3943|       |            ++set_option;
 3944|       |#     endif
 3945|       |#endif
 3946|       |
 3947|    374|      else if ((*argv)[0] == '-')
 3948|      0|         usage(prog);
 3949|       |
 3950|    374|      else
 3951|    374|      {
 3952|    374|         size_t outlen = strlen(*argv);
 3953|       |
 3954|    374|         if (outlen > FILENAME_MAX)
 3955|      0|         {
 3956|      0|            fprintf(stderr, "%s: output file name too long: %s%s%s\n",
 3957|      0|               prog, prefix, *argv, suffix ? suffix : "");
 3958|      0|            global.status_code |= WRITE_ERROR;
 3959|      0|            continue;
 3960|      0|         }
 3961|       |
 3962|    374|         if (outfile == NULL) /* else this takes precedence */
 3963|    374|         {
 3964|       |            /* Consider the prefix/suffix options */
 3965|    374|            if (prefix != NULL)
 3966|      0|            {
 3967|      0|               size_t prefixlen = strlen(prefix);
 3968|       |
 3969|      0|               if (prefixlen+outlen > FILENAME_MAX)
 3970|      0|               {
 3971|      0|                  fprintf(stderr, "%s: output file name too long: %s%s%s\n",
 3972|      0|                     prog, prefix, *argv, suffix ? suffix : "");
 3973|      0|                  global.status_code |= WRITE_ERROR;
 3974|      0|                  continue;
 3975|      0|               }
 3976|       |
 3977|      0|               memcpy(temp_name, prefix, prefixlen);
 3978|      0|               memcpy(temp_name+prefixlen, *argv, outlen);
 3979|      0|               outlen += prefixlen;
 3980|      0|               outfile = temp_name;
 3981|      0|            }
 3982|       |
 3983|    374|            else if (suffix != NULL)
 3984|      0|               memcpy(temp_name, *argv, outlen);
 3985|       |
 3986|    374|            temp_name[outlen] = 0;
 3987|       |
 3988|    374|            if (suffix != NULL)
 3989|      0|            {
 3990|      0|               size_t suffixlen = strlen(suffix);
 3991|       |
 3992|      0|               if (outlen+suffixlen > FILENAME_MAX)
 3993|      0|               {
 3994|      0|                  fprintf(stderr, "%s: output file name too long: %s%s\n",
 3995|      0|                     prog, *argv, suffix);
 3996|      0|                  global.status_code |= WRITE_ERROR;
 3997|      0|                  continue;
 3998|      0|               }
 3999|       |
 4000|      0|               memcpy(temp_name+outlen, suffix, suffixlen);
 4001|      0|               outlen += suffixlen;
 4002|      0|               temp_name[outlen] = 0;
 4003|      0|               outfile = temp_name;
 4004|      0|            }
 4005|    374|         }
 4006|       |
 4007|    374|         (void)one_file(&global, *argv, outfile);
 4008|    374|         ++done;
 4009|    374|         outfile = NULL;
 4010|    374|      }
 4011|    374|   }
 4012|       |
 4013|    374|   if (!done)
 4014|      0|      usage(prog);
 4015|       |
 4016|    374|   return global_end(&global);
 4017|    374|}
 4018|       |
 4019|       |#else /* ZLIB_VERNUM < 0x1240 */
 4020|       |int
 4021|       |main(void)
 4022|       |{
 4023|       |   fprintf(stderr,
 4024|       |      "pngfix needs libpng with a zlib >=1.2.4 (not 0x%x)\n",
 4025|       |      ZLIB_VERNUM);
 4026|       |   return 77;
 4027|       |}
 4028|       |#endif /* ZLIB_VERNUM */
 4029|       |
 4030|       |#else /* No read support */
 4031|       |
 4032|       |int
 4033|       |main(void)
 4034|       |{
 4035|       |   fprintf(stderr, "pngfix does not work without read deinterlace support\n");
 4036|       |   return 77;
 4037|       |}
 4038|       |#endif /* PNG_READ_SUPPORTED && PNG_EASY_ACCESS_SUPPORTED */
 4039|       |#else /* No setjmp support */
 4040|       |int
 4041|       |main(void)
 4042|       |{
 4043|       |   fprintf(stderr, "pngfix does not work without setjmp support\n");
 4044|       |   return 77;
 4045|       |}
 4046|       |#endif /* PNG_SETJMP_SUPPORTED */
 4047|       |/* vi: set textwidth=80 shiftwidth=3 softtabstop=-1 expandtab: */

/home/s22100141/Capston2/libpng/png.h:
    1|       |
    2|       |/* png.h - header file for PNG reference library
    3|       | *
    4|       | * libpng version 1.6.44.git
    5|       | *
    6|       | * Copyright (c) 2018-2024 Cosmin Truta
    7|       | * Copyright (c) 1998-2002,2004,2006-2018 Glenn Randers-Pehrson
    8|       | * Copyright (c) 1996-1997 Andreas Dilger
    9|       | * Copyright (c) 1995-1996 Guy Eric Schalnat, Group 42, Inc.
   10|       | *
   11|       | * This code is released under the libpng license. (See LICENSE, below.)
   12|       | *
   13|       | * Authors and maintainers:
   14|       | *   libpng versions 0.71, May 1995, through 0.88, January 1996: Guy Schalnat
   15|       | *   libpng versions 0.89, June 1996, through 0.96, May 1997: Andreas Dilger
   16|       | *   libpng versions 0.97, January 1998, through 1.6.35, July 2018:
   17|       | *     Glenn Randers-Pehrson
   18|       | *   libpng versions 1.6.36, December 2018, through 1.6.43, February 2024:
   19|       | *     Cosmin Truta
   20|       | *   See also "Contributing Authors", below.
   21|       | */
   22|       |
   23|       |/*
   24|       | * COPYRIGHT NOTICE, DISCLAIMER, and LICENSE
   25|       | * =========================================
   26|       | *
   27|       | * PNG Reference Library License version 2
   28|       | * ---------------------------------------
   29|       | *
   30|       | *  * Copyright (c) 1995-2024 The PNG Reference Library Authors.
   31|       | *  * Copyright (c) 2018-2024 Cosmin Truta.
   32|       | *  * Copyright (c) 2000-2002, 2004, 2006-2018 Glenn Randers-Pehrson.
   33|       | *  * Copyright (c) 1996-1997 Andreas Dilger.
   34|       | *  * Copyright (c) 1995-1996 Guy Eric Schalnat, Group 42, Inc.
   35|       | *
   36|       | * The software is supplied "as is", without warranty of any kind,
   37|       | * express or implied, including, without limitation, the warranties
   38|       | * of merchantability, fitness for a particular purpose, title, and
   39|       | * non-infringement.  In no event shall the Copyright owners, or
   40|       | * anyone distributing the software, be liable for any damages or
   41|       | * other liability, whether in contract, tort or otherwise, arising
   42|       | * from, out of, or in connection with the software, or the use or
   43|       | * other dealings in the software, even if advised of the possibility
   44|       | * of such damage.
   45|       | *
   46|       | * Permission is hereby granted to use, copy, modify, and distribute
   47|       | * this software, or portions hereof, for any purpose, without fee,
   48|       | * subject to the following restrictions:
   49|       | *
   50|       | *  1. The origin of this software must not be misrepresented; you
   51|       | *     must not claim that you wrote the original software.  If you
   52|       | *     use this software in a product, an acknowledgment in the product
   53|       | *     documentation would be appreciated, but is not required.
   54|       | *
   55|       | *  2. Altered source versions must be plainly marked as such, and must
   56|       | *     not be misrepresented as being the original software.
   57|       | *
   58|       | *  3. This Copyright notice may not be removed or altered from any
   59|       | *     source or altered source distribution.
   60|       | *
   61|       | *
   62|       | * PNG Reference Library License version 1 (for libpng 0.5 through 1.6.35)
   63|       | * -----------------------------------------------------------------------
   64|       | *
   65|       | * libpng versions 1.0.7, July 1, 2000, through 1.6.35, July 15, 2018 are
   66|       | * Copyright (c) 2000-2002, 2004, 2006-2018 Glenn Randers-Pehrson, are
   67|       | * derived from libpng-1.0.6, and are distributed according to the same
   68|       | * disclaimer and license as libpng-1.0.6 with the following individuals
   69|       | * added to the list of Contributing Authors:
   70|       | *
   71|       | *     Simon-Pierre Cadieux
   72|       | *     Eric S. Raymond
   73|       | *     Mans Rullgard
   74|       | *     Cosmin Truta
   75|       | *     Gilles Vollant
   76|       | *     James Yu
   77|       | *     Mandar Sahastrabuddhe
   78|       | *     Google Inc.
   79|       | *     Vadim Barkov
   80|       | *
   81|       | * and with the following additions to the disclaimer:
   82|       | *
   83|       | *     There is no warranty against interference with your enjoyment of
   84|       | *     the library or against infringement.  There is no warranty that our
   85|       | *     efforts or the library will fulfill any of your particular purposes
   86|       | *     or needs.  This library is provided with all faults, and the entire
   87|       | *     risk of satisfactory quality, performance, accuracy, and effort is
   88|       | *     with the user.
   89|       | *
   90|       | * Some files in the "contrib" directory and some configure-generated
   91|       | * files that are distributed with libpng have other copyright owners, and
   92|       | * are released under other open source licenses.
   93|       | *
   94|       | * libpng versions 0.97, January 1998, through 1.0.6, March 20, 2000, are
   95|       | * Copyright (c) 1998-2000 Glenn Randers-Pehrson, are derived from
   96|       | * libpng-0.96, and are distributed according to the same disclaimer and
   97|       | * license as libpng-0.96, with the following individuals added to the
   98|       | * list of Contributing Authors:
   99|       | *
  100|       | *     Tom Lane
  101|       | *     Glenn Randers-Pehrson
  102|       | *     Willem van Schaik
  103|       | *
  104|       | * libpng versions 0.89, June 1996, through 0.96, May 1997, are
  105|       | * Copyright (c) 1996-1997 Andreas Dilger, are derived from libpng-0.88,
  106|       | * and are distributed according to the same disclaimer and license as
  107|       | * libpng-0.88, with the following individuals added to the list of
  108|       | * Contributing Authors:
  109|       | *
  110|       | *     John Bowler
  111|       | *     Kevin Bracey
  112|       | *     Sam Bushell
  113|       | *     Magnus Holmgren
  114|       | *     Greg Roelofs
  115|       | *     Tom Tanner
  116|       | *
  117|       | * Some files in the "scripts" directory have other copyright owners,
  118|       | * but are released under this license.
  119|       | *
  120|       | * libpng versions 0.5, May 1995, through 0.88, January 1996, are
  121|       | * Copyright (c) 1995-1996 Guy Eric Schalnat, Group 42, Inc.
  122|       | *
  123|       | * For the purposes of this copyright and license, "Contributing Authors"
  124|       | * is defined as the following set of individuals:
  125|       | *
  126|       | *     Andreas Dilger
  127|       | *     Dave Martindale
  128|       | *     Guy Eric Schalnat
  129|       | *     Paul Schmidt
  130|       | *     Tim Wegner
  131|       | *
  132|       | * The PNG Reference Library is supplied "AS IS".  The Contributing
  133|       | * Authors and Group 42, Inc. disclaim all warranties, expressed or
  134|       | * implied, including, without limitation, the warranties of
  135|       | * merchantability and of fitness for any purpose.  The Contributing
  136|       | * Authors and Group 42, Inc. assume no liability for direct, indirect,
  137|       | * incidental, special, exemplary, or consequential damages, which may
  138|       | * result from the use of the PNG Reference Library, even if advised of
  139|       | * the possibility of such damage.
  140|       | *
  141|       | * Permission is hereby granted to use, copy, modify, and distribute this
  142|       | * source code, or portions hereof, for any purpose, without fee, subject
  143|       | * to the following restrictions:
  144|       | *
  145|       | *  1. The origin of this source code must not be misrepresented.
  146|       | *
  147|       | *  2. Altered versions must be plainly marked as such and must not
  148|       | *     be misrepresented as being the original source.
  149|       | *
  150|       | *  3. This Copyright notice may not be removed or altered from any
  151|       | *     source or altered source distribution.
  152|       | *
  153|       | * The Contributing Authors and Group 42, Inc. specifically permit,
  154|       | * without fee, and encourage the use of this source code as a component
  155|       | * to supporting the PNG file format in commercial products.  If you use
  156|       | * this source code in a product, acknowledgment is not required but would
  157|       | * be appreciated.
  158|       | *
  159|       | * END OF COPYRIGHT NOTICE, DISCLAIMER, and LICENSE.
  160|       | *
  161|       | * TRADEMARK
  162|       | * =========
  163|       | *
  164|       | * The name "libpng" has not been registered by the Copyright owners
  165|       | * as a trademark in any jurisdiction.  However, because libpng has
  166|       | * been distributed and maintained world-wide, continually since 1995,
  167|       | * the Copyright owners claim "common-law trademark protection" in any
  168|       | * jurisdiction where common-law trademark is recognized.
  169|       | */
  170|       |
  171|       |/*
  172|       | * A "png_get_copyright" function is available, for convenient use in "about"
  173|       | * boxes and the like:
  174|       | *
  175|       | *    printf("%s", png_get_copyright(NULL));
  176|       | *
  177|       | * Also, the PNG logo (in PNG format, of course) is supplied in the
  178|       | * files "pngbar.png" and "pngbar.jpg (88x31) and "pngnow.png" (98x31).
  179|       | */
  180|       |
  181|       |/*
  182|       | * The contributing authors would like to thank all those who helped
  183|       | * with testing, bug fixes, and patience.  This wouldn't have been
  184|       | * possible without all of you.
  185|       | *
  186|       | * Thanks to Frank J. T. Wojcik for helping with the documentation.
  187|       | */
  188|       |
  189|       |/* Note about libpng version numbers:
  190|       | *
  191|       | *    Due to various miscommunications, unforeseen code incompatibilities
  192|       | *    and occasional factors outside the authors' control, version numbering
  193|       | *    on the library has not always been consistent and straightforward.
  194|       | *    The following table summarizes matters since version 0.89c, which was
  195|       | *    the first widely used release:
  196|       | *
  197|       | *    source                 png.h  png.h  shared-lib
  198|       | *    version                string   int  version
  199|       | *    -------                ------ -----  ----------
  200|       | *    0.89c "1.0 beta 3"     0.89      89  1.0.89
  201|       | *    0.90  "1.0 beta 4"     0.90      90  0.90  [should have been 2.0.90]
  202|       | *    0.95  "1.0 beta 5"     0.95      95  0.95  [should have been 2.0.95]
  203|       | *    0.96  "1.0 beta 6"     0.96      96  0.96  [should have been 2.0.96]
  204|       | *    0.97b "1.00.97 beta 7" 1.00.97   97  1.0.1 [should have been 2.0.97]
  205|       | *    0.97c                  0.97      97  2.0.97
  206|       | *    0.98                   0.98      98  2.0.98
  207|       | *    0.99                   0.99      98  2.0.99
  208|       | *    0.99a-m                0.99      99  2.0.99
  209|       | *    1.00                   1.00     100  2.1.0 [100 should be 10000]
  210|       | *    1.0.0      (from here on, the   100  2.1.0 [100 should be 10000]
  211|       | *    1.0.1       png.h string is   10001  2.1.0
  212|       | *    1.0.1a-e    identical to the  10002  from here on, the shared library
  213|       | *    1.0.2       source version)   10002  is 2.V where V is the source code
  214|       | *    1.0.2a-b                      10003  version, except as noted.
  215|       | *    1.0.3                         10003
  216|       | *    1.0.3a-d                      10004
  217|       | *    1.0.4                         10004
  218|       | *    1.0.4a-f                      10005
  219|       | *    1.0.5 (+ 2 patches)           10005
  220|       | *    1.0.5a-d                      10006
  221|       | *    1.0.5e-r                      10100 (not source compatible)
  222|       | *    1.0.5s-v                      10006 (not binary compatible)
  223|       | *    1.0.6 (+ 3 patches)           10006 (still binary incompatible)
  224|       | *    1.0.6d-f                      10007 (still binary incompatible)
  225|       | *    1.0.6g                        10007
  226|       | *    1.0.6h                        10007  10.6h (testing xy.z so-numbering)
  227|       | *    1.0.6i                        10007  10.6i
  228|       | *    1.0.6j                        10007  2.1.0.6j (incompatible with 1.0.0)
  229|       | *    1.0.7beta11-14        DLLNUM  10007  2.1.0.7beta11-14 (binary compatible)
  230|       | *    1.0.7beta15-18           1    10007  2.1.0.7beta15-18 (binary compatible)
  231|       | *    1.0.7rc1-2               1    10007  2.1.0.7rc1-2 (binary compatible)
  232|       | *    1.0.7                    1    10007  (still compatible)
  233|       | *    ...
  234|       | *    1.0.69                  10    10069  10.so.0.69[.0]
  235|       | *    ...
  236|       | *    1.2.59                  13    10259  12.so.0.59[.0]
  237|       | *    ...
  238|       | *    1.4.20                  14    10420  14.so.0.20[.0]
  239|       | *    ...
  240|       | *    1.5.30                  15    10530  15.so.15.30[.0]
  241|       | *    ...
  242|       | *    1.6.43                  16    10643  16.so.16.43[.0]
  243|       | *
  244|       | *    Henceforth the source version will match the shared-library major and
  245|       | *    minor numbers; the shared-library major version number will be used for
  246|       | *    changes in backward compatibility, as it is intended.
  247|       | *    The PNG_LIBPNG_VER macro, which is not used within libpng but is
  248|       | *    available for applications, is an unsigned integer of the form XYYZZ
  249|       | *    corresponding to the source version X.Y.Z (leading zeros in Y and Z).
  250|       | *    Beta versions were given the previous public release number plus a
  251|       | *    letter, until version 1.0.6j; from then on they were given the upcoming
  252|       | *    public release number plus "betaNN" or "rcNN".
  253|       | *
  254|       | *    Binary incompatibility exists only when applications make direct access
  255|       | *    to the info_ptr or png_ptr members through png.h, and the compiled
  256|       | *    application is loaded with a different version of the library.
  257|       | *
  258|       | * See libpng.txt or libpng.3 for more information.  The PNG specification
  259|       | * is available as a W3C Recommendation and as an ISO/IEC Standard; see
  260|       | * <https://www.w3.org/TR/2003/REC-PNG-20031110/>
  261|       | */
  262|       |
  263|       |#ifndef PNG_H
  264|       |#define PNG_H
  265|       |
  266|       |/* This is not the place to learn how to use libpng. The file libpng-manual.txt
  267|       | * describes how to use libpng, and the file example.c summarizes it
  268|       | * with some code on which to build.  This file is useful for looking
  269|       | * at the actual function definitions and structure components.  If that
  270|       | * file has been stripped from your copy of libpng, you can find it at
  271|       | * <http://www.libpng.org/pub/png/libpng-manual.txt>
  272|       | *
  273|       | * If you just need to read a PNG file and don't want to read the documentation
  274|       | * skip to the end of this file and read the section entitled 'simplified API'.
  275|       | */
  276|       |
  277|       |/* Version information for png.h - this should match the version in png.c */
  278|    374|#define PNG_LIBPNG_VER_STRING "1.6.44.git"
  279|       |#define PNG_HEADER_VERSION_STRING " libpng version " PNG_LIBPNG_VER_STRING "\n"
  280|       |
  281|       |/* The versions of shared library builds should stay in sync, going forward */
  282|       |#define PNG_LIBPNG_VER_SHAREDLIB 16
  283|       |#define PNG_LIBPNG_VER_SONUM     PNG_LIBPNG_VER_SHAREDLIB /* [Deprecated] */
  284|       |#define PNG_LIBPNG_VER_DLLNUM    PNG_LIBPNG_VER_SHAREDLIB /* [Deprecated] */
  285|       |
  286|       |/* These should match the first 3 components of PNG_LIBPNG_VER_STRING: */
  287|       |#define PNG_LIBPNG_VER_MAJOR   1
  288|       |#define PNG_LIBPNG_VER_MINOR   6
  289|       |#define PNG_LIBPNG_VER_RELEASE 44
  290|       |
  291|       |/* This should be zero for a public release, or non-zero for a
  292|       | * development version.
  293|       | */
  294|       |#define PNG_LIBPNG_VER_BUILD 1
  295|       |
  296|       |/* Release Status */
  297|       |#define PNG_LIBPNG_BUILD_ALPHA               1
  298|       |#define PNG_LIBPNG_BUILD_BETA                2
  299|       |#define PNG_LIBPNG_BUILD_RC                  3
  300|       |#define PNG_LIBPNG_BUILD_STABLE              4
  301|       |#define PNG_LIBPNG_BUILD_RELEASE_STATUS_MASK 7
  302|       |
  303|       |/* Release-Specific Flags */
  304|       |#define PNG_LIBPNG_BUILD_PATCH    8 /* Can be OR'ed with
  305|       |                                       PNG_LIBPNG_BUILD_STABLE only */
  306|       |#define PNG_LIBPNG_BUILD_PRIVATE 16 /* Cannot be OR'ed with
  307|       |                                       PNG_LIBPNG_BUILD_SPECIAL */
  308|       |#define PNG_LIBPNG_BUILD_SPECIAL 32 /* Cannot be OR'ed with
  309|       |                                       PNG_LIBPNG_BUILD_PRIVATE */
  310|       |
  311|       |#define PNG_LIBPNG_BUILD_BASE_TYPE PNG_LIBPNG_BUILD_BETA
  312|       |
  313|       |/* Careful here.  At one time, Guy wanted to use 082, but that
  314|       | * would be octal.  We must not include leading zeros.
  315|       | * Versions 0.7 through 1.0.0 were in the range 0 to 100 here
  316|       | * (only version 1.0.0 was mis-numbered 100 instead of 10000).
  317|       | * From version 1.0.1 it is:
  318|       | * XXYYZZ, where XX=major, YY=minor, ZZ=release
  319|       | */
  320|       |#define PNG_LIBPNG_VER 10644 /* 1.6.44.git */
  321|       |
  322|       |/* Library configuration: these options cannot be changed after
  323|       | * the library has been built.
  324|       | */
  325|       |#ifndef PNGLCONF_H
  326|       |/* If pnglibconf.h is missing, you can
  327|       | * copy scripts/pnglibconf.h.prebuilt to pnglibconf.h
  328|       | */
  329|       |#   include "pnglibconf.h"
  330|       |#endif
  331|       |
  332|       |#ifndef PNG_VERSION_INFO_ONLY
  333|       |/* Machine specific configuration. */
  334|       |#  include "pngconf.h"
  335|       |#endif
  336|       |
  337|       |/*
  338|       | * Added at libpng-1.2.8
  339|       | *
  340|       | * Ref MSDN: Private as priority over Special
  341|       | * VS_FF_PRIVATEBUILD File *was not* built using standard release
  342|       | * procedures. If this value is given, the StringFileInfo block must
  343|       | * contain a PrivateBuild string.
  344|       | *
  345|       | * VS_FF_SPECIALBUILD File *was* built by the original company using
  346|       | * standard release procedures but is a variation of the standard
  347|       | * file of the same version number. If this value is given, the
  348|       | * StringFileInfo block must contain a SpecialBuild string.
  349|       | */
  350|       |
  351|       |#ifdef PNG_USER_PRIVATEBUILD /* From pnglibconf.h */
  352|       |#  define PNG_LIBPNG_BUILD_TYPE \
  353|       |       (PNG_LIBPNG_BUILD_BASE_TYPE | PNG_LIBPNG_BUILD_PRIVATE)
  354|       |#else
  355|       |#  ifdef PNG_LIBPNG_SPECIALBUILD
  356|       |#    define PNG_LIBPNG_BUILD_TYPE \
  357|       |         (PNG_LIBPNG_BUILD_BASE_TYPE | PNG_LIBPNG_BUILD_SPECIAL)
  358|       |#  else
  359|       |#    define PNG_LIBPNG_BUILD_TYPE (PNG_LIBPNG_BUILD_BASE_TYPE)
  360|       |#  endif
  361|       |#endif
  362|       |
  363|       |#ifndef PNG_VERSION_INFO_ONLY
  364|       |
  365|       |/* Inhibit C++ name-mangling for libpng functions but not for system calls. */
  366|       |#ifdef __cplusplus
  367|       |extern "C" {
  368|       |#endif /* __cplusplus */
  369|       |
  370|       |/* Version information for C files, stored in png.c.  This had better match
  371|       | * the version above.
  372|       | */
  373|       |#define png_libpng_ver png_get_header_ver(NULL)
  374|       |
  375|       |/* This file is arranged in several sections:
  376|       | *
  377|       | * 1. [omitted]
  378|       | * 2. Any configuration options that can be specified by for the application
  379|       | *    code when it is built.  (Build time configuration is in pnglibconf.h)
  380|       | * 3. Type definitions (base types are defined in pngconf.h), structure
  381|       | *    definitions.
  382|       | * 4. Exported library functions.
  383|       | * 5. Simplified API.
  384|       | * 6. Implementation options.
  385|       | *
  386|       | * The library source code has additional files (principally pngpriv.h) that
  387|       | * allow configuration of the library.
  388|       | */
  389|       |
  390|       |/* Section 1: [omitted] */
  391|       |
  392|       |/* Section 2: run time configuration
  393|       | * See pnglibconf.h for build time configuration
  394|       | *
  395|       | * Run time configuration allows the application to choose between
  396|       | * implementations of certain arithmetic APIs.  The default is set
  397|       | * at build time and recorded in pnglibconf.h, but it is safe to
  398|       | * override these (and only these) settings.  Note that this won't
  399|       | * change what the library does, only application code, and the
  400|       | * settings can (and probably should) be made on a per-file basis
  401|       | * by setting the #defines before including png.h
  402|       | *
  403|       | * Use macros to read integers from PNG data or use the exported
  404|       | * functions?
  405|       | *   PNG_USE_READ_MACROS: use the macros (see below)  Note that
  406|       | *     the macros evaluate their argument multiple times.
  407|       | *   PNG_NO_USE_READ_MACROS: call the relevant library function.
  408|       | *
  409|       | * Use the alternative algorithm for compositing alpha samples that
  410|       | * does not use division?
  411|       | *   PNG_READ_COMPOSITE_NODIV_SUPPORTED: use the 'no division'
  412|       | *      algorithm.
  413|       | *   PNG_NO_READ_COMPOSITE_NODIV: use the 'division' algorithm.
  414|       | *
  415|       | * How to handle benign errors if PNG_ALLOW_BENIGN_ERRORS is
  416|       | * false?
  417|       | *   PNG_ALLOW_BENIGN_ERRORS: map calls to the benign error
  418|       | *      APIs to png_warning.
  419|       | * Otherwise the calls are mapped to png_error.
  420|       | */
  421|       |
  422|       |/* Section 3: type definitions, including structures and compile time
  423|       | * constants.
  424|       | * See pngconf.h for base types that vary by machine/system
  425|       | */
  426|       |
  427|       |/* This triggers a compiler error in png.c, if png.c and png.h
  428|       | * do not agree upon the version number.
  429|       | */
  430|       |typedef char* png_libpng_version_1_6_44_git;
  431|       |
  432|       |/* Basic control structions.  Read libpng-manual.txt or libpng.3 for more info.
  433|       | *
  434|       | * png_struct is the cache of information used while reading or writing a single
  435|       | * PNG file.  One of these is always required, although the simplified API
  436|       | * (below) hides the creation and destruction of it.
  437|       | */
  438|       |typedef struct png_struct_def png_struct;
  439|       |typedef const png_struct * png_const_structp;
  440|       |typedef png_struct * png_structp;
  441|       |typedef png_struct * * png_structpp;
  442|       |
  443|       |/* png_info contains information read from or to be written to a PNG file.  One
  444|       | * or more of these must exist while reading or creating a PNG file.  The
  445|       | * information is not used by libpng during read but is used to control what
  446|       | * gets written when a PNG file is created.  "png_get_" function calls read
  447|       | * information during read and "png_set_" functions calls write information
  448|       | * when creating a PNG.
  449|       | * been moved into a separate header file that is not accessible to
  450|       | * applications.  Read libpng-manual.txt or libpng.3 for more info.
  451|       | */
  452|       |typedef struct png_info_def png_info;
  453|       |typedef png_info * png_infop;
  454|       |typedef const png_info * png_const_infop;
  455|       |typedef png_info * * png_infopp;
  456|       |
  457|       |/* Types with names ending 'p' are pointer types.  The corresponding types with
  458|       | * names ending 'rp' are identical pointer types except that the pointer is
  459|       | * marked 'restrict', which means that it is the only pointer to the object
  460|       | * passed to the function.  Applications should not use the 'restrict' types;
  461|       | * it is always valid to pass 'p' to a pointer with a function argument of the
  462|       | * corresponding 'rp' type.  Different compilers have different rules with
  463|       | * regard to type matching in the presence of 'restrict'.  For backward
  464|       | * compatibility libpng callbacks never have 'restrict' in their parameters and,
  465|       | * consequentially, writing portable application code is extremely difficult if
  466|       | * an attempt is made to use 'restrict'.
  467|       | */
  468|       |typedef png_struct * PNG_RESTRICT png_structrp;
  469|       |typedef const png_struct * PNG_RESTRICT png_const_structrp;
  470|       |typedef png_info * PNG_RESTRICT png_inforp;
  471|       |typedef const png_info * PNG_RESTRICT png_const_inforp;
  472|       |
  473|       |/* Three color definitions.  The order of the red, green, and blue, (and the
  474|       | * exact size) is not important, although the size of the fields need to
  475|       | * be png_byte or png_uint_16 (as defined below).
  476|       | */
  477|       |typedef struct png_color_struct
  478|       |{
  479|       |   png_byte red;
  480|       |   png_byte green;
  481|       |   png_byte blue;
  482|       |} png_color;
  483|       |typedef png_color * png_colorp;
  484|       |typedef const png_color * png_const_colorp;
  485|       |typedef png_color * * png_colorpp;
  486|       |
  487|       |typedef struct png_color_16_struct
  488|       |{
  489|       |   png_byte index;    /* used for palette files */
  490|       |   png_uint_16 red;   /* for use in red green blue files */
  491|       |   png_uint_16 green;
  492|       |   png_uint_16 blue;
  493|       |   png_uint_16 gray;  /* for use in grayscale files */
  494|       |} png_color_16;
  495|       |typedef png_color_16 * png_color_16p;
  496|       |typedef const png_color_16 * png_const_color_16p;
  497|       |typedef png_color_16 * * png_color_16pp;
  498|       |
  499|       |typedef struct png_color_8_struct
  500|       |{
  501|       |   png_byte red;   /* for use in red green blue files */
  502|       |   png_byte green;
  503|       |   png_byte blue;
  504|       |   png_byte gray;  /* for use in grayscale files */
  505|       |   png_byte alpha; /* for alpha channel files */
  506|       |} png_color_8;
  507|       |typedef png_color_8 * png_color_8p;
  508|       |typedef const png_color_8 * png_const_color_8p;
  509|       |typedef png_color_8 * * png_color_8pp;
  510|       |
  511|       |/*
  512|       | * The following two structures are used for the in-core representation
  513|       | * of sPLT chunks.
  514|       | */
  515|       |typedef struct png_sPLT_entry_struct
  516|       |{
  517|       |   png_uint_16 red;
  518|       |   png_uint_16 green;
  519|       |   png_uint_16 blue;
  520|       |   png_uint_16 alpha;
  521|       |   png_uint_16 frequency;
  522|       |} png_sPLT_entry;
  523|       |typedef png_sPLT_entry * png_sPLT_entryp;
  524|       |typedef const png_sPLT_entry * png_const_sPLT_entryp;
  525|       |typedef png_sPLT_entry * * png_sPLT_entrypp;
  526|       |
  527|       |/*  When the depth of the sPLT palette is 8 bits, the color and alpha samples
  528|       | *  occupy the LSB of their respective members, and the MSB of each member
  529|       | *  is zero-filled.  The frequency member always occupies the full 16 bits.
  530|       | */
  531|       |
  532|       |typedef struct png_sPLT_struct
  533|       |{
  534|       |   png_charp name;           /* palette name */
  535|       |   png_byte depth;           /* depth of palette samples */
  536|       |   png_sPLT_entryp entries;  /* palette entries */
  537|       |   png_int_32 nentries;      /* number of palette entries */
  538|       |} png_sPLT_t;
  539|       |typedef png_sPLT_t * png_sPLT_tp;
  540|       |typedef const png_sPLT_t * png_const_sPLT_tp;
  541|       |typedef png_sPLT_t * * png_sPLT_tpp;
  542|       |
  543|       |#ifdef PNG_TEXT_SUPPORTED
  544|       |/* png_text holds the contents of a text/ztxt/itxt chunk in a PNG file,
  545|       | * and whether that contents is compressed or not.  The "key" field
  546|       | * points to a regular zero-terminated C string.  The "text" fields can be a
  547|       | * regular C string, an empty string, or a NULL pointer.
  548|       | * However, the structure returned by png_get_text() will always contain
  549|       | * the "text" field as a regular zero-terminated C string (possibly
  550|       | * empty), never a NULL pointer, so it can be safely used in printf() and
  551|       | * other string-handling functions.  Note that the "itxt_length", "lang", and
  552|       | * "lang_key" members of the structure only exist when the library is built
  553|       | * with iTXt chunk support.  Prior to libpng-1.4.0 the library was built by
  554|       | * default without iTXt support. Also note that when iTXt *is* supported,
  555|       | * the "lang" and "lang_key" fields contain NULL pointers when the
  556|       | * "compression" field contains * PNG_TEXT_COMPRESSION_NONE or
  557|       | * PNG_TEXT_COMPRESSION_zTXt. Note that the "compression value" is not the
  558|       | * same as what appears in the PNG tEXt/zTXt/iTXt chunk's "compression flag"
  559|       | * which is always 0 or 1, or its "compression method" which is always 0.
  560|       | */
  561|       |typedef struct png_text_struct
  562|       |{
  563|       |   int  compression;       /* compression value:
  564|       |                             -1: tEXt, none
  565|       |                              0: zTXt, deflate
  566|       |                              1: iTXt, none
  567|       |                              2: iTXt, deflate  */
  568|       |   png_charp key;          /* keyword, 1-79 character description of "text" */
  569|       |   png_charp text;         /* comment, may be an empty string (ie "")
  570|       |                              or a NULL pointer */
  571|       |   size_t text_length;     /* length of the text string */
  572|       |   size_t itxt_length;     /* length of the itxt string */
  573|       |   png_charp lang;         /* language code, 0-79 characters
  574|       |                              or a NULL pointer */
  575|       |   png_charp lang_key;     /* keyword translated UTF-8 string, 0 or more
  576|       |                              chars or a NULL pointer */
  577|       |} png_text;
  578|       |typedef png_text * png_textp;
  579|       |typedef const png_text * png_const_textp;
  580|       |typedef png_text * * png_textpp;
  581|       |#endif
  582|       |
  583|       |/* Supported compression types for text in PNG files (tEXt, and zTXt).
  584|       | * The values of the PNG_TEXT_COMPRESSION_ defines should NOT be changed. */
  585|       |#define PNG_TEXT_COMPRESSION_NONE_WR -3
  586|       |#define PNG_TEXT_COMPRESSION_zTXt_WR -2
  587|       |#define PNG_TEXT_COMPRESSION_NONE    -1
  588|       |#define PNG_TEXT_COMPRESSION_zTXt     0
  589|       |#define PNG_ITXT_COMPRESSION_NONE     1
  590|       |#define PNG_ITXT_COMPRESSION_zTXt     2
  591|       |#define PNG_TEXT_COMPRESSION_LAST     3  /* Not a valid value */
  592|       |
  593|       |/* png_time is a way to hold the time in an machine independent way.
  594|       | * Two conversions are provided, both from time_t and struct tm.  There
  595|       | * is no portable way to convert to either of these structures, as far
  596|       | * as I know.  If you know of a portable way, send it to me.  As a side
  597|       | * note - PNG has always been Year 2000 compliant!
  598|       | */
  599|       |typedef struct png_time_struct
  600|       |{
  601|       |   png_uint_16 year; /* full year, as in, 1995 */
  602|       |   png_byte month;   /* month of year, 1 - 12 */
  603|       |   png_byte day;     /* day of month, 1 - 31 */
  604|       |   png_byte hour;    /* hour of day, 0 - 23 */
  605|       |   png_byte minute;  /* minute of hour, 0 - 59 */
  606|       |   png_byte second;  /* second of minute, 0 - 60 (for leap seconds) */
  607|       |} png_time;
  608|       |typedef png_time * png_timep;
  609|       |typedef const png_time * png_const_timep;
  610|       |typedef png_time * * png_timepp;
  611|       |
  612|       |#if defined(PNG_STORE_UNKNOWN_CHUNKS_SUPPORTED) ||\
  613|       |   defined(PNG_USER_CHUNKS_SUPPORTED)
  614|       |/* png_unknown_chunk is a structure to hold queued chunks for which there is
  615|       | * no specific support.  The idea is that we can use this to queue
  616|       | * up private chunks for output even though the library doesn't actually
  617|       | * know about their semantics.
  618|       | *
  619|       | * The data in the structure is set by libpng on read and used on write.
  620|       | */
  621|       |typedef struct png_unknown_chunk_t
  622|       |{
  623|       |   png_byte name[5]; /* Textual chunk name with '\0' terminator */
  624|       |   png_byte *data;   /* Data, should not be modified on read! */
  625|       |   size_t size;
  626|       |
  627|       |   /* On write 'location' must be set using the flag values listed below.
  628|       |    * Notice that on read it is set by libpng however the values stored have
  629|       |    * more bits set than are listed below.  Always treat the value as a
  630|       |    * bitmask.  On write set only one bit - setting multiple bits may cause the
  631|       |    * chunk to be written in multiple places.
  632|       |    */
  633|       |   png_byte location; /* mode of operation at read time */
  634|       |}
  635|       |png_unknown_chunk;
  636|       |
  637|       |typedef png_unknown_chunk * png_unknown_chunkp;
  638|       |typedef const png_unknown_chunk * png_const_unknown_chunkp;
  639|       |typedef png_unknown_chunk * * png_unknown_chunkpp;
  640|       |#endif
  641|       |
  642|       |/* Flag values for the unknown chunk location byte. */
  643|       |#define PNG_HAVE_IHDR  0x01
  644|       |#define PNG_HAVE_PLTE  0x02
  645|       |#define PNG_AFTER_IDAT 0x08
  646|       |
  647|       |/* Maximum positive integer used in PNG is (2^31)-1 */
  648|       |#define PNG_UINT_31_MAX ((png_uint_32)0x7fffffffL)
  649|       |#define PNG_UINT_32_MAX ((png_uint_32)(-1))
  650|       |#define PNG_SIZE_MAX ((size_t)(-1))
  651|       |
  652|       |/* These are constants for fixed point values encoded in the
  653|       | * PNG specification manner (x100000)
  654|       | */
  655|       |#define PNG_FP_1    100000
  656|       |#define PNG_FP_HALF  50000
  657|       |#define PNG_FP_MAX  ((png_fixed_point)0x7fffffffL)
  658|       |#define PNG_FP_MIN  (-PNG_FP_MAX)
  659|       |
  660|       |/* These describe the color_type field in png_info. */
  661|       |/* color type masks */
  662|       |#define PNG_COLOR_MASK_PALETTE    1
  663|       |#define PNG_COLOR_MASK_COLOR      2
  664|       |#define PNG_COLOR_MASK_ALPHA      4
  665|       |
  666|       |/* color types.  Note that not all combinations are legal */
  667|       |#define PNG_COLOR_TYPE_GRAY 0
  668|       |#define PNG_COLOR_TYPE_PALETTE  (PNG_COLOR_MASK_COLOR | PNG_COLOR_MASK_PALETTE)
  669|       |#define PNG_COLOR_TYPE_RGB        (PNG_COLOR_MASK_COLOR)
  670|       |#define PNG_COLOR_TYPE_RGB_ALPHA  (PNG_COLOR_MASK_COLOR | PNG_COLOR_MASK_ALPHA)
  671|       |#define PNG_COLOR_TYPE_GRAY_ALPHA (PNG_COLOR_MASK_ALPHA)
  672|       |/* aliases */
  673|       |#define PNG_COLOR_TYPE_RGBA  PNG_COLOR_TYPE_RGB_ALPHA
  674|       |#define PNG_COLOR_TYPE_GA  PNG_COLOR_TYPE_GRAY_ALPHA
  675|       |
  676|       |/* This is for compression type. PNG 1.0-1.2 only define the single type. */
  677|       |#define PNG_COMPRESSION_TYPE_BASE 0 /* Deflate method 8, 32K window */
  678|       |#define PNG_COMPRESSION_TYPE_DEFAULT PNG_COMPRESSION_TYPE_BASE
  679|       |
  680|       |/* This is for filter type. PNG 1.0-1.2 only define the single type. */
  681|       |#define PNG_FILTER_TYPE_BASE      0 /* Single row per-byte filtering */
  682|       |#define PNG_INTRAPIXEL_DIFFERENCING 64 /* Used only in MNG datastreams */
  683|       |#define PNG_FILTER_TYPE_DEFAULT   PNG_FILTER_TYPE_BASE
  684|       |
  685|       |/* These are for the interlacing type.  These values should NOT be changed. */
  686|    356|#define PNG_INTERLACE_NONE        0 /* Non-interlaced image */
  687|     13|#define PNG_INTERLACE_ADAM7       1 /* Adam7 interlacing */
  688|       |#define PNG_INTERLACE_LAST        2 /* Not a valid value */
  689|       |
  690|       |/* These are for the oFFs chunk.  These values should NOT be changed. */
  691|       |#define PNG_OFFSET_PIXEL          0 /* Offset in pixels */
  692|       |#define PNG_OFFSET_MICROMETER     1 /* Offset in micrometers (1/10^6 meter) */
  693|       |#define PNG_OFFSET_LAST           2 /* Not a valid value */
  694|       |
  695|       |/* These are for the pCAL chunk.  These values should NOT be changed. */
  696|       |#define PNG_EQUATION_LINEAR       0 /* Linear transformation */
  697|       |#define PNG_EQUATION_BASE_E       1 /* Exponential base e transform */
  698|       |#define PNG_EQUATION_ARBITRARY    2 /* Arbitrary base exponential transform */
  699|       |#define PNG_EQUATION_HYPERBOLIC   3 /* Hyperbolic sine transformation */
  700|       |#define PNG_EQUATION_LAST         4 /* Not a valid value */
  701|       |
  702|       |/* These are for the sCAL chunk.  These values should NOT be changed. */
  703|       |#define PNG_SCALE_UNKNOWN         0 /* unknown unit (image scale) */
  704|       |#define PNG_SCALE_METER           1 /* meters per pixel */
  705|       |#define PNG_SCALE_RADIAN          2 /* radians per pixel */
  706|       |#define PNG_SCALE_LAST            3 /* Not a valid value */
  707|       |
  708|       |/* These are for the pHYs chunk.  These values should NOT be changed. */
  709|       |#define PNG_RESOLUTION_UNKNOWN    0 /* pixels/unknown unit (aspect ratio) */
  710|       |#define PNG_RESOLUTION_METER      1 /* pixels/meter */
  711|       |#define PNG_RESOLUTION_LAST       2 /* Not a valid value */
  712|       |
  713|       |/* These are for the sRGB chunk.  These values should NOT be changed. */
  714|       |#define PNG_sRGB_INTENT_PERCEPTUAL 0
  715|       |#define PNG_sRGB_INTENT_RELATIVE   1
  716|       |#define PNG_sRGB_INTENT_SATURATION 2
  717|       |#define PNG_sRGB_INTENT_ABSOLUTE   3
  718|       |#define PNG_sRGB_INTENT_LAST       4 /* Not a valid value */
  719|       |
  720|       |/* This is for text chunks */
  721|       |#define PNG_KEYWORD_MAX_LENGTH     79
  722|       |
  723|       |/* Maximum number of entries in PLTE/sPLT/tRNS arrays */
  724|       |#define PNG_MAX_PALETTE_LENGTH    256
  725|       |
  726|       |/* These determine if an ancillary chunk's data has been successfully read
  727|       | * from the PNG header, or if the application has filled in the corresponding
  728|       | * data in the info_struct to be written into the output file.  The values
  729|       | * of the PNG_INFO_<chunk> defines should NOT be changed.
  730|       | */
  731|       |#define PNG_INFO_gAMA 0x0001U
  732|       |#define PNG_INFO_sBIT 0x0002U
  733|       |#define PNG_INFO_cHRM 0x0004U
  734|       |#define PNG_INFO_PLTE 0x0008U
  735|       |#define PNG_INFO_tRNS 0x0010U
  736|       |#define PNG_INFO_bKGD 0x0020U
  737|       |#define PNG_INFO_hIST 0x0040U
  738|       |#define PNG_INFO_pHYs 0x0080U
  739|       |#define PNG_INFO_oFFs 0x0100U
  740|       |#define PNG_INFO_tIME 0x0200U
  741|       |#define PNG_INFO_pCAL 0x0400U
  742|       |#define PNG_INFO_sRGB 0x0800U  /* GR-P, 0.96a */
  743|       |#define PNG_INFO_iCCP 0x1000U  /* ESR, 1.0.6 */
  744|       |#define PNG_INFO_sPLT 0x2000U  /* ESR, 1.0.6 */
  745|       |#define PNG_INFO_sCAL 0x4000U  /* ESR, 1.0.6 */
  746|       |#define PNG_INFO_IDAT 0x8000U  /* ESR, 1.0.6 */
  747|       |#define PNG_INFO_eXIf 0x10000U /* GR-P, 1.6.31 */
  748|       |
  749|       |/* This is used for the transformation routines, as some of them
  750|       | * change these values for the row.  It also should enable using
  751|       | * the routines for other purposes.
  752|       | */
  753|       |typedef struct png_row_info_struct
  754|       |{
  755|       |   png_uint_32 width;    /* width of row */
  756|       |   size_t rowbytes;      /* number of bytes in row */
  757|       |   png_byte color_type;  /* color type of row */
  758|       |   png_byte bit_depth;   /* bit depth of row */
  759|       |   png_byte channels;    /* number of channels (1, 2, 3, or 4) */
  760|       |   png_byte pixel_depth; /* bits per pixel (depth * channels) */
  761|       |} png_row_info;
  762|       |
  763|       |typedef png_row_info * png_row_infop;
  764|       |typedef png_row_info * * png_row_infopp;
  765|       |
  766|       |/* These are the function types for the I/O functions and for the functions
  767|       | * that allow the user to override the default I/O functions with his or her
  768|       | * own.  The png_error_ptr type should match that of user-supplied warning
  769|       | * and error functions, while the png_rw_ptr type should match that of the
  770|       | * user read/write data functions.  Note that the 'write' function must not
  771|       | * modify the buffer it is passed. The 'read' function, on the other hand, is
  772|       | * expected to return the read data in the buffer.
  773|       | */
  774|       |typedef PNG_CALLBACK(void, *png_error_ptr, (png_structp, png_const_charp));
  775|       |typedef PNG_CALLBACK(void, *png_rw_ptr, (png_structp, png_bytep, size_t));
  776|       |typedef PNG_CALLBACK(void, *png_flush_ptr, (png_structp));
  777|       |typedef PNG_CALLBACK(void, *png_read_status_ptr, (png_structp, png_uint_32,
  778|       |    int));
  779|       |typedef PNG_CALLBACK(void, *png_write_status_ptr, (png_structp, png_uint_32,
  780|       |    int));
  781|       |
  782|       |#ifdef PNG_PROGRESSIVE_READ_SUPPORTED
  783|       |typedef PNG_CALLBACK(void, *png_progressive_info_ptr, (png_structp, png_infop));
  784|       |typedef PNG_CALLBACK(void, *png_progressive_end_ptr, (png_structp, png_infop));
  785|       |
  786|       |/* The following callback receives png_uint_32 row_number, int pass for the
  787|       | * png_bytep data of the row.  When transforming an interlaced image the
  788|       | * row number is the row number within the sub-image of the interlace pass, so
  789|       | * the value will increase to the height of the sub-image (not the full image)
  790|       | * then reset to 0 for the next pass.
  791|       | *
  792|       | * Use PNG_ROW_FROM_PASS_ROW(row, pass) and PNG_COL_FROM_PASS_COL(col, pass) to
  793|       | * find the output pixel (x,y) given an interlaced sub-image pixel
  794|       | * (row,col,pass).  (See below for these macros.)
  795|       | */
  796|       |typedef PNG_CALLBACK(void, *png_progressive_row_ptr, (png_structp, png_bytep,
  797|       |    png_uint_32, int));
  798|       |#endif
  799|       |
  800|       |#if defined(PNG_READ_USER_TRANSFORM_SUPPORTED) || \
  801|       |    defined(PNG_WRITE_USER_TRANSFORM_SUPPORTED)
  802|       |typedef PNG_CALLBACK(void, *png_user_transform_ptr, (png_structp, png_row_infop,
  803|       |    png_bytep));
  804|       |#endif
  805|       |
  806|       |#ifdef PNG_USER_CHUNKS_SUPPORTED
  807|       |typedef PNG_CALLBACK(int, *png_user_chunk_ptr, (png_structp,
  808|       |    png_unknown_chunkp));
  809|       |#endif
  810|       |#ifdef PNG_UNKNOWN_CHUNKS_SUPPORTED
  811|       |/* not used anywhere */
  812|       |/* typedef PNG_CALLBACK(void, *png_unknown_chunk_ptr, (png_structp)); */
  813|       |#endif
  814|       |
  815|       |#ifdef PNG_SETJMP_SUPPORTED
  816|       |/* This must match the function definition in <setjmp.h>, and the application
  817|       | * must include this before png.h to obtain the definition of jmp_buf.  The
  818|       | * function is required to be PNG_NORETURN, but this is not checked.  If the
  819|       | * function does return the application will crash via an abort() or similar
  820|       | * system level call.
  821|       | *
  822|       | * If you get a warning here while building the library you may need to make
  823|       | * changes to ensure that pnglibconf.h records the calling convention used by
  824|       | * your compiler.  This may be very difficult - try using a different compiler
  825|       | * to build the library!
  826|       | */
  827|       |PNG_FUNCTION(void, (PNGCAPI *png_longjmp_ptr), PNGARG((jmp_buf, int)), typedef);
  828|       |#endif
  829|       |
  830|       |/* Transform masks for the high-level interface */
  831|       |#define PNG_TRANSFORM_IDENTITY       0x0000    /* read and write */
  832|       |#define PNG_TRANSFORM_STRIP_16       0x0001    /* read only */
  833|       |#define PNG_TRANSFORM_STRIP_ALPHA    0x0002    /* read only */
  834|       |#define PNG_TRANSFORM_PACKING        0x0004    /* read and write */
  835|       |#define PNG_TRANSFORM_PACKSWAP       0x0008    /* read and write */
  836|       |#define PNG_TRANSFORM_EXPAND         0x0010    /* read only */
  837|       |#define PNG_TRANSFORM_INVERT_MONO    0x0020    /* read and write */
  838|       |#define PNG_TRANSFORM_SHIFT          0x0040    /* read and write */
  839|       |#define PNG_TRANSFORM_BGR            0x0080    /* read and write */
  840|       |#define PNG_TRANSFORM_SWAP_ALPHA     0x0100    /* read and write */
  841|       |#define PNG_TRANSFORM_SWAP_ENDIAN    0x0200    /* read and write */
  842|       |#define PNG_TRANSFORM_INVERT_ALPHA   0x0400    /* read and write */
  843|       |#define PNG_TRANSFORM_STRIP_FILLER   0x0800    /* write only */
  844|       |/* Added to libpng-1.2.34 */
  845|       |#define PNG_TRANSFORM_STRIP_FILLER_BEFORE PNG_TRANSFORM_STRIP_FILLER
  846|       |#define PNG_TRANSFORM_STRIP_FILLER_AFTER 0x1000 /* write only */
  847|       |/* Added to libpng-1.4.0 */
  848|       |#define PNG_TRANSFORM_GRAY_TO_RGB   0x2000      /* read only */
  849|       |/* Added to libpng-1.5.4 */
  850|       |#define PNG_TRANSFORM_EXPAND_16     0x4000      /* read only */
  851|       |#if ~0U > 0xffffU /* or else this might break on a 16-bit machine */
  852|       |#define PNG_TRANSFORM_SCALE_16      0x8000      /* read only */
  853|       |#endif
  854|       |
  855|       |/* Flags for MNG supported features */
  856|       |#define PNG_FLAG_MNG_EMPTY_PLTE     0x01
  857|       |#define PNG_FLAG_MNG_FILTER_64      0x04
  858|       |#define PNG_ALL_MNG_FEATURES        0x05
  859|       |
  860|       |/* NOTE: prior to 1.5 these functions had no 'API' style declaration,
  861|       | * this allowed the zlib default functions to be used on Windows
  862|       | * platforms.  In 1.5 the zlib default malloc (which just calls malloc and
  863|       | * ignores the first argument) should be completely compatible with the
  864|       | * following.
  865|       | */
  866|       |typedef PNG_CALLBACK(png_voidp, *png_malloc_ptr, (png_structp,
  867|       |    png_alloc_size_t));
  868|       |typedef PNG_CALLBACK(void, *png_free_ptr, (png_structp, png_voidp));
  869|       |
  870|       |/* Section 4: exported functions
  871|       | * Here are the function definitions most commonly used.  This is not
  872|       | * the place to find out how to use libpng.  See libpng-manual.txt for the
  873|       | * full explanation, see example.c for the summary.  This just provides
  874|       | * a simple one line description of the use of each function.
  875|       | *
  876|       | * The PNG_EXPORT() and PNG_EXPORTA() macros used below are defined in
  877|       | * pngconf.h and in the *.dfn files in the scripts directory.
  878|       | *
  879|       | *   PNG_EXPORT(ordinal, type, name, (args));
  880|       | *
  881|       | *       ordinal:    ordinal that is used while building
  882|       | *                   *.def files. The ordinal value is only
  883|       | *                   relevant when preprocessing png.h with
  884|       | *                   the *.dfn files for building symbol table
  885|       | *                   entries, and are removed by pngconf.h.
  886|       | *       type:       return type of the function
  887|       | *       name:       function name
  888|       | *       args:       function arguments, with types
  889|       | *
  890|       | * When we wish to append attributes to a function prototype we use
  891|       | * the PNG_EXPORTA() macro instead.
  892|       | *
  893|       | *   PNG_EXPORTA(ordinal, type, name, (args), attributes);
  894|       | *
  895|       | *       ordinal, type, name, and args: same as in PNG_EXPORT().
  896|       | *       attributes: function attributes
  897|       | */
  898|       |
  899|       |/* Returns the version number of the library */
  900|       |PNG_EXPORT(1, png_uint_32, png_access_version_number, (void));
  901|       |
  902|       |/* Tell lib we have already handled the first <num_bytes> magic bytes.
  903|       | * Handling more than 8 bytes from the beginning of the file is an error.
  904|       | */
  905|       |PNG_EXPORT(2, void, png_set_sig_bytes, (png_structrp png_ptr, int num_bytes));
  906|       |
  907|       |/* Check sig[start] through sig[start + num_to_check - 1] to see if it's a
  908|       | * PNG file.  Returns zero if the supplied bytes match the 8-byte PNG
  909|       | * signature, and non-zero otherwise.  Having num_to_check == 0 or
  910|       | * start > 7 will always fail (i.e. return non-zero).
  911|       | */
  912|       |PNG_EXPORT(3, int, png_sig_cmp, (png_const_bytep sig, size_t start,
  913|       |    size_t num_to_check));
  914|       |
  915|       |/* Simple signature checking function.  This is the same as calling
  916|       | * png_check_sig(sig, n) := (png_sig_cmp(sig, 0, n) == 0).
  917|       | */
  918|       |#define png_check_sig(sig, n) (png_sig_cmp((sig), 0, (n)) == 0) /* DEPRECATED */
  919|       |
  920|       |/* Allocate and initialize png_ptr struct for reading, and any other memory. */
  921|       |PNG_EXPORTA(4, png_structp, png_create_read_struct,
  922|       |    (png_const_charp user_png_ver, png_voidp error_ptr,
  923|       |    png_error_ptr error_fn, png_error_ptr warn_fn),
  924|       |    PNG_ALLOCATED);
  925|       |
  926|       |/* Allocate and initialize png_ptr struct for writing, and any other memory */
  927|       |PNG_EXPORTA(5, png_structp, png_create_write_struct,
  928|       |    (png_const_charp user_png_ver, png_voidp error_ptr, png_error_ptr error_fn,
  929|       |    png_error_ptr warn_fn),
  930|       |    PNG_ALLOCATED);
  931|       |
  932|       |PNG_EXPORT(6, size_t, png_get_compression_buffer_size,
  933|       |    (png_const_structrp png_ptr));
  934|       |
  935|       |PNG_EXPORT(7, void, png_set_compression_buffer_size, (png_structrp png_ptr,
  936|       |    size_t size));
  937|       |
  938|       |/* Moved from pngconf.h in 1.4.0 and modified to ensure setjmp/longjmp
  939|       | * match up.
  940|       | */
  941|       |#ifdef PNG_SETJMP_SUPPORTED
  942|       |/* This function returns the jmp_buf built in to *png_ptr.  It must be
  943|       | * supplied with an appropriate 'longjmp' function to use on that jmp_buf
  944|       | * unless the default error function is overridden in which case NULL is
  945|       | * acceptable.  The size of the jmp_buf is checked against the actual size
  946|       | * allocated by the library - the call will return NULL on a mismatch
  947|       | * indicating an ABI mismatch.
  948|       | */
  949|       |PNG_EXPORT(8, jmp_buf*, png_set_longjmp_fn, (png_structrp png_ptr,
  950|       |    png_longjmp_ptr longjmp_fn, size_t jmp_buf_size));
  951|       |#  define png_jmpbuf(png_ptr) \
  952|       |      (*png_set_longjmp_fn((png_ptr), longjmp, (sizeof (jmp_buf))))
  953|       |#else
  954|       |#  define png_jmpbuf(png_ptr) \
  955|       |      (LIBPNG_WAS_COMPILED_WITH__PNG_NO_SETJMP)
  956|       |#endif
  957|       |/* This function should be used by libpng applications in place of
  958|       | * longjmp(png_ptr->jmpbuf, val).  If longjmp_fn() has been set, it
  959|       | * will use it; otherwise it will call PNG_ABORT().  This function was
  960|       | * added in libpng-1.5.0.
  961|       | */
  962|       |PNG_EXPORTA(9, void, png_longjmp, (png_const_structrp png_ptr, int val),
  963|       |    PNG_NORETURN);
  964|       |
  965|       |#ifdef PNG_READ_SUPPORTED
  966|       |/* Reset the compression stream */
  967|       |PNG_EXPORTA(10, int, png_reset_zstream, (png_structrp png_ptr), PNG_DEPRECATED);
  968|       |#endif
  969|       |
  970|       |/* New functions added in libpng-1.0.2 (not enabled by default until 1.2.0) */
  971|       |#ifdef PNG_USER_MEM_SUPPORTED
  972|       |PNG_EXPORTA(11, png_structp, png_create_read_struct_2,
  973|       |    (png_const_charp user_png_ver, png_voidp error_ptr, png_error_ptr error_fn,
  974|       |    png_error_ptr warn_fn,
  975|       |    png_voidp mem_ptr, png_malloc_ptr malloc_fn, png_free_ptr free_fn),
  976|       |    PNG_ALLOCATED);
  977|       |PNG_EXPORTA(12, png_structp, png_create_write_struct_2,
  978|       |    (png_const_charp user_png_ver, png_voidp error_ptr, png_error_ptr error_fn,
  979|       |    png_error_ptr warn_fn,
  980|       |    png_voidp mem_ptr, png_malloc_ptr malloc_fn, png_free_ptr free_fn),
  981|       |    PNG_ALLOCATED);
  982|       |#endif
  983|       |
  984|       |/* Write the PNG file signature. */
  985|       |PNG_EXPORT(13, void, png_write_sig, (png_structrp png_ptr));
  986|       |
  987|       |/* Write a PNG chunk - size, type, (optional) data, CRC. */
  988|       |PNG_EXPORT(14, void, png_write_chunk, (png_structrp png_ptr, png_const_bytep
  989|       |    chunk_name, png_const_bytep data, size_t length));
  990|       |
  991|       |/* Write the start of a PNG chunk - length and chunk name. */
  992|       |PNG_EXPORT(15, void, png_write_chunk_start, (png_structrp png_ptr,
  993|       |    png_const_bytep chunk_name, png_uint_32 length));
  994|       |
  995|       |/* Write the data of a PNG chunk started with png_write_chunk_start(). */
  996|       |PNG_EXPORT(16, void, png_write_chunk_data, (png_structrp png_ptr,
  997|       |    png_const_bytep data, size_t length));
  998|       |
  999|       |/* Finish a chunk started with png_write_chunk_start() (includes CRC). */
 1000|       |PNG_EXPORT(17, void, png_write_chunk_end, (png_structrp png_ptr));
 1001|       |
 1002|       |/* Allocate and initialize the info structure */
 1003|       |PNG_EXPORTA(18, png_infop, png_create_info_struct, (png_const_structrp png_ptr),
 1004|       |    PNG_ALLOCATED);
 1005|       |
 1006|       |/* DEPRECATED: this function allowed init structures to be created using the
 1007|       | * default allocation method (typically malloc).  Use is deprecated in 1.6.0 and
 1008|       | * the API will be removed in the future.
 1009|       | */
 1010|       |PNG_EXPORTA(19, void, png_info_init_3, (png_infopp info_ptr,
 1011|       |    size_t png_info_struct_size), PNG_DEPRECATED);
 1012|       |
 1013|       |/* Writes all the PNG information before the image. */
 1014|       |PNG_EXPORT(20, void, png_write_info_before_PLTE,
 1015|       |    (png_structrp png_ptr, png_const_inforp info_ptr));
 1016|       |PNG_EXPORT(21, void, png_write_info,
 1017|       |    (png_structrp png_ptr, png_const_inforp info_ptr));
 1018|       |
 1019|       |#ifdef PNG_SEQUENTIAL_READ_SUPPORTED
 1020|       |/* Read the information before the actual image data. */
 1021|       |PNG_EXPORT(22, void, png_read_info,
 1022|       |    (png_structrp png_ptr, png_inforp info_ptr));
 1023|       |#endif
 1024|       |
 1025|       |#ifdef PNG_TIME_RFC1123_SUPPORTED
 1026|       |   /* Convert to a US string format: there is no localization support in this
 1027|       |    * routine.  The original implementation used a 29 character buffer in
 1028|       |    * png_struct, this will be removed in future versions.
 1029|       |    */
 1030|       |#if PNG_LIBPNG_VER < 10700
 1031|       |/* To do: remove this from libpng17 (and from libpng17/png.c and pngstruct.h) */
 1032|       |PNG_EXPORTA(23, png_const_charp, png_convert_to_rfc1123, (png_structrp png_ptr,
 1033|       |    png_const_timep ptime),PNG_DEPRECATED);
 1034|       |#endif
 1035|       |PNG_EXPORT(241, int, png_convert_to_rfc1123_buffer, (char out[29],
 1036|       |    png_const_timep ptime));
 1037|       |#endif
 1038|       |
 1039|       |#ifdef PNG_CONVERT_tIME_SUPPORTED
 1040|       |/* Convert from a struct tm to png_time */
 1041|       |PNG_EXPORT(24, void, png_convert_from_struct_tm, (png_timep ptime,
 1042|       |    const struct tm * ttime));
 1043|       |
 1044|       |/* Convert from time_t to png_time.  Uses gmtime() */
 1045|       |PNG_EXPORT(25, void, png_convert_from_time_t, (png_timep ptime, time_t ttime));
 1046|       |#endif /* CONVERT_tIME */
 1047|       |
 1048|       |#ifdef PNG_READ_EXPAND_SUPPORTED
 1049|       |/* Expand data to 24-bit RGB, or 8-bit grayscale, with alpha if available. */
 1050|       |PNG_EXPORT(26, void, png_set_expand, (png_structrp png_ptr));
 1051|       |PNG_EXPORT(27, void, png_set_expand_gray_1_2_4_to_8, (png_structrp png_ptr));
 1052|       |PNG_EXPORT(28, void, png_set_palette_to_rgb, (png_structrp png_ptr));
 1053|       |PNG_EXPORT(29, void, png_set_tRNS_to_alpha, (png_structrp png_ptr));
 1054|       |#endif
 1055|       |
 1056|       |#ifdef PNG_READ_EXPAND_16_SUPPORTED
 1057|       |/* Expand to 16-bit channels, forces conversion of palette to RGB and expansion
 1058|       | * of a tRNS chunk if present.
 1059|       | */
 1060|       |PNG_EXPORT(221, void, png_set_expand_16, (png_structrp png_ptr));
 1061|       |#endif
 1062|       |
 1063|       |#if defined(PNG_READ_BGR_SUPPORTED) || defined(PNG_WRITE_BGR_SUPPORTED)
 1064|       |/* Use blue, green, red order for pixels. */
 1065|       |PNG_EXPORT(30, void, png_set_bgr, (png_structrp png_ptr));
 1066|       |#endif
 1067|       |
 1068|       |#ifdef PNG_READ_GRAY_TO_RGB_SUPPORTED
 1069|       |/* Expand the grayscale to 24-bit RGB if necessary. */
 1070|       |PNG_EXPORT(31, void, png_set_gray_to_rgb, (png_structrp png_ptr));
 1071|       |#endif
 1072|       |
 1073|       |#ifdef PNG_READ_RGB_TO_GRAY_SUPPORTED
 1074|       |/* Reduce RGB to grayscale. */
 1075|       |#define PNG_ERROR_ACTION_NONE  1
 1076|       |#define PNG_ERROR_ACTION_WARN  2
 1077|       |#define PNG_ERROR_ACTION_ERROR 3
 1078|       |#define PNG_RGB_TO_GRAY_DEFAULT (-1)/*for red/green coefficients*/
 1079|       |
 1080|       |PNG_FP_EXPORT(32, void, png_set_rgb_to_gray, (png_structrp png_ptr,
 1081|       |    int error_action, double red, double green))
 1082|       |PNG_FIXED_EXPORT(33, void, png_set_rgb_to_gray_fixed, (png_structrp png_ptr,
 1083|       |    int error_action, png_fixed_point red, png_fixed_point green))
 1084|       |
 1085|       |PNG_EXPORT(34, png_byte, png_get_rgb_to_gray_status, (png_const_structrp
 1086|       |    png_ptr));
 1087|       |#endif
 1088|       |
 1089|       |#ifdef PNG_BUILD_GRAYSCALE_PALETTE_SUPPORTED
 1090|       |PNG_EXPORT(35, void, png_build_grayscale_palette, (int bit_depth,
 1091|       |    png_colorp palette));
 1092|       |#endif
 1093|       |
 1094|       |#ifdef PNG_READ_ALPHA_MODE_SUPPORTED
 1095|       |/* How the alpha channel is interpreted - this affects how the color channels
 1096|       | * of a PNG file are returned to the calling application when an alpha channel,
 1097|       | * or a tRNS chunk in a palette file, is present.
 1098|       | *
 1099|       | * This has no effect on the way pixels are written into a PNG output
 1100|       | * datastream. The color samples in a PNG datastream are never premultiplied
 1101|       | * with the alpha samples.
 1102|       | *
 1103|       | * The default is to return data according to the PNG specification: the alpha
 1104|       | * channel is a linear measure of the contribution of the pixel to the
 1105|       | * corresponding composited pixel, and the color channels are unassociated
 1106|       | * (not premultiplied).  The gamma encoded color channels must be scaled
 1107|       | * according to the contribution and to do this it is necessary to undo
 1108|       | * the encoding, scale the color values, perform the composition and re-encode
 1109|       | * the values.  This is the 'PNG' mode.
 1110|       | *
 1111|       | * The alternative is to 'associate' the alpha with the color information by
 1112|       | * storing color channel values that have been scaled by the alpha.
 1113|       | * image.  These are the 'STANDARD', 'ASSOCIATED' or 'PREMULTIPLIED' modes
 1114|       | * (the latter being the two common names for associated alpha color channels).
 1115|       | *
 1116|       | * For the 'OPTIMIZED' mode, a pixel is treated as opaque only if the alpha
 1117|       | * value is equal to the maximum value.
 1118|       | *
 1119|       | * The final choice is to gamma encode the alpha channel as well.  This is
 1120|       | * broken because, in practice, no implementation that uses this choice
 1121|       | * correctly undoes the encoding before handling alpha composition.  Use this
 1122|       | * choice only if other serious errors in the software or hardware you use
 1123|       | * mandate it; the typical serious error is for dark halos to appear around
 1124|       | * opaque areas of the composited PNG image because of arithmetic overflow.
 1125|       | *
 1126|       | * The API function png_set_alpha_mode specifies which of these choices to use
 1127|       | * with an enumerated 'mode' value and the gamma of the required output:
 1128|       | */
 1129|       |#define PNG_ALPHA_PNG           0 /* according to the PNG standard */
 1130|       |#define PNG_ALPHA_STANDARD      1 /* according to Porter/Duff */
 1131|       |#define PNG_ALPHA_ASSOCIATED    1 /* as above; this is the normal practice */
 1132|       |#define PNG_ALPHA_PREMULTIPLIED 1 /* as above */
 1133|       |#define PNG_ALPHA_OPTIMIZED     2 /* 'PNG' for opaque pixels, else 'STANDARD' */
 1134|       |#define PNG_ALPHA_BROKEN        3 /* the alpha channel is gamma encoded */
 1135|       |
 1136|       |PNG_FP_EXPORT(227, void, png_set_alpha_mode, (png_structrp png_ptr, int mode,
 1137|       |    double output_gamma))
 1138|       |PNG_FIXED_EXPORT(228, void, png_set_alpha_mode_fixed, (png_structrp png_ptr,
 1139|       |    int mode, png_fixed_point output_gamma))
 1140|       |#endif
 1141|       |
 1142|       |#if defined(PNG_GAMMA_SUPPORTED) || defined(PNG_READ_ALPHA_MODE_SUPPORTED)
 1143|       |/* The output_gamma value is a screen gamma in libpng terminology: it expresses
 1144|       | * how to decode the output values, not how they are encoded.
 1145|       | */
 1146|       |#define PNG_DEFAULT_sRGB -1       /* sRGB gamma and color space */
 1147|       |#define PNG_GAMMA_MAC_18 -2       /* Old Mac '1.8' gamma and color space */
 1148|       |#define PNG_GAMMA_sRGB   220000   /* Television standards--matches sRGB gamma */
 1149|       |#define PNG_GAMMA_LINEAR PNG_FP_1 /* Linear */
 1150|       |#endif
 1151|       |
 1152|       |/* The following are examples of calls to png_set_alpha_mode to achieve the
 1153|       | * required overall gamma correction and, where necessary, alpha
 1154|       | * premultiplication.
 1155|       | *
 1156|       | * png_set_alpha_mode(pp, PNG_ALPHA_PNG, PNG_DEFAULT_sRGB);
 1157|       | *    This is the default libpng handling of the alpha channel - it is not
 1158|       | *    pre-multiplied into the color components.  In addition the call states
 1159|       | *    that the output is for a sRGB system and causes all PNG files without gAMA
 1160|       | *    chunks to be assumed to be encoded using sRGB.
 1161|       | *
 1162|       | * png_set_alpha_mode(pp, PNG_ALPHA_PNG, PNG_GAMMA_MAC);
 1163|       | *    In this case the output is assumed to be something like an sRGB conformant
 1164|       | *    display preceded by a power-law lookup table of power 1.45.  This is how
 1165|       | *    early Mac systems behaved.
 1166|       | *
 1167|       | * png_set_alpha_mode(pp, PNG_ALPHA_STANDARD, PNG_GAMMA_LINEAR);
 1168|       | *    This is the classic Jim Blinn approach and will work in academic
 1169|       | *    environments where everything is done by the book.  It has the shortcoming
 1170|       | *    of assuming that input PNG data with no gamma information is linear - this
 1171|       | *    is unlikely to be correct unless the PNG files where generated locally.
 1172|       | *    Most of the time the output precision will be so low as to show
 1173|       | *    significant banding in dark areas of the image.
 1174|       | *
 1175|       | * png_set_expand_16(pp);
 1176|       | * png_set_alpha_mode(pp, PNG_ALPHA_STANDARD, PNG_DEFAULT_sRGB);
 1177|       | *    This is a somewhat more realistic Jim Blinn inspired approach.  PNG files
 1178|       | *    are assumed to have the sRGB encoding if not marked with a gamma value and
 1179|       | *    the output is always 16 bits per component.  This permits accurate scaling
 1180|       | *    and processing of the data.  If you know that your input PNG files were
 1181|       | *    generated locally you might need to replace PNG_DEFAULT_sRGB with the
 1182|       | *    correct value for your system.
 1183|       | *
 1184|       | * png_set_alpha_mode(pp, PNG_ALPHA_OPTIMIZED, PNG_DEFAULT_sRGB);
 1185|       | *    If you just need to composite the PNG image onto an existing background
 1186|       | *    and if you control the code that does this you can use the optimization
 1187|       | *    setting.  In this case you just copy completely opaque pixels to the
 1188|       | *    output.  For pixels that are not completely transparent (you just skip
 1189|       | *    those) you do the composition math using png_composite or png_composite_16
 1190|       | *    below then encode the resultant 8-bit or 16-bit values to match the output
 1191|       | *    encoding.
 1192|       | *
 1193|       | * Other cases
 1194|       | *    If neither the PNG nor the standard linear encoding work for you because
 1195|       | *    of the software or hardware you use then you have a big problem.  The PNG
 1196|       | *    case will probably result in halos around the image.  The linear encoding
 1197|       | *    will probably result in a washed out, too bright, image (it's actually too
 1198|       | *    contrasty.)  Try the ALPHA_OPTIMIZED mode above - this will probably
 1199|       | *    substantially reduce the halos.  Alternatively try:
 1200|       | *
 1201|       | * png_set_alpha_mode(pp, PNG_ALPHA_BROKEN, PNG_DEFAULT_sRGB);
 1202|       | *    This option will also reduce the halos, but there will be slight dark
 1203|       | *    halos round the opaque parts of the image where the background is light.
 1204|       | *    In the OPTIMIZED mode the halos will be light halos where the background
 1205|       | *    is dark.  Take your pick - the halos are unavoidable unless you can get
 1206|       | *    your hardware/software fixed!  (The OPTIMIZED approach is slightly
 1207|       | *    faster.)
 1208|       | *
 1209|       | * When the default gamma of PNG files doesn't match the output gamma.
 1210|       | *    If you have PNG files with no gamma information png_set_alpha_mode allows
 1211|       | *    you to provide a default gamma, but it also sets the output gamma to the
 1212|       | *    matching value.  If you know your PNG files have a gamma that doesn't
 1213|       | *    match the output you can take advantage of the fact that
 1214|       | *    png_set_alpha_mode always sets the output gamma but only sets the PNG
 1215|       | *    default if it is not already set:
 1216|       | *
 1217|       | * png_set_alpha_mode(pp, PNG_ALPHA_PNG, PNG_DEFAULT_sRGB);
 1218|       | * png_set_alpha_mode(pp, PNG_ALPHA_PNG, PNG_GAMMA_MAC);
 1219|       | *    The first call sets both the default and the output gamma values, the
 1220|       | *    second call overrides the output gamma without changing the default.  This
 1221|       | *    is easier than achieving the same effect with png_set_gamma.  You must use
 1222|       | *    PNG_ALPHA_PNG for the first call - internal checking in png_set_alpha will
 1223|       | *    fire if more than one call to png_set_alpha_mode and png_set_background is
 1224|       | *    made in the same read operation, however multiple calls with PNG_ALPHA_PNG
 1225|       | *    are ignored.
 1226|       | */
 1227|       |
 1228|       |#ifdef PNG_READ_STRIP_ALPHA_SUPPORTED
 1229|       |PNG_EXPORT(36, void, png_set_strip_alpha, (png_structrp png_ptr));
 1230|       |#endif
 1231|       |
 1232|       |#if defined(PNG_READ_SWAP_ALPHA_SUPPORTED) || \
 1233|       |    defined(PNG_WRITE_SWAP_ALPHA_SUPPORTED)
 1234|       |PNG_EXPORT(37, void, png_set_swap_alpha, (png_structrp png_ptr));
 1235|       |#endif
 1236|       |
 1237|       |#if defined(PNG_READ_INVERT_ALPHA_SUPPORTED) || \
 1238|       |    defined(PNG_WRITE_INVERT_ALPHA_SUPPORTED)
 1239|       |PNG_EXPORT(38, void, png_set_invert_alpha, (png_structrp png_ptr));
 1240|       |#endif
 1241|       |
 1242|       |#if defined(PNG_READ_FILLER_SUPPORTED) || defined(PNG_WRITE_FILLER_SUPPORTED)
 1243|       |/* Add a filler byte to 8-bit or 16-bit Gray or 24-bit or 48-bit RGB images. */
 1244|       |PNG_EXPORT(39, void, png_set_filler, (png_structrp png_ptr, png_uint_32 filler,
 1245|       |    int flags));
 1246|       |/* The values of the PNG_FILLER_ defines should NOT be changed */
 1247|       |#  define PNG_FILLER_BEFORE 0
 1248|       |#  define PNG_FILLER_AFTER 1
 1249|       |/* Add an alpha byte to 8-bit or 16-bit Gray or 24-bit or 48-bit RGB images. */
 1250|       |PNG_EXPORT(40, void, png_set_add_alpha, (png_structrp png_ptr,
 1251|       |    png_uint_32 filler, int flags));
 1252|       |#endif /* READ_FILLER || WRITE_FILLER */
 1253|       |
 1254|       |#if defined(PNG_READ_SWAP_SUPPORTED) || defined(PNG_WRITE_SWAP_SUPPORTED)
 1255|       |/* Swap bytes in 16-bit depth files. */
 1256|       |PNG_EXPORT(41, void, png_set_swap, (png_structrp png_ptr));
 1257|       |#endif
 1258|       |
 1259|       |#if defined(PNG_READ_PACK_SUPPORTED) || defined(PNG_WRITE_PACK_SUPPORTED)
 1260|       |/* Use 1 byte per pixel in 1, 2, or 4-bit depth files. */
 1261|       |PNG_EXPORT(42, void, png_set_packing, (png_structrp png_ptr));
 1262|       |#endif
 1263|       |
 1264|       |#if defined(PNG_READ_PACKSWAP_SUPPORTED) || \
 1265|       |    defined(PNG_WRITE_PACKSWAP_SUPPORTED)
 1266|       |/* Swap packing order of pixels in bytes. */
 1267|       |PNG_EXPORT(43, void, png_set_packswap, (png_structrp png_ptr));
 1268|       |#endif
 1269|       |
 1270|       |#if defined(PNG_READ_SHIFT_SUPPORTED) || defined(PNG_WRITE_SHIFT_SUPPORTED)
 1271|       |/* Converts files to legal bit depths. */
 1272|       |PNG_EXPORT(44, void, png_set_shift, (png_structrp png_ptr, png_const_color_8p
 1273|       |    true_bits));
 1274|       |#endif
 1275|       |
 1276|       |#if defined(PNG_READ_INTERLACING_SUPPORTED) || \
 1277|       |    defined(PNG_WRITE_INTERLACING_SUPPORTED)
 1278|       |/* Have the code handle the interlacing.  Returns the number of passes.
 1279|       | * MUST be called before png_read_update_info or png_start_read_image,
 1280|       | * otherwise it will not have the desired effect.  Note that it is still
 1281|       | * necessary to call png_read_row or png_read_rows png_get_image_height
 1282|       | * times for each pass.
 1283|       |*/
 1284|       |PNG_EXPORT(45, int, png_set_interlace_handling, (png_structrp png_ptr));
 1285|       |#endif
 1286|       |
 1287|       |#if defined(PNG_READ_INVERT_SUPPORTED) || defined(PNG_WRITE_INVERT_SUPPORTED)
 1288|       |/* Invert monochrome files */
 1289|       |PNG_EXPORT(46, void, png_set_invert_mono, (png_structrp png_ptr));
 1290|       |#endif
 1291|       |
 1292|       |#ifdef PNG_READ_BACKGROUND_SUPPORTED
 1293|       |/* Handle alpha and tRNS by replacing with a background color.  Prior to
 1294|       | * libpng-1.5.4 this API must not be called before the PNG file header has been
 1295|       | * read.  Doing so will result in unexpected behavior and possible warnings or
 1296|       | * errors if the PNG file contains a bKGD chunk.
 1297|       | */
 1298|       |PNG_FP_EXPORT(47, void, png_set_background, (png_structrp png_ptr,
 1299|       |    png_const_color_16p background_color, int background_gamma_code,
 1300|       |    int need_expand, double background_gamma))
 1301|       |PNG_FIXED_EXPORT(215, void, png_set_background_fixed, (png_structrp png_ptr,
 1302|       |    png_const_color_16p background_color, int background_gamma_code,
 1303|       |    int need_expand, png_fixed_point background_gamma))
 1304|       |#endif
 1305|       |#ifdef PNG_READ_BACKGROUND_SUPPORTED
 1306|       |#  define PNG_BACKGROUND_GAMMA_UNKNOWN 0
 1307|       |#  define PNG_BACKGROUND_GAMMA_SCREEN  1
 1308|       |#  define PNG_BACKGROUND_GAMMA_FILE    2
 1309|       |#  define PNG_BACKGROUND_GAMMA_UNIQUE  3
 1310|       |#endif
 1311|       |
 1312|       |#ifdef PNG_READ_SCALE_16_TO_8_SUPPORTED
 1313|       |/* Scale a 16-bit depth file down to 8-bit, accurately. */
 1314|       |PNG_EXPORT(229, void, png_set_scale_16, (png_structrp png_ptr));
 1315|       |#endif
 1316|       |
 1317|       |#ifdef PNG_READ_STRIP_16_TO_8_SUPPORTED
 1318|       |#define PNG_READ_16_TO_8_SUPPORTED /* Name prior to 1.5.4 */
 1319|       |/* Strip the second byte of information from a 16-bit depth file. */
 1320|       |PNG_EXPORT(48, void, png_set_strip_16, (png_structrp png_ptr));
 1321|       |#endif
 1322|       |
 1323|       |#ifdef PNG_READ_QUANTIZE_SUPPORTED
 1324|       |/* Turn on quantizing, and reduce the palette to the number of colors
 1325|       | * available.
 1326|       | */
 1327|       |PNG_EXPORT(49, void, png_set_quantize, (png_structrp png_ptr,
 1328|       |    png_colorp palette, int num_palette, int maximum_colors,
 1329|       |    png_const_uint_16p histogram, int full_quantize));
 1330|       |#endif
 1331|       |
 1332|       |#ifdef PNG_READ_GAMMA_SUPPORTED
 1333|       |/* The threshold on gamma processing is configurable but hard-wired into the
 1334|       | * library.  The following is the floating point variant.
 1335|       | */
 1336|       |#define PNG_GAMMA_THRESHOLD (PNG_GAMMA_THRESHOLD_FIXED*.00001)
 1337|       |
 1338|       |/* Handle gamma correction. Screen_gamma=(display_exponent).
 1339|       | * NOTE: this API simply sets the screen and file gamma values. It will
 1340|       | * therefore override the value for gamma in a PNG file if it is called after
 1341|       | * the file header has been read - use with care  - call before reading the PNG
 1342|       | * file for best results!
 1343|       | *
 1344|       | * These routines accept the same gamma values as png_set_alpha_mode (described
 1345|       | * above).  The PNG_GAMMA_ defines and PNG_DEFAULT_sRGB can be passed to either
 1346|       | * API (floating point or fixed.)  Notice, however, that the 'file_gamma' value
 1347|       | * is the inverse of a 'screen gamma' value.
 1348|       | */
 1349|       |PNG_FP_EXPORT(50, void, png_set_gamma, (png_structrp png_ptr,
 1350|       |    double screen_gamma, double override_file_gamma))
 1351|       |PNG_FIXED_EXPORT(208, void, png_set_gamma_fixed, (png_structrp png_ptr,
 1352|       |    png_fixed_point screen_gamma, png_fixed_point override_file_gamma))
 1353|       |#endif
 1354|       |
 1355|       |#ifdef PNG_WRITE_FLUSH_SUPPORTED
 1356|       |/* Set how many lines between output flushes - 0 for no flushing */
 1357|       |PNG_EXPORT(51, void, png_set_flush, (png_structrp png_ptr, int nrows));
 1358|       |/* Flush the current PNG output buffer */
 1359|       |PNG_EXPORT(52, void, png_write_flush, (png_structrp png_ptr));
 1360|       |#endif
 1361|       |
 1362|       |/* Optional update palette with requested transformations */
 1363|       |PNG_EXPORT(53, void, png_start_read_image, (png_structrp png_ptr));
 1364|       |
 1365|       |/* Optional call to update the users info structure */
 1366|       |PNG_EXPORT(54, void, png_read_update_info, (png_structrp png_ptr,
 1367|       |    png_inforp info_ptr));
 1368|       |
 1369|       |#ifdef PNG_SEQUENTIAL_READ_SUPPORTED
 1370|       |/* Read one or more rows of image data. */
 1371|       |PNG_EXPORT(55, void, png_read_rows, (png_structrp png_ptr, png_bytepp row,
 1372|       |    png_bytepp display_row, png_uint_32 num_rows));
 1373|       |#endif
 1374|       |
 1375|       |#ifdef PNG_SEQUENTIAL_READ_SUPPORTED
 1376|       |/* Read a row of data. */
 1377|       |PNG_EXPORT(56, void, png_read_row, (png_structrp png_ptr, png_bytep row,
 1378|       |    png_bytep display_row));
 1379|       |#endif
 1380|       |
 1381|       |#ifdef PNG_SEQUENTIAL_READ_SUPPORTED
 1382|       |/* Read the whole image into memory at once. */
 1383|       |PNG_EXPORT(57, void, png_read_image, (png_structrp png_ptr, png_bytepp image));
 1384|       |#endif
 1385|       |
 1386|       |/* Write a row of image data */
 1387|       |PNG_EXPORT(58, void, png_write_row, (png_structrp png_ptr,
 1388|       |    png_const_bytep row));
 1389|       |
 1390|       |/* Write a few rows of image data: (*row) is not written; however, the type
 1391|       | * is declared as writeable to maintain compatibility with previous versions
 1392|       | * of libpng and to allow the 'display_row' array from read_rows to be passed
 1393|       | * unchanged to write_rows.
 1394|       | */
 1395|       |PNG_EXPORT(59, void, png_write_rows, (png_structrp png_ptr, png_bytepp row,
 1396|       |    png_uint_32 num_rows));
 1397|       |
 1398|       |/* Write the image data */
 1399|       |PNG_EXPORT(60, void, png_write_image, (png_structrp png_ptr, png_bytepp image));
 1400|       |
 1401|       |/* Write the end of the PNG file. */
 1402|       |PNG_EXPORT(61, void, png_write_end, (png_structrp png_ptr,
 1403|       |    png_inforp info_ptr));
 1404|       |
 1405|       |#ifdef PNG_SEQUENTIAL_READ_SUPPORTED
 1406|       |/* Read the end of the PNG file. */
 1407|       |PNG_EXPORT(62, void, png_read_end, (png_structrp png_ptr, png_inforp info_ptr));
 1408|       |#endif
 1409|       |
 1410|       |/* Free any memory associated with the png_info_struct */
 1411|       |PNG_EXPORT(63, void, png_destroy_info_struct, (png_const_structrp png_ptr,
 1412|       |    png_infopp info_ptr_ptr));
 1413|       |
 1414|       |/* Free any memory associated with the png_struct and the png_info_structs */
 1415|       |PNG_EXPORT(64, void, png_destroy_read_struct, (png_structpp png_ptr_ptr,
 1416|       |    png_infopp info_ptr_ptr, png_infopp end_info_ptr_ptr));
 1417|       |
 1418|       |/* Free any memory associated with the png_struct and the png_info_structs */
 1419|       |PNG_EXPORT(65, void, png_destroy_write_struct, (png_structpp png_ptr_ptr,
 1420|       |    png_infopp info_ptr_ptr));
 1421|       |
 1422|       |/* Set the libpng method of handling chunk CRC errors */
 1423|       |PNG_EXPORT(66, void, png_set_crc_action, (png_structrp png_ptr, int crit_action,
 1424|       |    int ancil_action));
 1425|       |
 1426|       |/* Values for png_set_crc_action() say how to handle CRC errors in
 1427|       | * ancillary and critical chunks, and whether to use the data contained
 1428|       | * therein.  Note that it is impossible to "discard" data in a critical
 1429|       | * chunk.  For versions prior to 0.90, the action was always error/quit,
 1430|       | * whereas in version 0.90 and later, the action for CRC errors in ancillary
 1431|       | * chunks is warn/discard.  These values should NOT be changed.
 1432|       | *
 1433|       | *      value                       action:critical     action:ancillary
 1434|       | */
 1435|       |#define PNG_CRC_DEFAULT       0  /* error/quit          warn/discard data */
 1436|       |#define PNG_CRC_ERROR_QUIT    1  /* error/quit          error/quit        */
 1437|       |#define PNG_CRC_WARN_DISCARD  2  /* (INVALID)           warn/discard data */
 1438|       |#define PNG_CRC_WARN_USE      3  /* warn/use data       warn/use data     */
 1439|       |#define PNG_CRC_QUIET_USE     4  /* quiet/use data      quiet/use data    */
 1440|       |#define PNG_CRC_NO_CHANGE     5  /* use current value   use current value */
 1441|       |
 1442|       |#ifdef PNG_WRITE_SUPPORTED
 1443|       |/* These functions give the user control over the scan-line filtering in
 1444|       | * libpng and the compression methods used by zlib.  These functions are
 1445|       | * mainly useful for testing, as the defaults should work with most users.
 1446|       | * Those users who are tight on memory or want faster performance at the
 1447|       | * expense of compression can modify them.  See the compression library
 1448|       | * header file (zlib.h) for an explanation of the compression functions.
 1449|       | */
 1450|       |
 1451|       |/* Set the filtering method(s) used by libpng.  Currently, the only valid
 1452|       | * value for "method" is 0.
 1453|       | */
 1454|       |PNG_EXPORT(67, void, png_set_filter, (png_structrp png_ptr, int method,
 1455|       |    int filters));
 1456|       |#endif /* WRITE */
 1457|       |
 1458|       |/* Flags for png_set_filter() to say which filters to use.  The flags
 1459|       | * are chosen so that they don't conflict with real filter types
 1460|       | * below, in case they are supplied instead of the #defined constants.
 1461|       | * These values should NOT be changed.
 1462|       | */
 1463|       |#define PNG_NO_FILTERS     0x00
 1464|       |#define PNG_FILTER_NONE    0x08
 1465|       |#define PNG_FILTER_SUB     0x10
 1466|       |#define PNG_FILTER_UP      0x20
 1467|       |#define PNG_FILTER_AVG     0x40
 1468|       |#define PNG_FILTER_PAETH   0x80
 1469|       |#define PNG_FAST_FILTERS (PNG_FILTER_NONE | PNG_FILTER_SUB | PNG_FILTER_UP)
 1470|       |#define PNG_ALL_FILTERS (PNG_FAST_FILTERS | PNG_FILTER_AVG | PNG_FILTER_PAETH)
 1471|       |
 1472|       |/* Filter values (not flags) - used in pngwrite.c, pngwutil.c for now.
 1473|       | * These defines should NOT be changed.
 1474|       | */
 1475|       |#define PNG_FILTER_VALUE_NONE  0
 1476|       |#define PNG_FILTER_VALUE_SUB   1
 1477|       |#define PNG_FILTER_VALUE_UP    2
 1478|       |#define PNG_FILTER_VALUE_AVG   3
 1479|       |#define PNG_FILTER_VALUE_PAETH 4
 1480|       |#define PNG_FILTER_VALUE_LAST  5
 1481|       |
 1482|       |#ifdef PNG_WRITE_SUPPORTED
 1483|       |#ifdef PNG_WRITE_WEIGHTED_FILTER_SUPPORTED /* DEPRECATED */
 1484|       |PNG_FP_EXPORT(68, void, png_set_filter_heuristics, (png_structrp png_ptr,
 1485|       |    int heuristic_method, int num_weights, png_const_doublep filter_weights,
 1486|       |    png_const_doublep filter_costs))
 1487|       |PNG_FIXED_EXPORT(209, void, png_set_filter_heuristics_fixed,
 1488|       |    (png_structrp png_ptr, int heuristic_method, int num_weights,
 1489|       |    png_const_fixed_point_p filter_weights,
 1490|       |    png_const_fixed_point_p filter_costs))
 1491|       |#endif /* WRITE_WEIGHTED_FILTER */
 1492|       |
 1493|       |/* The following are no longer used and will be removed from libpng-1.7: */
 1494|       |#define PNG_FILTER_HEURISTIC_DEFAULT    0  /* Currently "UNWEIGHTED" */
 1495|       |#define PNG_FILTER_HEURISTIC_UNWEIGHTED 1  /* Used by libpng < 0.95 */
 1496|       |#define PNG_FILTER_HEURISTIC_WEIGHTED   2  /* Experimental feature */
 1497|       |#define PNG_FILTER_HEURISTIC_LAST       3  /* Not a valid value */
 1498|       |
 1499|       |/* Set the library compression level.  Currently, valid values range from
 1500|       | * 0 - 9, corresponding directly to the zlib compression levels 0 - 9
 1501|       | * (0 - no compression, 9 - "maximal" compression).  Note that tests have
 1502|       | * shown that zlib compression levels 3-6 usually perform as well as level 9
 1503|       | * for PNG images, and do considerably fewer calculations.  In the future,
 1504|       | * these values may not correspond directly to the zlib compression levels.
 1505|       | */
 1506|       |#ifdef PNG_WRITE_CUSTOMIZE_COMPRESSION_SUPPORTED
 1507|       |PNG_EXPORT(69, void, png_set_compression_level, (png_structrp png_ptr,
 1508|       |    int level));
 1509|       |
 1510|       |PNG_EXPORT(70, void, png_set_compression_mem_level, (png_structrp png_ptr,
 1511|       |    int mem_level));
 1512|       |
 1513|       |PNG_EXPORT(71, void, png_set_compression_strategy, (png_structrp png_ptr,
 1514|       |    int strategy));
 1515|       |
 1516|       |/* If PNG_WRITE_OPTIMIZE_CMF_SUPPORTED is defined, libpng will use a
 1517|       | * smaller value of window_bits if it can do so safely.
 1518|       | */
 1519|       |PNG_EXPORT(72, void, png_set_compression_window_bits, (png_structrp png_ptr,
 1520|       |    int window_bits));
 1521|       |
 1522|       |PNG_EXPORT(73, void, png_set_compression_method, (png_structrp png_ptr,
 1523|       |    int method));
 1524|       |#endif /* WRITE_CUSTOMIZE_COMPRESSION */
 1525|       |
 1526|       |#ifdef PNG_WRITE_CUSTOMIZE_ZTXT_COMPRESSION_SUPPORTED
 1527|       |/* Also set zlib parameters for compressing non-IDAT chunks */
 1528|       |PNG_EXPORT(222, void, png_set_text_compression_level, (png_structrp png_ptr,
 1529|       |    int level));
 1530|       |
 1531|       |PNG_EXPORT(223, void, png_set_text_compression_mem_level, (png_structrp png_ptr,
 1532|       |    int mem_level));
 1533|       |
 1534|       |PNG_EXPORT(224, void, png_set_text_compression_strategy, (png_structrp png_ptr,
 1535|       |    int strategy));
 1536|       |
 1537|       |/* If PNG_WRITE_OPTIMIZE_CMF_SUPPORTED is defined, libpng will use a
 1538|       | * smaller value of window_bits if it can do so safely.
 1539|       | */
 1540|       |PNG_EXPORT(225, void, png_set_text_compression_window_bits,
 1541|       |    (png_structrp png_ptr, int window_bits));
 1542|       |
 1543|       |PNG_EXPORT(226, void, png_set_text_compression_method, (png_structrp png_ptr,
 1544|       |    int method));
 1545|       |#endif /* WRITE_CUSTOMIZE_ZTXT_COMPRESSION */
 1546|       |#endif /* WRITE */
 1547|       |
 1548|       |/* These next functions are called for input/output, memory, and error
 1549|       | * handling.  They are in the file pngrio.c, pngwio.c, and pngerror.c,
 1550|       | * and call standard C I/O routines such as fread(), fwrite(), and
 1551|       | * fprintf().  These functions can be made to use other I/O routines
 1552|       | * at run time for those applications that need to handle I/O in a
 1553|       | * different manner by calling png_set_???_fn().  See libpng-manual.txt for
 1554|       | * more information.
 1555|       | */
 1556|       |
 1557|       |#ifdef PNG_STDIO_SUPPORTED
 1558|       |/* Initialize the input/output for the PNG file to the default functions. */
 1559|       |PNG_EXPORT(74, void, png_init_io, (png_structrp png_ptr, png_FILE_p fp));
 1560|       |#endif
 1561|       |
 1562|       |/* Replace the (error and abort), and warning functions with user
 1563|       | * supplied functions.  If no messages are to be printed you must still
 1564|       | * write and use replacement functions. The replacement error_fn should
 1565|       | * still do a longjmp to the last setjmp location if you are using this
 1566|       | * method of error handling.  If error_fn or warning_fn is NULL, the
 1567|       | * default function will be used.
 1568|       | */
 1569|       |
 1570|       |PNG_EXPORT(75, void, png_set_error_fn, (png_structrp png_ptr,
 1571|       |    png_voidp error_ptr, png_error_ptr error_fn, png_error_ptr warning_fn));
 1572|       |
 1573|       |/* Return the user pointer associated with the error functions */
 1574|       |PNG_EXPORT(76, png_voidp, png_get_error_ptr, (png_const_structrp png_ptr));
 1575|       |
 1576|       |/* Replace the default data output functions with a user supplied one(s).
 1577|       | * If buffered output is not used, then output_flush_fn can be set to NULL.
 1578|       | * If PNG_WRITE_FLUSH_SUPPORTED is not defined at libpng compile time
 1579|       | * output_flush_fn will be ignored (and thus can be NULL).
 1580|       | * It is probably a mistake to use NULL for output_flush_fn if
 1581|       | * write_data_fn is not also NULL unless you have built libpng with
 1582|       | * PNG_WRITE_FLUSH_SUPPORTED undefined, because in this case libpng's
 1583|       | * default flush function, which uses the standard *FILE structure, will
 1584|       | * be used.
 1585|       | */
 1586|       |PNG_EXPORT(77, void, png_set_write_fn, (png_structrp png_ptr, png_voidp io_ptr,
 1587|       |    png_rw_ptr write_data_fn, png_flush_ptr output_flush_fn));
 1588|       |
 1589|       |/* Replace the default data input function with a user supplied one. */
 1590|       |PNG_EXPORT(78, void, png_set_read_fn, (png_structrp png_ptr, png_voidp io_ptr,
 1591|       |    png_rw_ptr read_data_fn));
 1592|       |
 1593|       |/* Return the user pointer associated with the I/O functions */
 1594|       |PNG_EXPORT(79, png_voidp, png_get_io_ptr, (png_const_structrp png_ptr));
 1595|       |
 1596|       |PNG_EXPORT(80, void, png_set_read_status_fn, (png_structrp png_ptr,
 1597|       |    png_read_status_ptr read_row_fn));
 1598|       |
 1599|       |PNG_EXPORT(81, void, png_set_write_status_fn, (png_structrp png_ptr,
 1600|       |    png_write_status_ptr write_row_fn));
 1601|       |
 1602|       |#ifdef PNG_USER_MEM_SUPPORTED
 1603|       |/* Replace the default memory allocation functions with user supplied one(s). */
 1604|       |PNG_EXPORT(82, void, png_set_mem_fn, (png_structrp png_ptr, png_voidp mem_ptr,
 1605|       |    png_malloc_ptr malloc_fn, png_free_ptr free_fn));
 1606|       |/* Return the user pointer associated with the memory functions */
 1607|       |PNG_EXPORT(83, png_voidp, png_get_mem_ptr, (png_const_structrp png_ptr));
 1608|       |#endif
 1609|       |
 1610|       |#ifdef PNG_READ_USER_TRANSFORM_SUPPORTED
 1611|       |PNG_EXPORT(84, void, png_set_read_user_transform_fn, (png_structrp png_ptr,
 1612|       |    png_user_transform_ptr read_user_transform_fn));
 1613|       |#endif
 1614|       |
 1615|       |#ifdef PNG_WRITE_USER_TRANSFORM_SUPPORTED
 1616|       |PNG_EXPORT(85, void, png_set_write_user_transform_fn, (png_structrp png_ptr,
 1617|       |    png_user_transform_ptr write_user_transform_fn));
 1618|       |#endif
 1619|       |
 1620|       |#ifdef PNG_USER_TRANSFORM_PTR_SUPPORTED
 1621|       |PNG_EXPORT(86, void, png_set_user_transform_info, (png_structrp png_ptr,
 1622|       |    png_voidp user_transform_ptr, int user_transform_depth,
 1623|       |    int user_transform_channels));
 1624|       |/* Return the user pointer associated with the user transform functions */
 1625|       |PNG_EXPORT(87, png_voidp, png_get_user_transform_ptr,
 1626|       |    (png_const_structrp png_ptr));
 1627|       |#endif
 1628|       |
 1629|       |#ifdef PNG_USER_TRANSFORM_INFO_SUPPORTED
 1630|       |/* Return information about the row currently being processed.  Note that these
 1631|       | * APIs do not fail but will return unexpected results if called outside a user
 1632|       | * transform callback.  Also note that when transforming an interlaced image the
 1633|       | * row number is the row number within the sub-image of the interlace pass, so
 1634|       | * the value will increase to the height of the sub-image (not the full image)
 1635|       | * then reset to 0 for the next pass.
 1636|       | *
 1637|       | * Use PNG_ROW_FROM_PASS_ROW(row, pass) and PNG_COL_FROM_PASS_COL(col, pass) to
 1638|       | * find the output pixel (x,y) given an interlaced sub-image pixel
 1639|       | * (row,col,pass).  (See below for these macros.)
 1640|       | */
 1641|       |PNG_EXPORT(217, png_uint_32, png_get_current_row_number, (png_const_structrp));
 1642|       |PNG_EXPORT(218, png_byte, png_get_current_pass_number, (png_const_structrp));
 1643|       |#endif
 1644|       |
 1645|       |#ifdef PNG_READ_USER_CHUNKS_SUPPORTED
 1646|       |/* This callback is called only for *unknown* chunks.  If
 1647|       | * PNG_HANDLE_AS_UNKNOWN_SUPPORTED is set then it is possible to set known
 1648|       | * chunks to be treated as unknown, however in this case the callback must do
 1649|       | * any processing required by the chunk (e.g. by calling the appropriate
 1650|       | * png_set_ APIs.)
 1651|       | *
 1652|       | * There is no write support - on write, by default, all the chunks in the
 1653|       | * 'unknown' list are written in the specified position.
 1654|       | *
 1655|       | * The integer return from the callback function is interpreted thus:
 1656|       | *
 1657|       | * negative: An error occurred; png_chunk_error will be called.
 1658|       | *     zero: The chunk was not handled, the chunk will be saved. A critical
 1659|       | *           chunk will cause an error at this point unless it is to be saved.
 1660|       | * positive: The chunk was handled, libpng will ignore/discard it.
 1661|       | *
 1662|       | * See "INTERACTION WITH USER CHUNK CALLBACKS" below for important notes about
 1663|       | * how this behavior will change in libpng 1.7
 1664|       | */
 1665|       |PNG_EXPORT(88, void, png_set_read_user_chunk_fn, (png_structrp png_ptr,
 1666|       |    png_voidp user_chunk_ptr, png_user_chunk_ptr read_user_chunk_fn));
 1667|       |#endif
 1668|       |
 1669|       |#ifdef PNG_USER_CHUNKS_SUPPORTED
 1670|       |PNG_EXPORT(89, png_voidp, png_get_user_chunk_ptr, (png_const_structrp png_ptr));
 1671|       |#endif
 1672|       |
 1673|       |#ifdef PNG_PROGRESSIVE_READ_SUPPORTED
 1674|       |/* Sets the function callbacks for the push reader, and a pointer to a
 1675|       | * user-defined structure available to the callback functions.
 1676|       | */
 1677|       |PNG_EXPORT(90, void, png_set_progressive_read_fn, (png_structrp png_ptr,
 1678|       |    png_voidp progressive_ptr, png_progressive_info_ptr info_fn,
 1679|       |    png_progressive_row_ptr row_fn, png_progressive_end_ptr end_fn));
 1680|       |
 1681|       |/* Returns the user pointer associated with the push read functions */
 1682|       |PNG_EXPORT(91, png_voidp, png_get_progressive_ptr,
 1683|       |    (png_const_structrp png_ptr));
 1684|       |
 1685|       |/* Function to be called when data becomes available */
 1686|       |PNG_EXPORT(92, void, png_process_data, (png_structrp png_ptr,
 1687|       |    png_inforp info_ptr, png_bytep buffer, size_t buffer_size));
 1688|       |
 1689|       |/* A function which may be called *only* within png_process_data to stop the
 1690|       | * processing of any more data.  The function returns the number of bytes
 1691|       | * remaining, excluding any that libpng has cached internally.  A subsequent
 1692|       | * call to png_process_data must supply these bytes again.  If the argument
 1693|       | * 'save' is set to true the routine will first save all the pending data and
 1694|       | * will always return 0.
 1695|       | */
 1696|       |PNG_EXPORT(219, size_t, png_process_data_pause, (png_structrp, int save));
 1697|       |
 1698|       |/* A function which may be called *only* outside (after) a call to
 1699|       | * png_process_data.  It returns the number of bytes of data to skip in the
 1700|       | * input.  Normally it will return 0, but if it returns a non-zero value the
 1701|       | * application must skip than number of bytes of input data and pass the
 1702|       | * following data to the next call to png_process_data.
 1703|       | */
 1704|       |PNG_EXPORT(220, png_uint_32, png_process_data_skip, (png_structrp));
 1705|       |
 1706|       |/* Function that combines rows.  'new_row' is a flag that should come from
 1707|       | * the callback and be non-NULL if anything needs to be done; the library
 1708|       | * stores its own version of the new data internally and ignores the passed
 1709|       | * in value.
 1710|       | */
 1711|       |PNG_EXPORT(93, void, png_progressive_combine_row, (png_const_structrp png_ptr,
 1712|       |    png_bytep old_row, png_const_bytep new_row));
 1713|       |#endif /* PROGRESSIVE_READ */
 1714|       |
 1715|       |PNG_EXPORTA(94, png_voidp, png_malloc, (png_const_structrp png_ptr,
 1716|       |    png_alloc_size_t size), PNG_ALLOCATED);
 1717|       |/* Added at libpng version 1.4.0 */
 1718|       |PNG_EXPORTA(95, png_voidp, png_calloc, (png_const_structrp png_ptr,
 1719|       |    png_alloc_size_t size), PNG_ALLOCATED);
 1720|       |
 1721|       |/* Added at libpng version 1.2.4 */
 1722|       |PNG_EXPORTA(96, png_voidp, png_malloc_warn, (png_const_structrp png_ptr,
 1723|       |    png_alloc_size_t size), PNG_ALLOCATED);
 1724|       |
 1725|       |/* Frees a pointer allocated by png_malloc() */
 1726|       |PNG_EXPORT(97, void, png_free, (png_const_structrp png_ptr, png_voidp ptr));
 1727|       |
 1728|       |/* Free data that was allocated internally */
 1729|       |PNG_EXPORT(98, void, png_free_data, (png_const_structrp png_ptr,
 1730|       |    png_inforp info_ptr, png_uint_32 free_me, int num));
 1731|       |
 1732|       |/* Reassign the responsibility for freeing existing data, whether allocated
 1733|       | * by libpng or by the application; this works on the png_info structure passed
 1734|       | * in, without changing the state for other png_info structures.
 1735|       | */
 1736|       |PNG_EXPORT(99, void, png_data_freer, (png_const_structrp png_ptr,
 1737|       |    png_inforp info_ptr, int freer, png_uint_32 mask));
 1738|       |
 1739|       |/* Assignments for png_data_freer */
 1740|       |#define PNG_DESTROY_WILL_FREE_DATA 1
 1741|       |#define PNG_SET_WILL_FREE_DATA 1
 1742|       |#define PNG_USER_WILL_FREE_DATA 2
 1743|       |/* Flags for png_ptr->free_me and info_ptr->free_me */
 1744|       |#define PNG_FREE_HIST 0x0008U
 1745|       |#define PNG_FREE_ICCP 0x0010U
 1746|       |#define PNG_FREE_SPLT 0x0020U
 1747|       |#define PNG_FREE_ROWS 0x0040U
 1748|       |#define PNG_FREE_PCAL 0x0080U
 1749|       |#define PNG_FREE_SCAL 0x0100U
 1750|       |#ifdef PNG_STORE_UNKNOWN_CHUNKS_SUPPORTED
 1751|       |#  define PNG_FREE_UNKN 0x0200U
 1752|       |#endif
 1753|       |/*      PNG_FREE_LIST 0x0400U   removed in 1.6.0 because it is ignored */
 1754|       |#define PNG_FREE_PLTE 0x1000U
 1755|       |#define PNG_FREE_TRNS 0x2000U
 1756|       |#define PNG_FREE_TEXT 0x4000U
 1757|       |#define PNG_FREE_EXIF 0x8000U /* Added at libpng-1.6.31 */
 1758|       |#define PNG_FREE_ALL  0xffffU
 1759|       |#define PNG_FREE_MUL  0x4220U /* PNG_FREE_SPLT|PNG_FREE_TEXT|PNG_FREE_UNKN */
 1760|       |
 1761|       |#ifdef PNG_USER_MEM_SUPPORTED
 1762|       |PNG_EXPORTA(100, png_voidp, png_malloc_default, (png_const_structrp png_ptr,
 1763|       |    png_alloc_size_t size), PNG_ALLOCATED PNG_DEPRECATED);
 1764|       |PNG_EXPORTA(101, void, png_free_default, (png_const_structrp png_ptr,
 1765|       |    png_voidp ptr), PNG_DEPRECATED);
 1766|       |#endif
 1767|       |
 1768|       |#ifdef PNG_ERROR_TEXT_SUPPORTED
 1769|       |/* Fatal error in PNG image of libpng - can't continue */
 1770|       |PNG_EXPORTA(102, void, png_error, (png_const_structrp png_ptr,
 1771|       |    png_const_charp error_message), PNG_NORETURN);
 1772|       |
 1773|       |/* The same, but the chunk name is prepended to the error string. */
 1774|       |PNG_EXPORTA(103, void, png_chunk_error, (png_const_structrp png_ptr,
 1775|       |    png_const_charp error_message), PNG_NORETURN);
 1776|       |
 1777|       |#else
 1778|       |/* Fatal error in PNG image of libpng - can't continue */
 1779|       |PNG_EXPORTA(104, void, png_err, (png_const_structrp png_ptr), PNG_NORETURN);
 1780|       |#  define png_error(s1,s2) png_err(s1)
 1781|       |#  define png_chunk_error(s1,s2) png_err(s1)
 1782|       |#endif
 1783|       |
 1784|       |#ifdef PNG_WARNINGS_SUPPORTED
 1785|       |/* Non-fatal error in libpng.  Can continue, but may have a problem. */
 1786|       |PNG_EXPORT(105, void, png_warning, (png_const_structrp png_ptr,
 1787|       |    png_const_charp warning_message));
 1788|       |
 1789|       |/* Non-fatal error in libpng, chunk name is prepended to message. */
 1790|       |PNG_EXPORT(106, void, png_chunk_warning, (png_const_structrp png_ptr,
 1791|       |    png_const_charp warning_message));
 1792|       |#else
 1793|       |#  define png_warning(s1,s2) ((void)(s1))
 1794|       |#  define png_chunk_warning(s1,s2) ((void)(s1))
 1795|       |#endif
 1796|       |
 1797|       |#ifdef PNG_BENIGN_ERRORS_SUPPORTED
 1798|       |/* Benign error in libpng.  Can continue, but may have a problem.
 1799|       | * User can choose whether to handle as a fatal error or as a warning. */
 1800|       |PNG_EXPORT(107, void, png_benign_error, (png_const_structrp png_ptr,
 1801|       |    png_const_charp warning_message));
 1802|       |
 1803|       |#ifdef PNG_READ_SUPPORTED
 1804|       |/* Same, chunk name is prepended to message (only during read) */
 1805|       |PNG_EXPORT(108, void, png_chunk_benign_error, (png_const_structrp png_ptr,
 1806|       |    png_const_charp warning_message));
 1807|       |#endif
 1808|       |
 1809|       |PNG_EXPORT(109, void, png_set_benign_errors,
 1810|       |    (png_structrp png_ptr, int allowed));
 1811|       |#else
 1812|       |#  ifdef PNG_ALLOW_BENIGN_ERRORS
 1813|       |#    define png_benign_error png_warning
 1814|       |#    define png_chunk_benign_error png_chunk_warning
 1815|       |#  else
 1816|       |#    define png_benign_error png_error
 1817|       |#    define png_chunk_benign_error png_chunk_error
 1818|       |#  endif
 1819|       |#endif
 1820|       |
 1821|       |/* The png_set_<chunk> functions are for storing values in the png_info_struct.
 1822|       | * Similarly, the png_get_<chunk> calls are used to read values from the
 1823|       | * png_info_struct, either storing the parameters in the passed variables, or
 1824|       | * setting pointers into the png_info_struct where the data is stored.  The
 1825|       | * png_get_<chunk> functions return a non-zero value if the data was available
 1826|       | * in info_ptr, or return zero and do not change any of the parameters if the
 1827|       | * data was not available.
 1828|       | *
 1829|       | * These functions should be used instead of directly accessing png_info
 1830|       | * to avoid problems with future changes in the size and internal layout of
 1831|       | * png_info_struct.
 1832|       | */
 1833|       |/* Returns "flag" if chunk data is valid in info_ptr. */
 1834|       |PNG_EXPORT(110, png_uint_32, png_get_valid, (png_const_structrp png_ptr,
 1835|       |    png_const_inforp info_ptr, png_uint_32 flag));
 1836|       |
 1837|       |/* Returns number of bytes needed to hold a transformed row. */
 1838|       |PNG_EXPORT(111, size_t, png_get_rowbytes, (png_const_structrp png_ptr,
 1839|       |    png_const_inforp info_ptr));
 1840|       |
 1841|       |#ifdef PNG_INFO_IMAGE_SUPPORTED
 1842|       |/* Returns row_pointers, which is an array of pointers to scanlines that was
 1843|       | * returned from png_read_png().
 1844|       | */
 1845|       |PNG_EXPORT(112, png_bytepp, png_get_rows, (png_const_structrp png_ptr,
 1846|       |    png_const_inforp info_ptr));
 1847|       |
 1848|       |/* Set row_pointers, which is an array of pointers to scanlines for use
 1849|       | * by png_write_png().
 1850|       | */
 1851|       |PNG_EXPORT(113, void, png_set_rows, (png_const_structrp png_ptr,
 1852|       |    png_inforp info_ptr, png_bytepp row_pointers));
 1853|       |#endif
 1854|       |
 1855|       |/* Returns number of color channels in image. */
 1856|       |PNG_EXPORT(114, png_byte, png_get_channels, (png_const_structrp png_ptr,
 1857|       |    png_const_inforp info_ptr));
 1858|       |
 1859|       |#ifdef PNG_EASY_ACCESS_SUPPORTED
 1860|       |/* Returns image width in pixels. */
 1861|       |PNG_EXPORT(115, png_uint_32, png_get_image_width, (png_const_structrp png_ptr,
 1862|       |    png_const_inforp info_ptr));
 1863|       |
 1864|       |/* Returns image height in pixels. */
 1865|       |PNG_EXPORT(116, png_uint_32, png_get_image_height, (png_const_structrp png_ptr,
 1866|       |    png_const_inforp info_ptr));
 1867|       |
 1868|       |/* Returns image bit_depth. */
 1869|       |PNG_EXPORT(117, png_byte, png_get_bit_depth, (png_const_structrp png_ptr,
 1870|       |    png_const_inforp info_ptr));
 1871|       |
 1872|       |/* Returns image color_type. */
 1873|       |PNG_EXPORT(118, png_byte, png_get_color_type, (png_const_structrp png_ptr,
 1874|       |    png_const_inforp info_ptr));
 1875|       |
 1876|       |/* Returns image filter_type. */
 1877|       |PNG_EXPORT(119, png_byte, png_get_filter_type, (png_const_structrp png_ptr,
 1878|       |    png_const_inforp info_ptr));
 1879|       |
 1880|       |/* Returns image interlace_type. */
 1881|       |PNG_EXPORT(120, png_byte, png_get_interlace_type, (png_const_structrp png_ptr,
 1882|       |    png_const_inforp info_ptr));
 1883|       |
 1884|       |/* Returns image compression_type. */
 1885|       |PNG_EXPORT(121, png_byte, png_get_compression_type, (png_const_structrp png_ptr,
 1886|       |    png_const_inforp info_ptr));
 1887|       |
 1888|       |/* Returns image resolution in pixels per meter, from pHYs chunk data. */
 1889|       |PNG_EXPORT(122, png_uint_32, png_get_pixels_per_meter,
 1890|       |    (png_const_structrp png_ptr, png_const_inforp info_ptr));
 1891|       |PNG_EXPORT(123, png_uint_32, png_get_x_pixels_per_meter,
 1892|       |    (png_const_structrp png_ptr, png_const_inforp info_ptr));
 1893|       |PNG_EXPORT(124, png_uint_32, png_get_y_pixels_per_meter,
 1894|       |    (png_const_structrp png_ptr, png_const_inforp info_ptr));
 1895|       |
 1896|       |/* Returns pixel aspect ratio, computed from pHYs chunk data.  */
 1897|       |PNG_FP_EXPORT(125, float, png_get_pixel_aspect_ratio,
 1898|       |    (png_const_structrp png_ptr, png_const_inforp info_ptr))
 1899|       |PNG_FIXED_EXPORT(210, png_fixed_point, png_get_pixel_aspect_ratio_fixed,
 1900|       |    (png_const_structrp png_ptr, png_const_inforp info_ptr))
 1901|       |
 1902|       |/* Returns image x, y offset in pixels or microns, from oFFs chunk data. */
 1903|       |PNG_EXPORT(126, png_int_32, png_get_x_offset_pixels,
 1904|       |    (png_const_structrp png_ptr, png_const_inforp info_ptr));
 1905|       |PNG_EXPORT(127, png_int_32, png_get_y_offset_pixels,
 1906|       |    (png_const_structrp png_ptr, png_const_inforp info_ptr));
 1907|       |PNG_EXPORT(128, png_int_32, png_get_x_offset_microns,
 1908|       |    (png_const_structrp png_ptr, png_const_inforp info_ptr));
 1909|       |PNG_EXPORT(129, png_int_32, png_get_y_offset_microns,
 1910|       |    (png_const_structrp png_ptr, png_const_inforp info_ptr));
 1911|       |
 1912|       |#endif /* EASY_ACCESS */
 1913|       |
 1914|       |#ifdef PNG_READ_SUPPORTED
 1915|       |/* Returns pointer to signature string read from PNG header */
 1916|       |PNG_EXPORT(130, png_const_bytep, png_get_signature, (png_const_structrp png_ptr,
 1917|       |    png_const_inforp info_ptr));
 1918|       |#endif
 1919|       |
 1920|       |#ifdef PNG_bKGD_SUPPORTED
 1921|       |PNG_EXPORT(131, png_uint_32, png_get_bKGD, (png_const_structrp png_ptr,
 1922|       |    png_inforp info_ptr, png_color_16p *background));
 1923|       |#endif
 1924|       |
 1925|       |#ifdef PNG_bKGD_SUPPORTED
 1926|       |PNG_EXPORT(132, void, png_set_bKGD, (png_const_structrp png_ptr,
 1927|       |    png_inforp info_ptr, png_const_color_16p background));
 1928|       |#endif
 1929|       |
 1930|       |#ifdef PNG_cHRM_SUPPORTED
 1931|       |PNG_FP_EXPORT(133, png_uint_32, png_get_cHRM, (png_const_structrp png_ptr,
 1932|       |    png_const_inforp info_ptr, double *white_x, double *white_y, double *red_x,
 1933|       |    double *red_y, double *green_x, double *green_y, double *blue_x,
 1934|       |    double *blue_y))
 1935|       |PNG_FP_EXPORT(230, png_uint_32, png_get_cHRM_XYZ, (png_const_structrp png_ptr,
 1936|       |    png_const_inforp info_ptr, double *red_X, double *red_Y, double *red_Z,
 1937|       |    double *green_X, double *green_Y, double *green_Z, double *blue_X,
 1938|       |    double *blue_Y, double *blue_Z))
 1939|       |PNG_FIXED_EXPORT(134, png_uint_32, png_get_cHRM_fixed,
 1940|       |    (png_const_structrp png_ptr, png_const_inforp info_ptr,
 1941|       |    png_fixed_point *int_white_x, png_fixed_point *int_white_y,
 1942|       |    png_fixed_point *int_red_x, png_fixed_point *int_red_y,
 1943|       |    png_fixed_point *int_green_x, png_fixed_point *int_green_y,
 1944|       |    png_fixed_point *int_blue_x, png_fixed_point *int_blue_y))
 1945|       |PNG_FIXED_EXPORT(231, png_uint_32, png_get_cHRM_XYZ_fixed,
 1946|       |    (png_const_structrp png_ptr, png_const_inforp info_ptr,
 1947|       |    png_fixed_point *int_red_X, png_fixed_point *int_red_Y,
 1948|       |    png_fixed_point *int_red_Z, png_fixed_point *int_green_X,
 1949|       |    png_fixed_point *int_green_Y, png_fixed_point *int_green_Z,
 1950|       |    png_fixed_point *int_blue_X, png_fixed_point *int_blue_Y,
 1951|       |    png_fixed_point *int_blue_Z))
 1952|       |#endif
 1953|       |
 1954|       |#ifdef PNG_cHRM_SUPPORTED
 1955|       |PNG_FP_EXPORT(135, void, png_set_cHRM, (png_const_structrp png_ptr,
 1956|       |    png_inforp info_ptr,
 1957|       |    double white_x, double white_y, double red_x, double red_y, double green_x,
 1958|       |    double green_y, double blue_x, double blue_y))
 1959|       |PNG_FP_EXPORT(232, void, png_set_cHRM_XYZ, (png_const_structrp png_ptr,
 1960|       |    png_inforp info_ptr, double red_X, double red_Y, double red_Z,
 1961|       |    double green_X, double green_Y, double green_Z, double blue_X,
 1962|       |    double blue_Y, double blue_Z))
 1963|       |PNG_FIXED_EXPORT(136, void, png_set_cHRM_fixed, (png_const_structrp png_ptr,
 1964|       |    png_inforp info_ptr, png_fixed_point int_white_x,
 1965|       |    png_fixed_point int_white_y, png_fixed_point int_red_x,
 1966|       |    png_fixed_point int_red_y, png_fixed_point int_green_x,
 1967|       |    png_fixed_point int_green_y, png_fixed_point int_blue_x,
 1968|       |    png_fixed_point int_blue_y))
 1969|       |PNG_FIXED_EXPORT(233, void, png_set_cHRM_XYZ_fixed, (png_const_structrp png_ptr,
 1970|       |    png_inforp info_ptr, png_fixed_point int_red_X, png_fixed_point int_red_Y,
 1971|       |    png_fixed_point int_red_Z, png_fixed_point int_green_X,
 1972|       |    png_fixed_point int_green_Y, png_fixed_point int_green_Z,
 1973|       |    png_fixed_point int_blue_X, png_fixed_point int_blue_Y,
 1974|       |    png_fixed_point int_blue_Z))
 1975|       |#endif
 1976|       |
 1977|       |#ifdef PNG_eXIf_SUPPORTED
 1978|       |PNG_EXPORT(246, png_uint_32, png_get_eXIf, (png_const_structrp png_ptr,
 1979|       |    png_inforp info_ptr, png_bytep *exif));
 1980|       |PNG_EXPORT(247, void, png_set_eXIf, (png_const_structrp png_ptr,
 1981|       |    png_inforp info_ptr, png_bytep exif));
 1982|       |
 1983|       |PNG_EXPORT(248, png_uint_32, png_get_eXIf_1, (png_const_structrp png_ptr,
 1984|       |    png_const_inforp info_ptr, png_uint_32 *num_exif, png_bytep *exif));
 1985|       |PNG_EXPORT(249, void, png_set_eXIf_1, (png_const_structrp png_ptr,
 1986|       |    png_inforp info_ptr, png_uint_32 num_exif, png_bytep exif));
 1987|       |#endif
 1988|       |
 1989|       |#ifdef PNG_gAMA_SUPPORTED
 1990|       |PNG_FP_EXPORT(137, png_uint_32, png_get_gAMA, (png_const_structrp png_ptr,
 1991|       |    png_const_inforp info_ptr, double *file_gamma))
 1992|       |PNG_FIXED_EXPORT(138, png_uint_32, png_get_gAMA_fixed,
 1993|       |    (png_const_structrp png_ptr, png_const_inforp info_ptr,
 1994|       |    png_fixed_point *int_file_gamma))
 1995|       |#endif
 1996|       |
 1997|       |#ifdef PNG_gAMA_SUPPORTED
 1998|       |PNG_FP_EXPORT(139, void, png_set_gAMA, (png_const_structrp png_ptr,
 1999|       |    png_inforp info_ptr, double file_gamma))
 2000|       |PNG_FIXED_EXPORT(140, void, png_set_gAMA_fixed, (png_const_structrp png_ptr,
 2001|       |    png_inforp info_ptr, png_fixed_point int_file_gamma))
 2002|       |#endif
 2003|       |
 2004|       |#ifdef PNG_hIST_SUPPORTED
 2005|       |PNG_EXPORT(141, png_uint_32, png_get_hIST, (png_const_structrp png_ptr,
 2006|       |    png_inforp info_ptr, png_uint_16p *hist));
 2007|       |PNG_EXPORT(142, void, png_set_hIST, (png_const_structrp png_ptr,
 2008|       |    png_inforp info_ptr, png_const_uint_16p hist));
 2009|       |#endif
 2010|       |
 2011|       |PNG_EXPORT(143, png_uint_32, png_get_IHDR, (png_const_structrp png_ptr,
 2012|       |    png_const_inforp info_ptr, png_uint_32 *width, png_uint_32 *height,
 2013|       |    int *bit_depth, int *color_type, int *interlace_method,
 2014|       |    int *compression_method, int *filter_method));
 2015|       |
 2016|       |PNG_EXPORT(144, void, png_set_IHDR, (png_const_structrp png_ptr,
 2017|       |    png_inforp info_ptr, png_uint_32 width, png_uint_32 height, int bit_depth,
 2018|       |    int color_type, int interlace_method, int compression_method,
 2019|       |    int filter_method));
 2020|       |
 2021|       |#ifdef PNG_oFFs_SUPPORTED
 2022|       |PNG_EXPORT(145, png_uint_32, png_get_oFFs, (png_const_structrp png_ptr,
 2023|       |   png_const_inforp info_ptr, png_int_32 *offset_x, png_int_32 *offset_y,
 2024|       |   int *unit_type));
 2025|       |#endif
 2026|       |
 2027|       |#ifdef PNG_oFFs_SUPPORTED
 2028|       |PNG_EXPORT(146, void, png_set_oFFs, (png_const_structrp png_ptr,
 2029|       |    png_inforp info_ptr, png_int_32 offset_x, png_int_32 offset_y,
 2030|       |    int unit_type));
 2031|       |#endif
 2032|       |
 2033|       |#ifdef PNG_pCAL_SUPPORTED
 2034|       |PNG_EXPORT(147, png_uint_32, png_get_pCAL, (png_const_structrp png_ptr,
 2035|       |    png_inforp info_ptr, png_charp *purpose, png_int_32 *X0,
 2036|       |    png_int_32 *X1, int *type, int *nparams, png_charp *units,
 2037|       |    png_charpp *params));
 2038|       |#endif
 2039|       |
 2040|       |#ifdef PNG_pCAL_SUPPORTED
 2041|       |PNG_EXPORT(148, void, png_set_pCAL, (png_const_structrp png_ptr,
 2042|       |    png_inforp info_ptr, png_const_charp purpose, png_int_32 X0, png_int_32 X1,
 2043|       |    int type, int nparams, png_const_charp units, png_charpp params));
 2044|       |#endif
 2045|       |
 2046|       |#ifdef PNG_pHYs_SUPPORTED
 2047|       |PNG_EXPORT(149, png_uint_32, png_get_pHYs, (png_const_structrp png_ptr,
 2048|       |    png_const_inforp info_ptr, png_uint_32 *res_x, png_uint_32 *res_y,
 2049|       |    int *unit_type));
 2050|       |#endif
 2051|       |
 2052|       |#ifdef PNG_pHYs_SUPPORTED
 2053|       |PNG_EXPORT(150, void, png_set_pHYs, (png_const_structrp png_ptr,
 2054|       |    png_inforp info_ptr, png_uint_32 res_x, png_uint_32 res_y, int unit_type));
 2055|       |#endif
 2056|       |
 2057|       |PNG_EXPORT(151, png_uint_32, png_get_PLTE, (png_const_structrp png_ptr,
 2058|       |   png_inforp info_ptr, png_colorp *palette, int *num_palette));
 2059|       |
 2060|       |PNG_EXPORT(152, void, png_set_PLTE, (png_structrp png_ptr,
 2061|       |    png_inforp info_ptr, png_const_colorp palette, int num_palette));
 2062|       |
 2063|       |#ifdef PNG_sBIT_SUPPORTED
 2064|       |PNG_EXPORT(153, png_uint_32, png_get_sBIT, (png_const_structrp png_ptr,
 2065|       |    png_inforp info_ptr, png_color_8p *sig_bit));
 2066|       |#endif
 2067|       |
 2068|       |#ifdef PNG_sBIT_SUPPORTED
 2069|       |PNG_EXPORT(154, void, png_set_sBIT, (png_const_structrp png_ptr,
 2070|       |    png_inforp info_ptr, png_const_color_8p sig_bit));
 2071|       |#endif
 2072|       |
 2073|       |#ifdef PNG_sRGB_SUPPORTED
 2074|       |PNG_EXPORT(155, png_uint_32, png_get_sRGB, (png_const_structrp png_ptr,
 2075|       |    png_const_inforp info_ptr, int *file_srgb_intent));
 2076|       |#endif
 2077|       |
 2078|       |#ifdef PNG_sRGB_SUPPORTED
 2079|       |PNG_EXPORT(156, void, png_set_sRGB, (png_const_structrp png_ptr,
 2080|       |    png_inforp info_ptr, int srgb_intent));
 2081|       |PNG_EXPORT(157, void, png_set_sRGB_gAMA_and_cHRM, (png_const_structrp png_ptr,
 2082|       |    png_inforp info_ptr, int srgb_intent));
 2083|       |#endif
 2084|       |
 2085|       |#ifdef PNG_iCCP_SUPPORTED
 2086|       |PNG_EXPORT(158, png_uint_32, png_get_iCCP, (png_const_structrp png_ptr,
 2087|       |    png_inforp info_ptr, png_charpp name, int *compression_type,
 2088|       |    png_bytepp profile, png_uint_32 *proflen));
 2089|       |#endif
 2090|       |
 2091|       |#ifdef PNG_iCCP_SUPPORTED
 2092|       |PNG_EXPORT(159, void, png_set_iCCP, (png_const_structrp png_ptr,
 2093|       |    png_inforp info_ptr, png_const_charp name, int compression_type,
 2094|       |    png_const_bytep profile, png_uint_32 proflen));
 2095|       |#endif
 2096|       |
 2097|       |#ifdef PNG_sPLT_SUPPORTED
 2098|       |PNG_EXPORT(160, int, png_get_sPLT, (png_const_structrp png_ptr,
 2099|       |    png_inforp info_ptr, png_sPLT_tpp entries));
 2100|       |#endif
 2101|       |
 2102|       |#ifdef PNG_sPLT_SUPPORTED
 2103|       |PNG_EXPORT(161, void, png_set_sPLT, (png_const_structrp png_ptr,
 2104|       |    png_inforp info_ptr, png_const_sPLT_tp entries, int nentries));
 2105|       |#endif
 2106|       |
 2107|       |#ifdef PNG_TEXT_SUPPORTED
 2108|       |/* png_get_text also returns the number of text chunks in *num_text */
 2109|       |PNG_EXPORT(162, int, png_get_text, (png_const_structrp png_ptr,
 2110|       |    png_inforp info_ptr, png_textp *text_ptr, int *num_text));
 2111|       |#endif
 2112|       |
 2113|       |/* Note while png_set_text() will accept a structure whose text,
 2114|       | * language, and  translated keywords are NULL pointers, the structure
 2115|       | * returned by png_get_text will always contain regular
 2116|       | * zero-terminated C strings.  They might be empty strings but
 2117|       | * they will never be NULL pointers.
 2118|       | */
 2119|       |
 2120|       |#ifdef PNG_TEXT_SUPPORTED
 2121|       |PNG_EXPORT(163, void, png_set_text, (png_const_structrp png_ptr,
 2122|       |    png_inforp info_ptr, png_const_textp text_ptr, int num_text));
 2123|       |#endif
 2124|       |
 2125|       |#ifdef PNG_tIME_SUPPORTED
 2126|       |PNG_EXPORT(164, png_uint_32, png_get_tIME, (png_const_structrp png_ptr,
 2127|       |    png_inforp info_ptr, png_timep *mod_time));
 2128|       |#endif
 2129|       |
 2130|       |#ifdef PNG_tIME_SUPPORTED
 2131|       |PNG_EXPORT(165, void, png_set_tIME, (png_const_structrp png_ptr,
 2132|       |    png_inforp info_ptr, png_const_timep mod_time));
 2133|       |#endif
 2134|       |
 2135|       |#ifdef PNG_tRNS_SUPPORTED
 2136|       |PNG_EXPORT(166, png_uint_32, png_get_tRNS, (png_const_structrp png_ptr,
 2137|       |    png_inforp info_ptr, png_bytep *trans_alpha, int *num_trans,
 2138|       |    png_color_16p *trans_color));
 2139|       |#endif
 2140|       |
 2141|       |#ifdef PNG_tRNS_SUPPORTED
 2142|       |PNG_EXPORT(167, void, png_set_tRNS, (png_structrp png_ptr,
 2143|       |    png_inforp info_ptr, png_const_bytep trans_alpha, int num_trans,
 2144|       |    png_const_color_16p trans_color));
 2145|       |#endif
 2146|       |
 2147|       |#ifdef PNG_sCAL_SUPPORTED
 2148|       |PNG_FP_EXPORT(168, png_uint_32, png_get_sCAL, (png_const_structrp png_ptr,
 2149|       |    png_const_inforp info_ptr, int *unit, double *width, double *height))
 2150|       |#if defined(PNG_FLOATING_ARITHMETIC_SUPPORTED) || \
 2151|       |   defined(PNG_FLOATING_POINT_SUPPORTED)
 2152|       |/* NOTE: this API is currently implemented using floating point arithmetic,
 2153|       | * consequently it can only be used on systems with floating point support.
 2154|       | * In any case the range of values supported by png_fixed_point is small and it
 2155|       | * is highly recommended that png_get_sCAL_s be used instead.
 2156|       | */
 2157|       |PNG_FIXED_EXPORT(214, png_uint_32, png_get_sCAL_fixed,
 2158|       |    (png_const_structrp png_ptr, png_const_inforp info_ptr, int *unit,
 2159|       |    png_fixed_point *width, png_fixed_point *height))
 2160|       |#endif
 2161|       |PNG_EXPORT(169, png_uint_32, png_get_sCAL_s,
 2162|       |    (png_const_structrp png_ptr, png_const_inforp info_ptr, int *unit,
 2163|       |    png_charpp swidth, png_charpp sheight));
 2164|       |
 2165|       |PNG_FP_EXPORT(170, void, png_set_sCAL, (png_const_structrp png_ptr,
 2166|       |    png_inforp info_ptr, int unit, double width, double height))
 2167|       |PNG_FIXED_EXPORT(213, void, png_set_sCAL_fixed, (png_const_structrp png_ptr,
 2168|       |   png_inforp info_ptr, int unit, png_fixed_point width,
 2169|       |   png_fixed_point height))
 2170|       |PNG_EXPORT(171, void, png_set_sCAL_s, (png_const_structrp png_ptr,
 2171|       |    png_inforp info_ptr, int unit,
 2172|       |    png_const_charp swidth, png_const_charp sheight));
 2173|       |#endif /* sCAL */
 2174|       |
 2175|       |#ifdef PNG_SET_UNKNOWN_CHUNKS_SUPPORTED
 2176|       |/* Provide the default handling for all unknown chunks or, optionally, for
 2177|       | * specific unknown chunks.
 2178|       | *
 2179|       | * NOTE: prior to 1.6.0 the handling specified for particular chunks on read was
 2180|       | * ignored and the default was used, the per-chunk setting only had an effect on
 2181|       | * write.  If you wish to have chunk-specific handling on read in code that must
 2182|       | * work on earlier versions you must use a user chunk callback to specify the
 2183|       | * desired handling (keep or discard.)
 2184|       | *
 2185|       | * The 'keep' parameter is a PNG_HANDLE_CHUNK_ value as listed below.  The
 2186|       | * parameter is interpreted as follows:
 2187|       | *
 2188|       | * READ:
 2189|       | *    PNG_HANDLE_CHUNK_AS_DEFAULT:
 2190|       | *       Known chunks: do normal libpng processing, do not keep the chunk (but
 2191|       | *          see the comments below about PNG_HANDLE_AS_UNKNOWN_SUPPORTED)
 2192|       | *       Unknown chunks: for a specific chunk use the global default, when used
 2193|       | *          as the default discard the chunk data.
 2194|       | *    PNG_HANDLE_CHUNK_NEVER:
 2195|       | *       Discard the chunk data.
 2196|       | *    PNG_HANDLE_CHUNK_IF_SAFE:
 2197|       | *       Keep the chunk data if the chunk is not critical else raise a chunk
 2198|       | *       error.
 2199|       | *    PNG_HANDLE_CHUNK_ALWAYS:
 2200|       | *       Keep the chunk data.
 2201|       | *
 2202|       | * If the chunk data is saved it can be retrieved using png_get_unknown_chunks,
 2203|       | * below.  Notice that specifying "AS_DEFAULT" as a global default is equivalent
 2204|       | * to specifying "NEVER", however when "AS_DEFAULT" is used for specific chunks
 2205|       | * it simply resets the behavior to the libpng default.
 2206|       | *
 2207|       | * INTERACTION WITH USER CHUNK CALLBACKS:
 2208|       | * The per-chunk handling is always used when there is a png_user_chunk_ptr
 2209|       | * callback and the callback returns 0; the chunk is then always stored *unless*
 2210|       | * it is critical and the per-chunk setting is other than ALWAYS.  Notice that
 2211|       | * the global default is *not* used in this case.  (In effect the per-chunk
 2212|       | * value is incremented to at least IF_SAFE.)
 2213|       | *
 2214|       | * IMPORTANT NOTE: this behavior will change in libpng 1.7 - the global and
 2215|       | * per-chunk defaults will be honored.  If you want to preserve the current
 2216|       | * behavior when your callback returns 0 you must set PNG_HANDLE_CHUNK_IF_SAFE
 2217|       | * as the default - if you don't do this libpng 1.6 will issue a warning.
 2218|       | *
 2219|       | * If you want unhandled unknown chunks to be discarded in libpng 1.6 and
 2220|       | * earlier simply return '1' (handled).
 2221|       | *
 2222|       | * PNG_HANDLE_AS_UNKNOWN_SUPPORTED:
 2223|       | *    If this is *not* set known chunks will always be handled by libpng and
 2224|       | *    will never be stored in the unknown chunk list.  Known chunks listed to
 2225|       | *    png_set_keep_unknown_chunks will have no effect.  If it is set then known
 2226|       | *    chunks listed with a keep other than AS_DEFAULT will *never* be processed
 2227|       | *    by libpng, in addition critical chunks must either be processed by the
 2228|       | *    callback or saved.
 2229|       | *
 2230|       | *    The IHDR and IEND chunks must not be listed.  Because this turns off the
 2231|       | *    default handling for chunks that would otherwise be recognized the
 2232|       | *    behavior of libpng transformations may well become incorrect!
 2233|       | *
 2234|       | * WRITE:
 2235|       | *    When writing chunks the options only apply to the chunks specified by
 2236|       | *    png_set_unknown_chunks (below), libpng will *always* write known chunks
 2237|       | *    required by png_set_ calls and will always write the core critical chunks
 2238|       | *    (as required for PLTE).
 2239|       | *
 2240|       | *    Each chunk in the png_set_unknown_chunks list is looked up in the
 2241|       | *    png_set_keep_unknown_chunks list to find the keep setting, this is then
 2242|       | *    interpreted as follows:
 2243|       | *
 2244|       | *    PNG_HANDLE_CHUNK_AS_DEFAULT:
 2245|       | *       Write safe-to-copy chunks and write other chunks if the global
 2246|       | *       default is set to _ALWAYS, otherwise don't write this chunk.
 2247|       | *    PNG_HANDLE_CHUNK_NEVER:
 2248|       | *       Do not write the chunk.
 2249|       | *    PNG_HANDLE_CHUNK_IF_SAFE:
 2250|       | *       Write the chunk if it is safe-to-copy, otherwise do not write it.
 2251|       | *    PNG_HANDLE_CHUNK_ALWAYS:
 2252|       | *       Write the chunk.
 2253|       | *
 2254|       | * Note that the default behavior is effectively the opposite of the read case -
 2255|       | * in read unknown chunks are not stored by default, in write they are written
 2256|       | * by default.  Also the behavior of PNG_HANDLE_CHUNK_IF_SAFE is very different
 2257|       | * - on write the safe-to-copy bit is checked, on read the critical bit is
 2258|       | * checked and on read if the chunk is critical an error will be raised.
 2259|       | *
 2260|       | * num_chunks:
 2261|       | * ===========
 2262|       | *    If num_chunks is positive, then the "keep" parameter specifies the manner
 2263|       | *    for handling only those chunks appearing in the chunk_list array,
 2264|       | *    otherwise the chunk list array is ignored.
 2265|       | *
 2266|       | *    If num_chunks is 0 the "keep" parameter specifies the default behavior for
 2267|       | *    unknown chunks, as described above.
 2268|       | *
 2269|       | *    If num_chunks is negative, then the "keep" parameter specifies the manner
 2270|       | *    for handling all unknown chunks plus all chunks recognized by libpng
 2271|       | *    except for the IHDR, PLTE, tRNS, IDAT, and IEND chunks (which continue to
 2272|       | *    be processed by libpng.
 2273|       | */
 2274|       |#ifdef PNG_HANDLE_AS_UNKNOWN_SUPPORTED
 2275|       |PNG_EXPORT(172, void, png_set_keep_unknown_chunks, (png_structrp png_ptr,
 2276|       |    int keep, png_const_bytep chunk_list, int num_chunks));
 2277|       |#endif /* HANDLE_AS_UNKNOWN */
 2278|       |
 2279|       |/* The "keep" PNG_HANDLE_CHUNK_ parameter for the specified chunk is returned;
 2280|       | * the result is therefore true (non-zero) if special handling is required,
 2281|       | * false for the default handling.
 2282|       | */
 2283|       |PNG_EXPORT(173, int, png_handle_as_unknown, (png_const_structrp png_ptr,
 2284|       |    png_const_bytep chunk_name));
 2285|       |#endif /* SET_UNKNOWN_CHUNKS */
 2286|       |
 2287|       |#ifdef PNG_STORE_UNKNOWN_CHUNKS_SUPPORTED
 2288|       |PNG_EXPORT(174, void, png_set_unknown_chunks, (png_const_structrp png_ptr,
 2289|       |    png_inforp info_ptr, png_const_unknown_chunkp unknowns,
 2290|       |    int num_unknowns));
 2291|       |   /* NOTE: prior to 1.6.0 this routine set the 'location' field of the added
 2292|       |    * unknowns to the location currently stored in the png_struct.  This is
 2293|       |    * invariably the wrong value on write.  To fix this call the following API
 2294|       |    * for each chunk in the list with the correct location.  If you know your
 2295|       |    * code won't be compiled on earlier versions you can rely on
 2296|       |    * png_set_unknown_chunks(write-ptr, png_get_unknown_chunks(read-ptr)) doing
 2297|       |    * the correct thing.
 2298|       |    */
 2299|       |
 2300|       |PNG_EXPORT(175, void, png_set_unknown_chunk_location,
 2301|       |    (png_const_structrp png_ptr, png_inforp info_ptr, int chunk, int location));
 2302|       |
 2303|       |PNG_EXPORT(176, int, png_get_unknown_chunks, (png_const_structrp png_ptr,
 2304|       |    png_inforp info_ptr, png_unknown_chunkpp entries));
 2305|       |#endif
 2306|       |
 2307|       |/* Png_free_data() will turn off the "valid" flag for anything it frees.
 2308|       | * If you need to turn it off for a chunk that your application has freed,
 2309|       | * you can use png_set_invalid(png_ptr, info_ptr, PNG_INFO_CHNK);
 2310|       | */
 2311|       |PNG_EXPORT(177, void, png_set_invalid, (png_const_structrp png_ptr,
 2312|       |    png_inforp info_ptr, int mask));
 2313|       |
 2314|       |#ifdef PNG_INFO_IMAGE_SUPPORTED
 2315|       |/* The "params" pointer is currently not used and is for future expansion. */
 2316|       |#ifdef PNG_SEQUENTIAL_READ_SUPPORTED
 2317|       |PNG_EXPORT(178, void, png_read_png, (png_structrp png_ptr, png_inforp info_ptr,
 2318|       |    int transforms, png_voidp params));
 2319|       |#endif
 2320|       |#ifdef PNG_WRITE_SUPPORTED
 2321|       |PNG_EXPORT(179, void, png_write_png, (png_structrp png_ptr, png_inforp info_ptr,
 2322|       |    int transforms, png_voidp params));
 2323|       |#endif
 2324|       |#endif
 2325|       |
 2326|       |PNG_EXPORT(180, png_const_charp, png_get_copyright,
 2327|       |    (png_const_structrp png_ptr));
 2328|       |PNG_EXPORT(181, png_const_charp, png_get_header_ver,
 2329|       |    (png_const_structrp png_ptr));
 2330|       |PNG_EXPORT(182, png_const_charp, png_get_header_version,
 2331|       |    (png_const_structrp png_ptr));
 2332|       |PNG_EXPORT(183, png_const_charp, png_get_libpng_ver,
 2333|       |    (png_const_structrp png_ptr));
 2334|       |
 2335|       |#ifdef PNG_MNG_FEATURES_SUPPORTED
 2336|       |PNG_EXPORT(184, png_uint_32, png_permit_mng_features, (png_structrp png_ptr,
 2337|       |    png_uint_32 mng_features_permitted));
 2338|       |#endif
 2339|       |
 2340|       |/* For use in png_set_keep_unknown, added to version 1.2.6 */
 2341|       |#define PNG_HANDLE_CHUNK_AS_DEFAULT   0
 2342|       |#define PNG_HANDLE_CHUNK_NEVER        1
 2343|       |#define PNG_HANDLE_CHUNK_IF_SAFE      2
 2344|       |#define PNG_HANDLE_CHUNK_ALWAYS       3
 2345|       |#define PNG_HANDLE_CHUNK_LAST         4
 2346|       |
 2347|       |/* Strip the prepended error numbers ("#nnn ") from error and warning
 2348|       | * messages before passing them to the error or warning handler.
 2349|       | */
 2350|       |#ifdef PNG_ERROR_NUMBERS_SUPPORTED
 2351|       |PNG_EXPORT(185, void, png_set_strip_error_numbers, (png_structrp png_ptr,
 2352|       |    png_uint_32 strip_mode));
 2353|       |#endif
 2354|       |
 2355|       |/* Added in libpng-1.2.6 */
 2356|       |#ifdef PNG_SET_USER_LIMITS_SUPPORTED
 2357|       |PNG_EXPORT(186, void, png_set_user_limits, (png_structrp png_ptr,
 2358|       |    png_uint_32 user_width_max, png_uint_32 user_height_max));
 2359|       |PNG_EXPORT(187, png_uint_32, png_get_user_width_max,
 2360|       |    (png_const_structrp png_ptr));
 2361|       |PNG_EXPORT(188, png_uint_32, png_get_user_height_max,
 2362|       |    (png_const_structrp png_ptr));
 2363|       |/* Added in libpng-1.4.0 */
 2364|       |PNG_EXPORT(189, void, png_set_chunk_cache_max, (png_structrp png_ptr,
 2365|       |    png_uint_32 user_chunk_cache_max));
 2366|       |PNG_EXPORT(190, png_uint_32, png_get_chunk_cache_max,
 2367|       |    (png_const_structrp png_ptr));
 2368|       |/* Added in libpng-1.4.1 */
 2369|       |PNG_EXPORT(191, void, png_set_chunk_malloc_max, (png_structrp png_ptr,
 2370|       |    png_alloc_size_t user_chunk_cache_max));
 2371|       |PNG_EXPORT(192, png_alloc_size_t, png_get_chunk_malloc_max,
 2372|       |    (png_const_structrp png_ptr));
 2373|       |#endif
 2374|       |
 2375|       |#if defined(PNG_INCH_CONVERSIONS_SUPPORTED)
 2376|       |PNG_EXPORT(193, png_uint_32, png_get_pixels_per_inch,
 2377|       |    (png_const_structrp png_ptr, png_const_inforp info_ptr));
 2378|       |
 2379|       |PNG_EXPORT(194, png_uint_32, png_get_x_pixels_per_inch,
 2380|       |    (png_const_structrp png_ptr, png_const_inforp info_ptr));
 2381|       |
 2382|       |PNG_EXPORT(195, png_uint_32, png_get_y_pixels_per_inch,
 2383|       |    (png_const_structrp png_ptr, png_const_inforp info_ptr));
 2384|       |
 2385|       |PNG_FP_EXPORT(196, float, png_get_x_offset_inches,
 2386|       |    (png_const_structrp png_ptr, png_const_inforp info_ptr))
 2387|       |#ifdef PNG_FIXED_POINT_SUPPORTED /* otherwise not implemented. */
 2388|       |PNG_FIXED_EXPORT(211, png_fixed_point, png_get_x_offset_inches_fixed,
 2389|       |    (png_const_structrp png_ptr, png_const_inforp info_ptr))
 2390|       |#endif
 2391|       |
 2392|       |PNG_FP_EXPORT(197, float, png_get_y_offset_inches, (png_const_structrp png_ptr,
 2393|       |    png_const_inforp info_ptr))
 2394|       |#ifdef PNG_FIXED_POINT_SUPPORTED /* otherwise not implemented. */
 2395|       |PNG_FIXED_EXPORT(212, png_fixed_point, png_get_y_offset_inches_fixed,
 2396|       |    (png_const_structrp png_ptr, png_const_inforp info_ptr))
 2397|       |#endif
 2398|       |
 2399|       |#  ifdef PNG_pHYs_SUPPORTED
 2400|       |PNG_EXPORT(198, png_uint_32, png_get_pHYs_dpi, (png_const_structrp png_ptr,
 2401|       |    png_const_inforp info_ptr, png_uint_32 *res_x, png_uint_32 *res_y,
 2402|       |    int *unit_type));
 2403|       |#  endif /* pHYs */
 2404|       |#endif  /* INCH_CONVERSIONS */
 2405|       |
 2406|       |/* Added in libpng-1.4.0 */
 2407|       |#ifdef PNG_IO_STATE_SUPPORTED
 2408|       |PNG_EXPORT(199, png_uint_32, png_get_io_state, (png_const_structrp png_ptr));
 2409|       |
 2410|       |/* Removed from libpng 1.6; use png_get_io_chunk_type. */
 2411|       |PNG_REMOVED(200, png_const_bytep, png_get_io_chunk_name, (png_structrp png_ptr),
 2412|       |    PNG_DEPRECATED)
 2413|       |
 2414|       |PNG_EXPORT(216, png_uint_32, png_get_io_chunk_type,
 2415|       |    (png_const_structrp png_ptr));
 2416|       |
 2417|       |/* The flags returned by png_get_io_state() are the following: */
 2418|       |#  define PNG_IO_NONE        0x0000   /* no I/O at this moment */
 2419|       |#  define PNG_IO_READING     0x0001   /* currently reading */
 2420|       |#  define PNG_IO_WRITING     0x0002   /* currently writing */
 2421|       |#  define PNG_IO_SIGNATURE   0x0010   /* currently at the file signature */
 2422|       |#  define PNG_IO_CHUNK_HDR   0x0020   /* currently at the chunk header */
 2423|       |#  define PNG_IO_CHUNK_DATA  0x0040   /* currently at the chunk data */
 2424|       |#  define PNG_IO_CHUNK_CRC   0x0080   /* currently at the chunk crc */
 2425|       |#  define PNG_IO_MASK_OP     0x000f   /* current operation: reading/writing */
 2426|       |#  define PNG_IO_MASK_LOC    0x00f0   /* current location: sig/hdr/data/crc */
 2427|       |#endif /* IO_STATE */
 2428|       |
 2429|       |/* Interlace support.  The following macros are always defined so that if
 2430|       | * libpng interlace handling is turned off the macros may be used to handle
 2431|       | * interlaced images within the application.
 2432|       | */
 2433|       |#define PNG_INTERLACE_ADAM7_PASSES 7
 2434|       |
 2435|       |/* Two macros to return the first row and first column of the original,
 2436|       | * full, image which appears in a given pass.  'pass' is in the range 0
 2437|       | * to 6 and the result is in the range 0 to 7.
 2438|       | */
 2439|     91|#define PNG_PASS_START_ROW(pass) (((1&~(pass))<<(3-((pass)>>1)))&7)
 2440|     91|#define PNG_PASS_START_COL(pass) (((1& (pass))<<(3-(((pass)+1)>>1)))&7)
 2441|       |
 2442|       |/* A macro to return the offset between pixels in the output row for a pair of
 2443|       | * pixels in the input - effectively the inverse of the 'COL_SHIFT' macro that
 2444|       | * follows.  Note that ROW_OFFSET is the offset from one row to the next whereas
 2445|       | * COL_OFFSET is from one column to the next, within a row.
 2446|       | */
 2447|       |#define PNG_PASS_ROW_OFFSET(pass) ((pass)>2?(8>>(((pass)-1)>>1)):8)
 2448|       |#define PNG_PASS_COL_OFFSET(pass) (1<<((7-(pass))>>1))
 2449|       |
 2450|       |/* Two macros to help evaluate the number of rows or columns in each
 2451|       | * pass.  This is expressed as a shift - effectively log2 of the number or
 2452|       | * rows or columns in each 8x8 tile of the original image.
 2453|       | */
 2454|    182|#define PNG_PASS_ROW_SHIFT(pass) ((pass)>2?(8-(pass))>>1:3)
 2455|    182|#define PNG_PASS_COL_SHIFT(pass) ((pass)>1?(7-(pass))>>1:3)
 2456|       |
 2457|       |/* Hence two macros to determine the number of rows or columns in a given
 2458|       | * pass of an image given its height or width.  In fact these macros may
 2459|       | * return non-zero even though the sub-image is empty, because the other
 2460|       | * dimension may be empty for a small image.
 2461|       | */
 2462|     91|#define PNG_PASS_ROWS(height, pass) (((height)+(((1<<PNG_PASS_ROW_SHIFT(pass))\
 2463|     91|   -1)-PNG_PASS_START_ROW(pass)))>>PNG_PASS_ROW_SHIFT(pass))
 2464|     91|#define PNG_PASS_COLS(width, pass) (((width)+(((1<<PNG_PASS_COL_SHIFT(pass))\
 2465|     91|   -1)-PNG_PASS_START_COL(pass)))>>PNG_PASS_COL_SHIFT(pass))
 2466|       |
 2467|       |/* For the reader row callbacks (both progressive and sequential) it is
 2468|       | * necessary to find the row in the output image given a row in an interlaced
 2469|       | * image, so two more macros:
 2470|       | */
 2471|       |#define PNG_ROW_FROM_PASS_ROW(y_in, pass) \
 2472|       |   (((y_in)<<PNG_PASS_ROW_SHIFT(pass))+PNG_PASS_START_ROW(pass))
 2473|       |#define PNG_COL_FROM_PASS_COL(x_in, pass) \
 2474|       |   (((x_in)<<PNG_PASS_COL_SHIFT(pass))+PNG_PASS_START_COL(pass))
 2475|       |
 2476|       |/* Two macros which return a boolean (0 or 1) saying whether the given row
 2477|       | * or column is in a particular pass.  These use a common utility macro that
 2478|       | * returns a mask for a given pass - the offset 'off' selects the row or
 2479|       | * column version.  The mask has the appropriate bit set for each column in
 2480|       | * the tile.
 2481|       | */
 2482|       |#define PNG_PASS_MASK(pass,off) ( \
 2483|       |   ((0x110145AF>>(((7-(off))-(pass))<<2)) & 0xF) | \
 2484|       |   ((0x01145AF0>>(((7-(off))-(pass))<<2)) & 0xF0))
 2485|       |
 2486|       |#define PNG_ROW_IN_INTERLACE_PASS(y, pass) \
 2487|       |   ((PNG_PASS_MASK(pass,0) >> ((y)&7)) & 1)
 2488|       |#define PNG_COL_IN_INTERLACE_PASS(x, pass) \
 2489|       |   ((PNG_PASS_MASK(pass,1) >> ((x)&7)) & 1)
 2490|       |
 2491|       |#ifdef PNG_READ_COMPOSITE_NODIV_SUPPORTED
 2492|       |/* With these routines we avoid an integer divide, which will be slower on
 2493|       | * most machines.  However, it does take more operations than the corresponding
 2494|       | * divide method, so it may be slower on a few RISC systems.  There are two
 2495|       | * shifts (by 8 or 16 bits) and an addition, versus a single integer divide.
 2496|       | *
 2497|       | * Note that the rounding factors are NOT supposed to be the same!  128 and
 2498|       | * 32768 are correct for the NODIV code; 127 and 32767 are correct for the
 2499|       | * standard method.
 2500|       | *
 2501|       | * [Optimized code by Greg Roelofs and Mark Adler...blame us for bugs. :-) ]
 2502|       | */
 2503|       |
 2504|       | /* fg and bg should be in `gamma 1.0' space; alpha is the opacity */
 2505|       |
 2506|       |#  define png_composite(composite, fg, alpha, bg)        \
 2507|       |   {                                                     \
 2508|       |      png_uint_16 temp = (png_uint_16)((png_uint_16)(fg) \
 2509|       |          * (png_uint_16)(alpha)                         \
 2510|       |          + (png_uint_16)(bg)*(png_uint_16)(255          \
 2511|       |          - (png_uint_16)(alpha)) + 128);                \
 2512|       |      (composite) = (png_byte)(((temp + (temp >> 8)) >> 8) & 0xff); \
 2513|       |   }
 2514|       |
 2515|       |#  define png_composite_16(composite, fg, alpha, bg)     \
 2516|       |   {                                                     \
 2517|       |      png_uint_32 temp = (png_uint_32)((png_uint_32)(fg) \
 2518|       |          * (png_uint_32)(alpha)                         \
 2519|       |          + (png_uint_32)(bg)*(65535                     \
 2520|       |          - (png_uint_32)(alpha)) + 32768);              \
 2521|       |      (composite) = (png_uint_16)(0xffff & ((temp + (temp >> 16)) >> 16)); \
 2522|       |   }
 2523|       |
 2524|       |#else  /* Standard method using integer division */
 2525|       |
 2526|       |#  define png_composite(composite, fg, alpha, bg)                      \
 2527|       |   (composite) =                                                       \
 2528|       |       (png_byte)(0xff & (((png_uint_16)(fg) * (png_uint_16)(alpha) +  \
 2529|       |       (png_uint_16)(bg) * (png_uint_16)(255 - (png_uint_16)(alpha)) + \
 2530|       |       127) / 255))
 2531|       |
 2532|       |#  define png_composite_16(composite, fg, alpha, bg)                       \
 2533|       |   (composite) =                                                           \
 2534|       |       (png_uint_16)(0xffff & (((png_uint_32)(fg) * (png_uint_32)(alpha) + \
 2535|       |       (png_uint_32)(bg)*(png_uint_32)(65535 - (png_uint_32)(alpha)) +     \
 2536|       |       32767) / 65535))
 2537|       |#endif /* READ_COMPOSITE_NODIV */
 2538|       |
 2539|       |#ifdef PNG_READ_INT_FUNCTIONS_SUPPORTED
 2540|       |PNG_EXPORT(201, png_uint_32, png_get_uint_32, (png_const_bytep buf));
 2541|       |PNG_EXPORT(202, png_uint_16, png_get_uint_16, (png_const_bytep buf));
 2542|       |PNG_EXPORT(203, png_int_32, png_get_int_32, (png_const_bytep buf));
 2543|       |#endif
 2544|       |
 2545|       |PNG_EXPORT(204, png_uint_32, png_get_uint_31, (png_const_structrp png_ptr,
 2546|       |    png_const_bytep buf));
 2547|       |/* No png_get_int_16 -- may be added if there's a real need for it. */
 2548|       |
 2549|       |/* Place a 32-bit number into a buffer in PNG byte order (big-endian). */
 2550|       |#ifdef PNG_WRITE_INT_FUNCTIONS_SUPPORTED
 2551|       |PNG_EXPORT(205, void, png_save_uint_32, (png_bytep buf, png_uint_32 i));
 2552|       |#endif
 2553|       |#ifdef PNG_SAVE_INT_32_SUPPORTED
 2554|       |PNG_EXPORT(206, void, png_save_int_32, (png_bytep buf, png_int_32 i));
 2555|       |#endif
 2556|       |
 2557|       |/* Place a 16-bit number into a buffer in PNG byte order.
 2558|       | * The parameter is declared unsigned int, not png_uint_16,
 2559|       | * just to avoid potential problems on pre-ANSI C compilers.
 2560|       | */
 2561|       |#ifdef PNG_WRITE_INT_FUNCTIONS_SUPPORTED
 2562|       |PNG_EXPORT(207, void, png_save_uint_16, (png_bytep buf, unsigned int i));
 2563|       |/* No png_save_int_16 -- may be added if there's a real need for it. */
 2564|       |#endif
 2565|       |
 2566|       |#ifdef PNG_USE_READ_MACROS
 2567|       |/* Inline macros to do direct reads of bytes from the input buffer.
 2568|       | * The png_get_int_32() routine assumes we are using two's complement
 2569|       | * format for negative values, which is almost certainly true.
 2570|       | */
 2571|       |#  define PNG_get_uint_32(buf) \
 2572|       |   (((png_uint_32)(*(buf)) << 24) + \
 2573|       |    ((png_uint_32)(*((buf) + 1)) << 16) + \
 2574|       |    ((png_uint_32)(*((buf) + 2)) << 8) + \
 2575|       |    ((png_uint_32)(*((buf) + 3))))
 2576|       |
 2577|       |   /* From libpng-1.4.0 until 1.4.4, the png_get_uint_16 macro (but not the
 2578|       |    * function) incorrectly returned a value of type png_uint_32.
 2579|       |    */
 2580|       |#  define PNG_get_uint_16(buf) \
 2581|       |   ((png_uint_16) \
 2582|       |    (((unsigned int)(*(buf)) << 8) + \
 2583|       |    ((unsigned int)(*((buf) + 1)))))
 2584|       |
 2585|       |#  define PNG_get_int_32(buf) \
 2586|       |   ((png_int_32)((*(buf) & 0x80) \
 2587|       |    ? -((png_int_32)(((png_get_uint_32(buf)^0xffffffffU)+1U)&0x7fffffffU)) \
 2588|       |    : (png_int_32)png_get_uint_32(buf)))
 2589|       |
 2590|       |/* If PNG_PREFIX is defined the same thing as below happens in pnglibconf.h,
 2591|       | * but defining a macro name prefixed with PNG_PREFIX.
 2592|       | */
 2593|       |#  ifndef PNG_PREFIX
 2594|       |#    define png_get_uint_32(buf) PNG_get_uint_32(buf)
 2595|       |#    define png_get_uint_16(buf) PNG_get_uint_16(buf)
 2596|       |#    define png_get_int_32(buf)  PNG_get_int_32(buf)
 2597|       |#  endif
 2598|       |#else
 2599|       |#  ifdef PNG_PREFIX
 2600|       |   /* No macros; revert to the (redefined) function */
 2601|       |#    define PNG_get_uint_32 (png_get_uint_32)
 2602|       |#    define PNG_get_uint_16 (png_get_uint_16)
 2603|       |#    define PNG_get_int_32  (png_get_int_32)
 2604|       |#  endif
 2605|       |#endif
 2606|       |
 2607|       |#ifdef PNG_CHECK_FOR_INVALID_INDEX_SUPPORTED
 2608|       |PNG_EXPORT(242, void, png_set_check_for_invalid_index,
 2609|       |    (png_structrp png_ptr, int allowed));
 2610|       |#  ifdef PNG_GET_PALETTE_MAX_SUPPORTED
 2611|       |PNG_EXPORT(243, int, png_get_palette_max, (png_const_structp png_ptr,
 2612|       |    png_const_infop info_ptr));
 2613|       |#  endif
 2614|       |#endif /* CHECK_FOR_INVALID_INDEX */
 2615|       |
 2616|       |/*******************************************************************************
 2617|       | * Section 5: SIMPLIFIED API
 2618|       | *******************************************************************************
 2619|       | *
 2620|       | * Please read the documentation in libpng-manual.txt (TODO: write said
 2621|       | * documentation) if you don't understand what follows.
 2622|       | *
 2623|       | * The simplified API hides the details of both libpng and the PNG file format
 2624|       | * itself.  It allows PNG files to be read into a very limited number of
 2625|       | * in-memory bitmap formats or to be written from the same formats.  If these
 2626|       | * formats do not accommodate your needs then you can, and should, use the more
 2627|       | * sophisticated APIs above - these support a wide variety of in-memory formats
 2628|       | * and a wide variety of sophisticated transformations to those formats as well
 2629|       | * as a wide variety of APIs to manipulate ancillary information.
 2630|       | *
 2631|       | * To read a PNG file using the simplified API:
 2632|       | *
 2633|       | * 1) Declare a 'png_image' structure (see below) on the stack, set the
 2634|       | *    version field to PNG_IMAGE_VERSION and the 'opaque' pointer to NULL
 2635|       | *    (this is REQUIRED, your program may crash if you don't do it.)
 2636|       | * 2) Call the appropriate png_image_begin_read... function.
 2637|       | * 3) Set the png_image 'format' member to the required sample format.
 2638|       | * 4) Allocate a buffer for the image and, if required, the color-map.
 2639|       | * 5) Call png_image_finish_read to read the image and, if required, the
 2640|       | *    color-map into your buffers.
 2641|       | *
 2642|       | * There are no restrictions on the format of the PNG input itself; all valid
 2643|       | * color types, bit depths, and interlace methods are acceptable, and the
 2644|       | * input image is transformed as necessary to the requested in-memory format
 2645|       | * during the png_image_finish_read() step.  The only caveat is that if you
 2646|       | * request a color-mapped image from a PNG that is full-color or makes
 2647|       | * complex use of an alpha channel the transformation is extremely lossy and the
 2648|       | * result may look terrible.
 2649|       | *
 2650|       | * To write a PNG file using the simplified API:
 2651|       | *
 2652|       | * 1) Declare a 'png_image' structure on the stack and memset() it to all zero.
 2653|       | * 2) Initialize the members of the structure that describe the image, setting
 2654|       | *    the 'format' member to the format of the image samples.
 2655|       | * 3) Call the appropriate png_image_write... function with a pointer to the
 2656|       | *    image and, if necessary, the color-map to write the PNG data.
 2657|       | *
 2658|       | * png_image is a structure that describes the in-memory format of an image
 2659|       | * when it is being read or defines the in-memory format of an image that you
 2660|       | * need to write:
 2661|       | */
 2662|       |#if defined(PNG_SIMPLIFIED_READ_SUPPORTED) || \
 2663|       |    defined(PNG_SIMPLIFIED_WRITE_SUPPORTED)
 2664|       |
 2665|       |#define PNG_IMAGE_VERSION 1
 2666|       |
 2667|       |typedef struct png_control *png_controlp;
 2668|       |typedef struct
 2669|       |{
 2670|       |   png_controlp opaque;    /* Initialize to NULL, free with png_image_free */
 2671|       |   png_uint_32  version;   /* Set to PNG_IMAGE_VERSION */
 2672|       |   png_uint_32  width;     /* Image width in pixels (columns) */
 2673|       |   png_uint_32  height;    /* Image height in pixels (rows) */
 2674|       |   png_uint_32  format;    /* Image format as defined below */
 2675|       |   png_uint_32  flags;     /* A bit mask containing informational flags */
 2676|       |   png_uint_32  colormap_entries;
 2677|       |                           /* Number of entries in the color-map */
 2678|       |
 2679|       |   /* In the event of an error or warning the following field will be set to a
 2680|       |    * non-zero value and the 'message' field will contain a '\0' terminated
 2681|       |    * string with the libpng error or warning message.  If both warnings and
 2682|       |    * an error were encountered, only the error is recorded.  If there
 2683|       |    * are multiple warnings, only the first one is recorded.
 2684|       |    *
 2685|       |    * The upper 30 bits of this value are reserved, the low two bits contain
 2686|       |    * a value as follows:
 2687|       |    */
 2688|       |#  define PNG_IMAGE_WARNING 1
 2689|       |#  define PNG_IMAGE_ERROR 2
 2690|       |   /*
 2691|       |    * The result is a two-bit code such that a value more than 1 indicates
 2692|       |    * a failure in the API just called:
 2693|       |    *
 2694|       |    *    0 - no warning or error
 2695|       |    *    1 - warning
 2696|       |    *    2 - error
 2697|       |    *    3 - error preceded by warning
 2698|       |    */
 2699|       |#  define PNG_IMAGE_FAILED(png_cntrl) ((((png_cntrl).warning_or_error)&0x03)>1)
 2700|       |
 2701|       |   png_uint_32  warning_or_error;
 2702|       |
 2703|       |   char         message[64];
 2704|       |} png_image, *png_imagep;
 2705|       |
 2706|       |/* The samples of the image have one to four channels whose components have
 2707|       | * original values in the range 0 to 1.0:
 2708|       | *
 2709|       | * 1: A single gray or luminance channel (G).
 2710|       | * 2: A gray/luminance channel and an alpha channel (GA).
 2711|       | * 3: Three red, green, blue color channels (RGB).
 2712|       | * 4: Three color channels and an alpha channel (RGBA).
 2713|       | *
 2714|       | * The components are encoded in one of two ways:
 2715|       | *
 2716|       | * a) As a small integer, value 0..255, contained in a single byte.  For the
 2717|       | * alpha channel the original value is simply value/255.  For the color or
 2718|       | * luminance channels the value is encoded according to the sRGB specification
 2719|       | * and matches the 8-bit format expected by typical display devices.
 2720|       | *
 2721|       | * The color/gray channels are not scaled (pre-multiplied) by the alpha
 2722|       | * channel and are suitable for passing to color management software.
 2723|       | *
 2724|       | * b) As a value in the range 0..65535, contained in a 2-byte integer.  All
 2725|       | * channels can be converted to the original value by dividing by 65535; all
 2726|       | * channels are linear.  Color channels use the RGB encoding (RGB end-points) of
 2727|       | * the sRGB specification.  This encoding is identified by the
 2728|       | * PNG_FORMAT_FLAG_LINEAR flag below.
 2729|       | *
 2730|       | * When the simplified API needs to convert between sRGB and linear colorspaces,
 2731|       | * the actual sRGB transfer curve defined in the sRGB specification (see the
 2732|       | * article at <https://en.wikipedia.org/wiki/SRGB>) is used, not the gamma=1/2.2
 2733|       | * approximation used elsewhere in libpng.
 2734|       | *
 2735|       | * When an alpha channel is present it is expected to denote pixel coverage
 2736|       | * of the color or luminance channels and is returned as an associated alpha
 2737|       | * channel: the color/gray channels are scaled (pre-multiplied) by the alpha
 2738|       | * value.
 2739|       | *
 2740|       | * The samples are either contained directly in the image data, between 1 and 8
 2741|       | * bytes per pixel according to the encoding, or are held in a color-map indexed
 2742|       | * by bytes in the image data.  In the case of a color-map the color-map entries
 2743|       | * are individual samples, encoded as above, and the image data has one byte per
 2744|       | * pixel to select the relevant sample from the color-map.
 2745|       | */
 2746|       |
 2747|       |/* PNG_FORMAT_*
 2748|       | *
 2749|       | * #defines to be used in png_image::format.  Each #define identifies a
 2750|       | * particular layout of sample data and, if present, alpha values.  There are
 2751|       | * separate defines for each of the two component encodings.
 2752|       | *
 2753|       | * A format is built up using single bit flag values.  All combinations are
 2754|       | * valid.  Formats can be built up from the flag values or you can use one of
 2755|       | * the predefined values below.  When testing formats always use the FORMAT_FLAG
 2756|       | * macros to test for individual features - future versions of the library may
 2757|       | * add new flags.
 2758|       | *
 2759|       | * When reading or writing color-mapped images the format should be set to the
 2760|       | * format of the entries in the color-map then png_image_{read,write}_colormap
 2761|       | * called to read or write the color-map and set the format correctly for the
 2762|       | * image data.  Do not set the PNG_FORMAT_FLAG_COLORMAP bit directly!
 2763|       | *
 2764|       | * NOTE: libpng can be built with particular features disabled. If you see
 2765|       | * compiler errors because the definition of one of the following flags has been
 2766|       | * compiled out it is because libpng does not have the required support.  It is
 2767|       | * possible, however, for the libpng configuration to enable the format on just
 2768|       | * read or just write; in that case you may see an error at run time.  You can
 2769|       | * guard against this by checking for the definition of the appropriate
 2770|       | * "_SUPPORTED" macro, one of:
 2771|       | *
 2772|       | *    PNG_SIMPLIFIED_{READ,WRITE}_{BGR,AFIRST}_SUPPORTED
 2773|       | */
 2774|       |#define PNG_FORMAT_FLAG_ALPHA    0x01U /* format with an alpha channel */
 2775|       |#define PNG_FORMAT_FLAG_COLOR    0x02U /* color format: otherwise grayscale */
 2776|       |#define PNG_FORMAT_FLAG_LINEAR   0x04U /* 2-byte channels else 1-byte */
 2777|       |#define PNG_FORMAT_FLAG_COLORMAP 0x08U /* image data is color-mapped */
 2778|       |
 2779|       |#ifdef PNG_FORMAT_BGR_SUPPORTED
 2780|       |#  define PNG_FORMAT_FLAG_BGR    0x10U /* BGR colors, else order is RGB */
 2781|       |#endif
 2782|       |
 2783|       |#ifdef PNG_FORMAT_AFIRST_SUPPORTED
 2784|       |#  define PNG_FORMAT_FLAG_AFIRST 0x20U /* alpha channel comes first */
 2785|       |#endif
 2786|       |
 2787|       |#define PNG_FORMAT_FLAG_ASSOCIATED_ALPHA 0x40U /* alpha channel is associated */
 2788|       |
 2789|       |/* Commonly used formats have predefined macros.
 2790|       | *
 2791|       | * First the single byte (sRGB) formats:
 2792|       | */
 2793|       |#define PNG_FORMAT_GRAY 0
 2794|       |#define PNG_FORMAT_GA   PNG_FORMAT_FLAG_ALPHA
 2795|       |#define PNG_FORMAT_AG   (PNG_FORMAT_GA|PNG_FORMAT_FLAG_AFIRST)
 2796|       |#define PNG_FORMAT_RGB  PNG_FORMAT_FLAG_COLOR
 2797|       |#define PNG_FORMAT_BGR  (PNG_FORMAT_FLAG_COLOR|PNG_FORMAT_FLAG_BGR)
 2798|       |#define PNG_FORMAT_RGBA (PNG_FORMAT_RGB|PNG_FORMAT_FLAG_ALPHA)
 2799|       |#define PNG_FORMAT_ARGB (PNG_FORMAT_RGBA|PNG_FORMAT_FLAG_AFIRST)
 2800|       |#define PNG_FORMAT_BGRA (PNG_FORMAT_BGR|PNG_FORMAT_FLAG_ALPHA)
 2801|       |#define PNG_FORMAT_ABGR (PNG_FORMAT_BGRA|PNG_FORMAT_FLAG_AFIRST)
 2802|       |
 2803|       |/* Then the linear 2-byte formats.  When naming these "Y" is used to
 2804|       | * indicate a luminance (gray) channel.
 2805|       | */
 2806|       |#define PNG_FORMAT_LINEAR_Y PNG_FORMAT_FLAG_LINEAR
 2807|       |#define PNG_FORMAT_LINEAR_Y_ALPHA (PNG_FORMAT_FLAG_LINEAR|PNG_FORMAT_FLAG_ALPHA)
 2808|       |#define PNG_FORMAT_LINEAR_RGB (PNG_FORMAT_FLAG_LINEAR|PNG_FORMAT_FLAG_COLOR)
 2809|       |#define PNG_FORMAT_LINEAR_RGB_ALPHA \
 2810|       |   (PNG_FORMAT_FLAG_LINEAR|PNG_FORMAT_FLAG_COLOR|PNG_FORMAT_FLAG_ALPHA)
 2811|       |
 2812|       |/* With color-mapped formats the image data is one byte for each pixel, the byte
 2813|       | * is an index into the color-map which is formatted as above.  To obtain a
 2814|       | * color-mapped format it is sufficient just to add the PNG_FOMAT_FLAG_COLORMAP
 2815|       | * to one of the above definitions, or you can use one of the definitions below.
 2816|       | */
 2817|       |#define PNG_FORMAT_RGB_COLORMAP  (PNG_FORMAT_RGB|PNG_FORMAT_FLAG_COLORMAP)
 2818|       |#define PNG_FORMAT_BGR_COLORMAP  (PNG_FORMAT_BGR|PNG_FORMAT_FLAG_COLORMAP)
 2819|       |#define PNG_FORMAT_RGBA_COLORMAP (PNG_FORMAT_RGBA|PNG_FORMAT_FLAG_COLORMAP)
 2820|       |#define PNG_FORMAT_ARGB_COLORMAP (PNG_FORMAT_ARGB|PNG_FORMAT_FLAG_COLORMAP)
 2821|       |#define PNG_FORMAT_BGRA_COLORMAP (PNG_FORMAT_BGRA|PNG_FORMAT_FLAG_COLORMAP)
 2822|       |#define PNG_FORMAT_ABGR_COLORMAP (PNG_FORMAT_ABGR|PNG_FORMAT_FLAG_COLORMAP)
 2823|       |
 2824|       |/* PNG_IMAGE macros
 2825|       | *
 2826|       | * These are convenience macros to derive information from a png_image
 2827|       | * structure.  The PNG_IMAGE_SAMPLE_ macros return values appropriate to the
 2828|       | * actual image sample values - either the entries in the color-map or the
 2829|       | * pixels in the image.  The PNG_IMAGE_PIXEL_ macros return corresponding values
 2830|       | * for the pixels and will always return 1 for color-mapped formats.  The
 2831|       | * remaining macros return information about the rows in the image and the
 2832|       | * complete image.
 2833|       | *
 2834|       | * NOTE: All the macros that take a png_image::format parameter are compile time
 2835|       | * constants if the format parameter is, itself, a constant.  Therefore these
 2836|       | * macros can be used in array declarations and case labels where required.
 2837|       | * Similarly the macros are also pre-processor constants (sizeof is not used) so
 2838|       | * they can be used in #if tests.
 2839|       | *
 2840|       | * First the information about the samples.
 2841|       | */
 2842|       |#define PNG_IMAGE_SAMPLE_CHANNELS(fmt)\
 2843|       |   (((fmt)&(PNG_FORMAT_FLAG_COLOR|PNG_FORMAT_FLAG_ALPHA))+1)
 2844|       |   /* Return the total number of channels in a given format: 1..4 */
 2845|       |
 2846|       |#define PNG_IMAGE_SAMPLE_COMPONENT_SIZE(fmt)\
 2847|       |   ((((fmt) & PNG_FORMAT_FLAG_LINEAR) >> 2)+1)
 2848|       |   /* Return the size in bytes of a single component of a pixel or color-map
 2849|       |    * entry (as appropriate) in the image: 1 or 2.
 2850|       |    */
 2851|       |
 2852|       |#define PNG_IMAGE_SAMPLE_SIZE(fmt)\
 2853|       |   (PNG_IMAGE_SAMPLE_CHANNELS(fmt) * PNG_IMAGE_SAMPLE_COMPONENT_SIZE(fmt))
 2854|       |   /* This is the size of the sample data for one sample.  If the image is
 2855|       |    * color-mapped it is the size of one color-map entry (and image pixels are
 2856|       |    * one byte in size), otherwise it is the size of one image pixel.
 2857|       |    */
 2858|       |
 2859|       |#define PNG_IMAGE_MAXIMUM_COLORMAP_COMPONENTS(fmt)\
 2860|       |   (PNG_IMAGE_SAMPLE_CHANNELS(fmt) * 256)
 2861|       |   /* The maximum size of the color-map required by the format expressed in a
 2862|       |    * count of components.  This can be used to compile-time allocate a
 2863|       |    * color-map:
 2864|       |    *
 2865|       |    * png_uint_16 colormap[PNG_IMAGE_MAXIMUM_COLORMAP_COMPONENTS(linear_fmt)];
 2866|       |    *
 2867|       |    * png_byte colormap[PNG_IMAGE_MAXIMUM_COLORMAP_COMPONENTS(sRGB_fmt)];
 2868|       |    *
 2869|       |    * Alternatively use the PNG_IMAGE_COLORMAP_SIZE macro below to use the
 2870|       |    * information from one of the png_image_begin_read_ APIs and dynamically
 2871|       |    * allocate the required memory.
 2872|       |    */
 2873|       |
 2874|       |/* Corresponding information about the pixels */
 2875|       |#define PNG_IMAGE_PIXEL_(test,fmt)\
 2876|       |   (((fmt)&PNG_FORMAT_FLAG_COLORMAP)?1:test(fmt))
 2877|       |
 2878|       |#define PNG_IMAGE_PIXEL_CHANNELS(fmt)\
 2879|       |   PNG_IMAGE_PIXEL_(PNG_IMAGE_SAMPLE_CHANNELS,fmt)
 2880|       |   /* The number of separate channels (components) in a pixel; 1 for a
 2881|       |    * color-mapped image.
 2882|       |    */
 2883|       |
 2884|       |#define PNG_IMAGE_PIXEL_COMPONENT_SIZE(fmt)\
 2885|       |   PNG_IMAGE_PIXEL_(PNG_IMAGE_SAMPLE_COMPONENT_SIZE,fmt)
 2886|       |   /* The size, in bytes, of each component in a pixel; 1 for a color-mapped
 2887|       |    * image.
 2888|       |    */
 2889|       |
 2890|       |#define PNG_IMAGE_PIXEL_SIZE(fmt) PNG_IMAGE_PIXEL_(PNG_IMAGE_SAMPLE_SIZE,fmt)
 2891|       |   /* The size, in bytes, of a complete pixel; 1 for a color-mapped image. */
 2892|       |
 2893|       |/* Information about the whole row, or whole image */
 2894|       |#define PNG_IMAGE_ROW_STRIDE(image)\
 2895|       |   (PNG_IMAGE_PIXEL_CHANNELS((image).format) * (image).width)
 2896|       |   /* Return the total number of components in a single row of the image; this
 2897|       |    * is the minimum 'row stride', the minimum count of components between each
 2898|       |    * row.  For a color-mapped image this is the minimum number of bytes in a
 2899|       |    * row.
 2900|       |    *
 2901|       |    * WARNING: this macro overflows for some images with more than one component
 2902|       |    * and very large image widths.  libpng will refuse to process an image where
 2903|       |    * this macro would overflow.
 2904|       |    */
 2905|       |
 2906|       |#define PNG_IMAGE_BUFFER_SIZE(image, row_stride)\
 2907|       |   (PNG_IMAGE_PIXEL_COMPONENT_SIZE((image).format)*(image).height*(row_stride))
 2908|       |   /* Return the size, in bytes, of an image buffer given a png_image and a row
 2909|       |    * stride - the number of components to leave space for in each row.
 2910|       |    *
 2911|       |    * WARNING: this macro overflows a 32-bit integer for some large PNG images,
 2912|       |    * libpng will refuse to process an image where such an overflow would occur.
 2913|       |    */
 2914|       |
 2915|       |#define PNG_IMAGE_SIZE(image)\
 2916|       |   PNG_IMAGE_BUFFER_SIZE(image, PNG_IMAGE_ROW_STRIDE(image))
 2917|       |   /* Return the size, in bytes, of the image in memory given just a png_image;
 2918|       |    * the row stride is the minimum stride required for the image.
 2919|       |    */
 2920|       |
 2921|       |#define PNG_IMAGE_COLORMAP_SIZE(image)\
 2922|       |   (PNG_IMAGE_SAMPLE_SIZE((image).format) * (image).colormap_entries)
 2923|       |   /* Return the size, in bytes, of the color-map of this image.  If the image
 2924|       |    * format is not a color-map format this will return a size sufficient for
 2925|       |    * 256 entries in the given format; check PNG_FORMAT_FLAG_COLORMAP if
 2926|       |    * you don't want to allocate a color-map in this case.
 2927|       |    */
 2928|       |
 2929|       |/* PNG_IMAGE_FLAG_*
 2930|       | *
 2931|       | * Flags containing additional information about the image are held in the
 2932|       | * 'flags' field of png_image.
 2933|       | */
 2934|       |#define PNG_IMAGE_FLAG_COLORSPACE_NOT_sRGB 0x01
 2935|       |   /* This indicates that the RGB values of the in-memory bitmap do not
 2936|       |    * correspond to the red, green and blue end-points defined by sRGB.
 2937|       |    */
 2938|       |
 2939|       |#define PNG_IMAGE_FLAG_FAST 0x02
 2940|       |   /* On write emphasise speed over compression; the resultant PNG file will be
 2941|       |    * larger but will be produced significantly faster, particular for large
 2942|       |    * images.  Do not use this option for images which will be distributed, only
 2943|       |    * used it when producing intermediate files that will be read back in
 2944|       |    * repeatedly.  For a typical 24-bit image the option will double the read
 2945|       |    * speed at the cost of increasing the image size by 25%, however for many
 2946|       |    * more compressible images the PNG file can be 10 times larger with only a
 2947|       |    * slight speed gain.
 2948|       |    */
 2949|       |
 2950|       |#define PNG_IMAGE_FLAG_16BIT_sRGB 0x04
 2951|       |   /* On read if the image is a 16-bit per component image and there is no gAMA
 2952|       |    * or sRGB chunk assume that the components are sRGB encoded.  Notice that
 2953|       |    * images output by the simplified API always have gamma information; setting
 2954|       |    * this flag only affects the interpretation of 16-bit images from an
 2955|       |    * external source.  It is recommended that the application expose this flag
 2956|       |    * to the user; the user can normally easily recognize the difference between
 2957|       |    * linear and sRGB encoding.  This flag has no effect on write - the data
 2958|       |    * passed to the write APIs must have the correct encoding (as defined
 2959|       |    * above.)
 2960|       |    *
 2961|       |    * If the flag is not set (the default) input 16-bit per component data is
 2962|       |    * assumed to be linear.
 2963|       |    *
 2964|       |    * NOTE: the flag can only be set after the png_image_begin_read_ call,
 2965|       |    * because that call initializes the 'flags' field.
 2966|       |    */
 2967|       |
 2968|       |#ifdef PNG_SIMPLIFIED_READ_SUPPORTED
 2969|       |/* READ APIs
 2970|       | * ---------
 2971|       | *
 2972|       | * The png_image passed to the read APIs must have been initialized by setting
 2973|       | * the png_controlp field 'opaque' to NULL (or, safer, memset the whole thing.)
 2974|       | */
 2975|       |#ifdef PNG_STDIO_SUPPORTED
 2976|       |PNG_EXPORT(234, int, png_image_begin_read_from_file, (png_imagep image,
 2977|       |   const char *file_name));
 2978|       |   /* The named file is opened for read and the image header is filled in
 2979|       |    * from the PNG header in the file.
 2980|       |    */
 2981|       |
 2982|       |PNG_EXPORT(235, int, png_image_begin_read_from_stdio, (png_imagep image,
 2983|       |   FILE* file));
 2984|       |   /* The PNG header is read from the stdio FILE object. */
 2985|       |#endif /* STDIO */
 2986|       |
 2987|       |PNG_EXPORT(236, int, png_image_begin_read_from_memory, (png_imagep image,
 2988|       |   png_const_voidp memory, size_t size));
 2989|       |   /* The PNG header is read from the given memory buffer. */
 2990|       |
 2991|       |PNG_EXPORT(237, int, png_image_finish_read, (png_imagep image,
 2992|       |   png_const_colorp background, void *buffer, png_int_32 row_stride,
 2993|       |   void *colormap));
 2994|       |   /* Finish reading the image into the supplied buffer and clean up the
 2995|       |    * png_image structure.
 2996|       |    *
 2997|       |    * row_stride is the step, in byte or 2-byte units as appropriate,
 2998|       |    * between adjacent rows.  A positive stride indicates that the top-most row
 2999|       |    * is first in the buffer - the normal top-down arrangement.  A negative
 3000|       |    * stride indicates that the bottom-most row is first in the buffer.
 3001|       |    *
 3002|       |    * background need only be supplied if an alpha channel must be removed from
 3003|       |    * a png_byte format and the removal is to be done by compositing on a solid
 3004|       |    * color; otherwise it may be NULL and any composition will be done directly
 3005|       |    * onto the buffer.  The value is an sRGB color to use for the background,
 3006|       |    * for grayscale output the green channel is used.
 3007|       |    *
 3008|       |    * background must be supplied when an alpha channel must be removed from a
 3009|       |    * single byte color-mapped output format, in other words if:
 3010|       |    *
 3011|       |    * 1) The original format from png_image_begin_read_from_* had
 3012|       |    *    PNG_FORMAT_FLAG_ALPHA set.
 3013|       |    * 2) The format set by the application does not.
 3014|       |    * 3) The format set by the application has PNG_FORMAT_FLAG_COLORMAP set and
 3015|       |    *    PNG_FORMAT_FLAG_LINEAR *not* set.
 3016|       |    *
 3017|       |    * For linear output removing the alpha channel is always done by compositing
 3018|       |    * on black and background is ignored.
 3019|       |    *
 3020|       |    * colormap must be supplied when PNG_FORMAT_FLAG_COLORMAP is set.  It must
 3021|       |    * be at least the size (in bytes) returned by PNG_IMAGE_COLORMAP_SIZE.
 3022|       |    * image->colormap_entries will be updated to the actual number of entries
 3023|       |    * written to the colormap; this may be less than the original value.
 3024|       |    */
 3025|       |
 3026|       |PNG_EXPORT(238, void, png_image_free, (png_imagep image));
 3027|       |   /* Free any data allocated by libpng in image->opaque, setting the pointer to
 3028|       |    * NULL.  May be called at any time after the structure is initialized.
 3029|       |    */
 3030|       |#endif /* SIMPLIFIED_READ */
 3031|       |
 3032|       |#ifdef PNG_SIMPLIFIED_WRITE_SUPPORTED
 3033|       |/* WRITE APIS
 3034|       | * ----------
 3035|       | * For write you must initialize a png_image structure to describe the image to
 3036|       | * be written.  To do this use memset to set the whole structure to 0 then
 3037|       | * initialize fields describing your image.
 3038|       | *
 3039|       | * version: must be set to PNG_IMAGE_VERSION
 3040|       | * opaque: must be initialized to NULL
 3041|       | * width: image width in pixels
 3042|       | * height: image height in rows
 3043|       | * format: the format of the data (image and color-map) you wish to write
 3044|       | * flags: set to 0 unless one of the defined flags applies; set
 3045|       | *    PNG_IMAGE_FLAG_COLORSPACE_NOT_sRGB for color format images where the RGB
 3046|       | *    values do not correspond to the colors in sRGB.
 3047|       | * colormap_entries: set to the number of entries in the color-map (0 to 256)
 3048|       | */
 3049|       |#ifdef PNG_SIMPLIFIED_WRITE_STDIO_SUPPORTED
 3050|       |PNG_EXPORT(239, int, png_image_write_to_file, (png_imagep image,
 3051|       |   const char *file, int convert_to_8bit, const void *buffer,
 3052|       |   png_int_32 row_stride, const void *colormap));
 3053|       |   /* Write the image to the named file. */
 3054|       |
 3055|       |PNG_EXPORT(240, int, png_image_write_to_stdio, (png_imagep image, FILE *file,
 3056|       |   int convert_to_8_bit, const void *buffer, png_int_32 row_stride,
 3057|       |   const void *colormap));
 3058|       |   /* Write the image to the given (FILE*). */
 3059|       |#endif /* SIMPLIFIED_WRITE_STDIO */
 3060|       |
 3061|       |/* With all write APIs if image is in one of the linear formats with 16-bit
 3062|       | * data then setting convert_to_8_bit will cause the output to be an 8-bit PNG
 3063|       | * gamma encoded according to the sRGB specification, otherwise a 16-bit linear
 3064|       | * encoded PNG file is written.
 3065|       | *
 3066|       | * With color-mapped data formats the colormap parameter point to a color-map
 3067|       | * with at least image->colormap_entries encoded in the specified format.  If
 3068|       | * the format is linear the written PNG color-map will be converted to sRGB
 3069|       | * regardless of the convert_to_8_bit flag.
 3070|       | *
 3071|       | * With all APIs row_stride is handled as in the read APIs - it is the spacing
 3072|       | * from one row to the next in component sized units (1 or 2 bytes) and if
 3073|       | * negative indicates a bottom-up row layout in the buffer.  If row_stride is
 3074|       | * zero, libpng will calculate it for you from the image width and number of
 3075|       | * channels.
 3076|       | *
 3077|       | * Note that the write API does not support interlacing, sub-8-bit pixels or
 3078|       | * most ancillary chunks.  If you need to write text chunks (e.g. for copyright
 3079|       | * notices) you need to use one of the other APIs.
 3080|       | */
 3081|       |
 3082|       |PNG_EXPORT(245, int, png_image_write_to_memory, (png_imagep image, void *memory,
 3083|       |   png_alloc_size_t * PNG_RESTRICT memory_bytes, int convert_to_8_bit,
 3084|       |   const void *buffer, png_int_32 row_stride, const void *colormap));
 3085|       |   /* Write the image to the given memory buffer.  The function both writes the
 3086|       |    * whole PNG data stream to *memory and updates *memory_bytes with the count
 3087|       |    * of bytes written.
 3088|       |    *
 3089|       |    * 'memory' may be NULL.  In this case *memory_bytes is not read however on
 3090|       |    * success the number of bytes which would have been written will still be
 3091|       |    * stored in *memory_bytes.  On failure *memory_bytes will contain 0.
 3092|       |    *
 3093|       |    * If 'memory' is not NULL it must point to memory[*memory_bytes] of
 3094|       |    * writeable memory.
 3095|       |    *
 3096|       |    * If the function returns success memory[*memory_bytes] (if 'memory' is not
 3097|       |    * NULL) contains the written PNG data.  *memory_bytes will always be less
 3098|       |    * than or equal to the original value.
 3099|       |    *
 3100|       |    * If the function returns false and *memory_bytes was not changed an error
 3101|       |    * occurred during write.  If *memory_bytes was changed, or is not 0 if
 3102|       |    * 'memory' was NULL, the write would have succeeded but for the memory
 3103|       |    * buffer being too small.  *memory_bytes contains the required number of
 3104|       |    * bytes and will be bigger that the original value.
 3105|       |    */
 3106|       |
 3107|       |#define png_image_write_get_memory_size(image, size, convert_to_8_bit, buffer,\
 3108|       |   row_stride, colormap)\
 3109|       |   png_image_write_to_memory(&(image), 0, &(size), convert_to_8_bit, buffer,\
 3110|       |         row_stride, colormap)
 3111|       |   /* Return the amount of memory in 'size' required to compress this image.
 3112|       |    * The png_image structure 'image' must be filled in as in the above
 3113|       |    * function and must not be changed before the actual write call, the buffer
 3114|       |    * and all other parameters must also be identical to that in the final
 3115|       |    * write call.  The 'size' variable need not be initialized.
 3116|       |    *
 3117|       |    * NOTE: the macro returns true/false, if false is returned 'size' will be
 3118|       |    * set to zero and the write failed and probably will fail if tried again.
 3119|       |    */
 3120|       |
 3121|       |/* You can pre-allocate the buffer by making sure it is of sufficient size
 3122|       | * regardless of the amount of compression achieved.  The buffer size will
 3123|       | * always be bigger than the original image and it will never be filled.  The
 3124|       | * following macros are provided to assist in allocating the buffer.
 3125|       | */
 3126|       |#define PNG_IMAGE_DATA_SIZE(image) (PNG_IMAGE_SIZE(image)+(image).height)
 3127|       |   /* The number of uncompressed bytes in the PNG byte encoding of the image;
 3128|       |    * uncompressing the PNG IDAT data will give this number of bytes.
 3129|       |    *
 3130|       |    * NOTE: while PNG_IMAGE_SIZE cannot overflow for an image in memory this
 3131|       |    * macro can because of the extra bytes used in the PNG byte encoding.  You
 3132|       |    * need to avoid this macro if your image size approaches 2^30 in width or
 3133|       |    * height.  The same goes for the remainder of these macros; they all produce
 3134|       |    * bigger numbers than the actual in-memory image size.
 3135|       |    */
 3136|       |#ifndef PNG_ZLIB_MAX_SIZE
 3137|       |#  define PNG_ZLIB_MAX_SIZE(b) ((b)+(((b)+7U)>>3)+(((b)+63U)>>6)+11U)
 3138|       |   /* An upper bound on the number of compressed bytes given 'b' uncompressed
 3139|       |    * bytes.  This is based on deflateBounds() in zlib; different
 3140|       |    * implementations of zlib compression may conceivably produce more data so
 3141|       |    * if your zlib implementation is not zlib itself redefine this macro
 3142|       |    * appropriately.
 3143|       |    */
 3144|       |#endif
 3145|       |
 3146|       |#define PNG_IMAGE_COMPRESSED_SIZE_MAX(image)\
 3147|       |   PNG_ZLIB_MAX_SIZE((png_alloc_size_t)PNG_IMAGE_DATA_SIZE(image))
 3148|       |   /* An upper bound on the size of the data in the PNG IDAT chunks. */
 3149|       |
 3150|       |#define PNG_IMAGE_PNG_SIZE_MAX_(image, image_size)\
 3151|       |   ((8U/*sig*/+25U/*IHDR*/+16U/*gAMA*/+44U/*cHRM*/+12U/*IEND*/+\
 3152|       |    (((image).format&PNG_FORMAT_FLAG_COLORMAP)?/*colormap: PLTE, tRNS*/\
 3153|       |    12U+3U*(image).colormap_entries/*PLTE data*/+\
 3154|       |    (((image).format&PNG_FORMAT_FLAG_ALPHA)?\
 3155|       |    12U/*tRNS*/+(image).colormap_entries:0U):0U)+\
 3156|       |    12U)+(12U*((image_size)/PNG_ZBUF_SIZE))/*IDAT*/+(image_size))
 3157|       |   /* A helper for the following macro; if your compiler cannot handle the
 3158|       |    * following macro use this one with the result of
 3159|       |    * PNG_IMAGE_COMPRESSED_SIZE_MAX(image) as the second argument (most
 3160|       |    * compilers should handle this just fine.)
 3161|       |    */
 3162|       |
 3163|       |#define PNG_IMAGE_PNG_SIZE_MAX(image)\
 3164|       |   PNG_IMAGE_PNG_SIZE_MAX_(image, PNG_IMAGE_COMPRESSED_SIZE_MAX(image))
 3165|       |   /* An upper bound on the total length of the PNG data stream for 'image'.
 3166|       |    * The result is of type png_alloc_size_t, on 32-bit systems this may
 3167|       |    * overflow even though PNG_IMAGE_DATA_SIZE does not overflow; the write will
 3168|       |    * run out of buffer space but return a corrected size which should work.
 3169|       |    */
 3170|       |#endif /* SIMPLIFIED_WRITE */
 3171|       |/*******************************************************************************
 3172|       | *  END OF SIMPLIFIED API
 3173|       | ******************************************************************************/
 3174|       |#endif /* SIMPLIFIED_{READ|WRITE} */
 3175|       |
 3176|       |/*******************************************************************************
 3177|       | * Section 6: IMPLEMENTATION OPTIONS
 3178|       | *******************************************************************************
 3179|       | *
 3180|       | * Support for arbitrary implementation-specific optimizations.  The API allows
 3181|       | * particular options to be turned on or off.  'Option' is the number of the
 3182|       | * option and 'onoff' is 0 (off) or non-0 (on).  The value returned is given
 3183|       | * by the PNG_OPTION_ defines below.
 3184|       | *
 3185|       | * HARDWARE: normally hardware capabilities, such as the Intel SSE instructions,
 3186|       | *           are detected at run time, however sometimes it may be impossible
 3187|       | *           to do this in user mode, in which case it is necessary to discover
 3188|       | *           the capabilities in an OS specific way.  Such capabilities are
 3189|       | *           listed here when libpng has support for them and must be turned
 3190|       | *           ON by the application if present.
 3191|       | *
 3192|       | * SOFTWARE: sometimes software optimizations actually result in performance
 3193|       | *           decrease on some architectures or systems, or with some sets of
 3194|       | *           PNG images.  'Software' options allow such optimizations to be
 3195|       | *           selected at run time.
 3196|       | */
 3197|       |#ifdef PNG_SET_OPTION_SUPPORTED
 3198|       |#ifdef PNG_ARM_NEON_API_SUPPORTED
 3199|       |#  define PNG_ARM_NEON   0 /* HARDWARE: ARM Neon SIMD instructions supported */
 3200|       |#endif
 3201|       |#define PNG_MAXIMUM_INFLATE_WINDOW 2 /* SOFTWARE: force maximum window */
 3202|       |#define PNG_SKIP_sRGB_CHECK_PROFILE 4 /* SOFTWARE: Check ICC profile for sRGB */
 3203|       |#ifdef PNG_MIPS_MSA_API_SUPPORTED
 3204|       |#  define PNG_MIPS_MSA   6 /* HARDWARE: MIPS Msa SIMD instructions supported */
 3205|       |#endif
 3206|       |#ifdef PNG_DISABLE_ADLER32_CHECK_SUPPORTED
 3207|       |#  define PNG_IGNORE_ADLER32 8 /* SOFTWARE: disable Adler32 check on IDAT */
 3208|       |#endif
 3209|       |#ifdef PNG_POWERPC_VSX_API_SUPPORTED
 3210|       |#  define PNG_POWERPC_VSX   10 /* HARDWARE: PowerPC VSX SIMD instructions
 3211|       |                                * supported */
 3212|       |#endif
 3213|       |#ifdef PNG_MIPS_MMI_API_SUPPORTED
 3214|       |#  define PNG_MIPS_MMI   12 /* HARDWARE: MIPS MMI SIMD instructions supported */
 3215|       |#endif
 3216|       |
 3217|       |#define PNG_OPTION_NEXT  14 /* Next option - numbers must be even */
 3218|       |
 3219|       |/* Return values: NOTE: there are four values and 'off' is *not* zero */
 3220|       |#define PNG_OPTION_UNSET   0 /* Unset - defaults to off */
 3221|       |#define PNG_OPTION_INVALID 1 /* Option number out of range */
 3222|       |#define PNG_OPTION_OFF     2
 3223|       |#define PNG_OPTION_ON      3
 3224|       |
 3225|       |PNG_EXPORT(244, int, png_set_option, (png_structrp png_ptr, int option,
 3226|       |   int onoff));
 3227|       |#endif /* SET_OPTION */
 3228|       |
 3229|       |/*******************************************************************************
 3230|       | *  END OF HARDWARE AND SOFTWARE OPTIONS
 3231|       | ******************************************************************************/
 3232|       |
 3233|       |/* Maintainer: Put new public prototypes here ^, in libpng.3, in project
 3234|       | * defs, and in scripts/symbols.def.
 3235|       | */
 3236|       |
 3237|       |/* The last ordinal number (this is the *last* one already used; the next
 3238|       | * one to use is one more than this.)
 3239|       | */
 3240|       |#ifdef PNG_EXPORT_LAST_ORDINAL
 3241|       |  PNG_EXPORT_LAST_ORDINAL(249);
 3242|       |#endif
 3243|       |
 3244|       |#ifdef __cplusplus
 3245|       |}
 3246|       |#endif
 3247|       |
 3248|       |#endif /* PNG_VERSION_INFO_ONLY */
 3249|       |/* Do not put anything past this line */
 3250|       |#endif /* PNG_H */

